; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\encoder.o --depend=..\OBJ\encoder.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\OLED -I..\HARDWARE\ADC -I..\HARDWARE\TIMER -I..\HARDWARE\MOTOR -I..\BALANCE\CONTROL -I..\HARDWARE\ENCODER -I..\HARDWARE\IIC -I..\BALANCE\CONTROL -I..\BALANCE\DMP -I..\BALANCE\filter -I..\BALANCE\MPU6050 -I..\BALANCE\show -I..\BALANCE\controls -I..\HARDWARE\USART3 -I..\HARDWARE\EXTI -I..\HARDWARE\DataScope_DP -I"H:\KEIL MDK4\ARM\INC" -I"H:\KEIL MDK4\ARM\INC\STMicroelectronics" -DSTM32F10X_MD --omf_browse=..\OBJ\encoder.crf ..\HARDWARE\ENCODER\encoder.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Encoder_Init_TIM2 PROC
;;;10     **************************************************************************/
;;;11     void Encoder_Init_TIM2(void)
000000  b510              PUSH     {r4,lr}
;;;12     {
;;;13     	RCC->APB1ENR|=1<<0;     //TIM2时钟使能
000002  4890              LDR      r0,|L1.580|
000004  69c0              LDR      r0,[r0,#0x1c]
000006  f0400001          ORR      r0,r0,#1
00000a  498e              LDR      r1,|L1.580|
00000c  61c8              STR      r0,[r1,#0x1c]
;;;14     	RCC->APB2ENR|=1<<2;    //使能PORTA时钟
00000e  4608              MOV      r0,r1
000010  6980              LDR      r0,[r0,#0x18]
000012  f0400004          ORR      r0,r0,#4
000016  6188              STR      r0,[r1,#0x18]
;;;15     	GPIOA->CRL&=0XFFFFFF00;//PA0 PA1
000018  488b              LDR      r0,|L1.584|
00001a  6800              LDR      r0,[r0,#0]
00001c  f02000ff          BIC      r0,r0,#0xff
000020  498a              LDR      r1,|L1.588|
000022  f8c10800          STR      r0,[r1,#0x800]
;;;16     	GPIOA->CRL|=0X00000044;//浮空输入
000026  4608              MOV      r0,r1
000028  f8d00800          LDR      r0,[r0,#0x800]
00002c  f0400044          ORR      r0,r0,#0x44
000030  f8c10800          STR      r0,[r1,#0x800]
;;;17     	TIM2->DIER|=1<<0;   //允许更新中断				
000034  f04f4080          MOV      r0,#0x40000000
000038  8980              LDRH     r0,[r0,#0xc]
00003a  f0400001          ORR      r0,r0,#1
00003e  f04f4180          MOV      r1,#0x40000000
000042  8188              STRH     r0,[r1,#0xc]
;;;18     	TIM2->DIER|=1<<6;   //允许触发中断
000044  4608              MOV      r0,r1
000046  8980              LDRH     r0,[r0,#0xc]
000048  f0400040          ORR      r0,r0,#0x40
00004c  8188              STRH     r0,[r1,#0xc]
;;;19     	MY_NVIC_Init(1,3,TIM2_IRQn,1);
00004e  f04f0301          MOV      r3,#1
000052  f04f021c          MOV      r2,#0x1c
000056  f04f0103          MOV      r1,#3
00005a  4618              MOV      r0,r3
00005c  f7fffffe          BL       MY_NVIC_Init
;;;20     	TIM2->PSC = 0x0;//预分频器
000060  2000              MOVS     r0,#0
000062  f04f4180          MOV      r1,#0x40000000
000066  8508              STRH     r0,[r1,#0x28]
;;;21     	TIM2->ARR = ENCODER_TIM_PERIOD;//设定计数器自动重装值 
000068  f64f70ff          MOV      r0,#0xffff
00006c  8588              STRH     r0,[r1,#0x2c]
;;;22     	TIM2->CR1 &=~(3<<8);// 选择时钟分频：不分频
00006e  4608              MOV      r0,r1
000070  8800              LDRH     r0,[r0,#0]
000072  f4207040          BIC      r0,r0,#0x300
000076  8008              STRH     r0,[r1,#0]
;;;23     	TIM2->CR1 &=~(3<<5);// 选择计数模式:边沿对齐模式
000078  4608              MOV      r0,r1
00007a  8800              LDRH     r0,[r0,#0]
00007c  f0200060          BIC      r0,r0,#0x60
000080  8008              STRH     r0,[r1,#0]
;;;24     		
;;;25     	TIM2->CCMR1 |= 1<<0; //CC1S='01' IC1FP1映射到TI1
000082  4608              MOV      r0,r1
000084  8b00              LDRH     r0,[r0,#0x18]
000086  f0400001          ORR      r0,r0,#1
00008a  8308              STRH     r0,[r1,#0x18]
;;;26     	TIM2->CCMR1 |= 1<<8; //CC2S='01' IC2FP2映射到TI2
00008c  4608              MOV      r0,r1
00008e  8b00              LDRH     r0,[r0,#0x18]
000090  f4407080          ORR      r0,r0,#0x100
000094  8308              STRH     r0,[r1,#0x18]
;;;27     	TIM2->CCER &= ~(1<<1);	 //CC1P='0'	 IC1FP1不反相，IC1FP1=TI1
000096  4608              MOV      r0,r1
000098  8c00              LDRH     r0,[r0,#0x20]
00009a  f0200002          BIC      r0,r0,#2
00009e  8408              STRH     r0,[r1,#0x20]
;;;28     	TIM2->CCER &= ~(1<<5);	 //CC2P='0'	 IC2FP2不反相，IC2FP2=TI2
0000a0  4608              MOV      r0,r1
0000a2  8c00              LDRH     r0,[r0,#0x20]
0000a4  f0200020          BIC      r0,r0,#0x20
0000a8  8408              STRH     r0,[r1,#0x20]
;;;29     	TIM2->CCMR1 |= 3<<4; //	IC1F='1000' 输入捕获1滤波器
0000aa  4608              MOV      r0,r1
0000ac  8b00              LDRH     r0,[r0,#0x18]
0000ae  f0400030          ORR      r0,r0,#0x30
0000b2  8308              STRH     r0,[r1,#0x18]
;;;30     	TIM2->SMCR |= 3<<0;	 //SMS='011' 所有的输入均在上升沿和下降沿有效
0000b4  4608              MOV      r0,r1
0000b6  8900              LDRH     r0,[r0,#8]
0000b8  f0400003          ORR      r0,r0,#3
0000bc  8108              STRH     r0,[r1,#8]
;;;31     	TIM2->CR1 |= 0x01;    //CEN=1，使能定时器
0000be  4608              MOV      r0,r1
0000c0  8800              LDRH     r0,[r0,#0]
0000c2  f0400001          ORR      r0,r0,#1
0000c6  8008              STRH     r0,[r1,#0]
;;;32     }
0000c8  bd10              POP      {r4,pc}
;;;33     /**************************************************************************
                          ENDP

                  Encoder_Init_TIM4 PROC
;;;37     **************************************************************************/
;;;38     void Encoder_Init_TIM4(void)
0000ca  b510              PUSH     {r4,lr}
;;;39     {
;;;40     	RCC->APB1ENR|=1<<2;     //TIM4时钟使能
0000cc  485d              LDR      r0,|L1.580|
0000ce  69c0              LDR      r0,[r0,#0x1c]
0000d0  f0400004          ORR      r0,r0,#4
0000d4  495b              LDR      r1,|L1.580|
0000d6  61c8              STR      r0,[r1,#0x1c]
;;;41     	RCC->APB2ENR|=1<<3;     //使能PORTB时钟
0000d8  4608              MOV      r0,r1
0000da  6980              LDR      r0,[r0,#0x18]
0000dc  f0400008          ORR      r0,r0,#8
0000e0  6188              STR      r0,[r1,#0x18]
;;;42     	GPIOB->CRL&=0X00FFFFFF; //PB6 PB7
0000e2  485b              LDR      r0,|L1.592|
0000e4  6800              LDR      r0,[r0,#0]
0000e6  f020407f          BIC      r0,r0,#0xff000000
0000ea  4958              LDR      r1,|L1.588|
0000ec  f8c10c00          STR      r0,[r1,#0xc00]
;;;43     	GPIOB->CRL|=0X44000000; //浮空输入
0000f0  4608              MOV      r0,r1
0000f2  f8d00c00          LDR      r0,[r0,#0xc00]
0000f6  f0404088          ORR      r0,r0,#0x44000000
0000fa  f8c10c00          STR      r0,[r1,#0xc00]
;;;44     	TIM4->DIER|=1<<0;   //允许更新中断				
0000fe  f04f4080          MOV      r0,#0x40000000
000102  f8b0080c          LDRH     r0,[r0,#0x80c]
000106  f0400001          ORR      r0,r0,#1
00010a  f04f4180          MOV      r1,#0x40000000
00010e  f8a1080c          STRH     r0,[r1,#0x80c]
;;;45     	TIM4->DIER|=1<<6;   //允许触发中断
000112  4608              MOV      r0,r1
000114  f8b0080c          LDRH     r0,[r0,#0x80c]
000118  f0400040          ORR      r0,r0,#0x40
00011c  f8a1080c          STRH     r0,[r1,#0x80c]
;;;46     	MY_NVIC_Init(1,3,TIM4_IRQn,1);
000120  f04f0301          MOV      r3,#1
000124  f04f021e          MOV      r2,#0x1e
000128  f04f0103          MOV      r1,#3
00012c  4618              MOV      r0,r3
00012e  f7fffffe          BL       MY_NVIC_Init
;;;47     	TIM4->PSC = 0x0;//预分频器
000132  2000              MOVS     r0,#0
000134  4947              LDR      r1,|L1.596|
000136  8008              STRH     r0,[r1,#0]
;;;48     	TIM4->ARR = ENCODER_TIM_PERIOD;//设定计数器自动重装值 
000138  f64f70ff          MOV      r0,#0xffff
00013c  f04f4180          MOV      r1,#0x40000000
000140  f8a1082c          STRH     r0,[r1,#0x82c]
;;;49     	TIM4->CR1 &=~(3<<8);// 选择时钟分频：不分频
000144  4608              MOV      r0,r1
000146  f8b00800          LDRH     r0,[r0,#0x800]
00014a  f4207040          BIC      r0,r0,#0x300
00014e  f8a10800          STRH     r0,[r1,#0x800]
;;;50     	TIM4->CR1 &=~(3<<5);// 选择计数模式:边沿对齐模式
000152  4608              MOV      r0,r1
000154  f8b00800          LDRH     r0,[r0,#0x800]
000158  f0200060          BIC      r0,r0,#0x60
00015c  f8a10800          STRH     r0,[r1,#0x800]
;;;51     		
;;;52     	TIM4->CCMR1 |= 1<<0; //CC1S='01' IC1FP1映射到TI1
000160  4608              MOV      r0,r1
000162  f8b00818          LDRH     r0,[r0,#0x818]
000166  f0400001          ORR      r0,r0,#1
00016a  f8a10818          STRH     r0,[r1,#0x818]
;;;53     	TIM4->CCMR1 |= 1<<8; //CC2S='01' IC2FP2映射到TI2
00016e  4608              MOV      r0,r1
000170  f8b00818          LDRH     r0,[r0,#0x818]
000174  f4407080          ORR      r0,r0,#0x100
000178  f8a10818          STRH     r0,[r1,#0x818]
;;;54     	TIM4->CCER &= ~(1<<1);	 //CC1P='0'	 IC1FP1不反相，IC1FP1=TI1
00017c  4608              MOV      r0,r1
00017e  f8b00820          LDRH     r0,[r0,#0x820]
000182  f0200002          BIC      r0,r0,#2
000186  f8a10820          STRH     r0,[r1,#0x820]
;;;55     	TIM4->CCER &= ~(1<<5);	 //CC2P='0'	 IC2FP2不反相，IC2FP2=TI2
00018a  4608              MOV      r0,r1
00018c  f8b00820          LDRH     r0,[r0,#0x820]
000190  f0200020          BIC      r0,r0,#0x20
000194  f8a10820          STRH     r0,[r1,#0x820]
;;;56     	TIM4->CCMR1 |= 3<<4; //	IC1F='1000' 输入捕获1滤波器
000198  4608              MOV      r0,r1
00019a  f8b00818          LDRH     r0,[r0,#0x818]
00019e  f0400030          ORR      r0,r0,#0x30
0001a2  f8a10818          STRH     r0,[r1,#0x818]
;;;57     	TIM4->SMCR |= 3<<0;	 //SMS='011' 所有的输入均在上升沿和下降沿有效
0001a6  4608              MOV      r0,r1
0001a8  f8b00808          LDRH     r0,[r0,#0x808]
0001ac  f0400003          ORR      r0,r0,#3
0001b0  f8a10808          STRH     r0,[r1,#0x808]
;;;58     	TIM4->CR1 |= 0x01;    //CEN=1，使能定时器
0001b4  4608              MOV      r0,r1
0001b6  f8b00800          LDRH     r0,[r0,#0x800]
0001ba  f0400001          ORR      r0,r0,#1
0001be  f8a10800          STRH     r0,[r1,#0x800]
;;;59     }
0001c2  bd10              POP      {r4,pc}
;;;60     /**************************************************************************
                          ENDP

                  Read_Encoder PROC
;;;64     **************************************************************************/
;;;65     int Read_Encoder(u8 TIMX)
0001c4  4601              MOV      r1,r0
;;;66     {
;;;67         int Encoder_TIM;    
;;;68        switch(TIMX)
0001c6  2902              CMP      r1,#2
0001c8  d004              BEQ      |L1.468|
0001ca  2903              CMP      r1,#3
0001cc  d00b              BEQ      |L1.486|
0001ce  2904              CMP      r1,#4
0001d0  d11d              BNE      |L1.526|
0001d2  e012              B        |L1.506|
                  |L1.468|
;;;69     	 {
;;;70     	   case 2:  Encoder_TIM= (short)TIM2 -> CNT;  TIM2 -> CNT=0;break;
0001d4  f04f4280          MOV      r2,#0x40000000
0001d8  8c92              LDRH     r2,[r2,#0x24]
0001da  b210              SXTH     r0,r2
0001dc  2200              MOVS     r2,#0
0001de  f04f4380          MOV      r3,#0x40000000
0001e2  849a              STRH     r2,[r3,#0x24]
0001e4  e015              B        |L1.530|
                  |L1.486|
;;;71     		 case 3:  Encoder_TIM= (short)TIM3 -> CNT;  TIM3 -> CNT=0;break;	
0001e6  4a1c              LDR      r2,|L1.600|
0001e8  8812              LDRH     r2,[r2,#0]
0001ea  b210              SXTH     r0,r2
0001ec  f04f0200          MOV      r2,#0
0001f0  f04f4380          MOV      r3,#0x40000000
0001f4  f8a32424          STRH     r2,[r3,#0x424]
0001f8  e00b              B        |L1.530|
                  |L1.506|
;;;72     		 case 4:  Encoder_TIM= (short)TIM4 -> CNT;  TIM4 -> CNT=0;break;	
0001fa  4a18              LDR      r2,|L1.604|
0001fc  8812              LDRH     r2,[r2,#0]
0001fe  b210              SXTH     r0,r2
000200  f04f0200          MOV      r2,#0
000204  f04f4380          MOV      r3,#0x40000000
000208  f8a32824          STRH     r2,[r3,#0x824]
00020c  e001              B        |L1.530|
                  |L1.526|
;;;73     		 default:  Encoder_TIM=0;
00020e  2000              MOVS     r0,#0
000210  bf00              NOP                            ;68
                  |L1.530|
000212  bf00              NOP                            ;70
;;;74     	 }
;;;75     		return Encoder_TIM;
;;;76     }
000214  4770              BX       lr
;;;77     /**************************************************************************
                          ENDP

                  TIM4_IRQHandler PROC
;;;81     **************************************************************************/
;;;82     void TIM4_IRQHandler(void)
000216  4812              LDR      r0,|L1.608|
;;;83     { 		    		  			    
;;;84     	if(TIM4->SR&0X0001)//溢出中断
000218  8800              LDRH     r0,[r0,#0]
;;;85     	{    				   				     	    	
;;;86     	}				   
;;;87     	TIM4->SR&=~(1<<0);//清除中断标志位 	    
00021a  f04f4080          MOV      r0,#0x40000000
00021e  f8b00810          LDRH     r0,[r0,#0x810]
000222  f0200001          BIC      r0,r0,#1
000226  490e              LDR      r1,|L1.608|
000228  8008              STRH     r0,[r1,#0]
;;;88     }
00022a  4770              BX       lr
;;;89     /**************************************************************************
                          ENDP

                  TIM2_IRQHandler PROC
;;;93     **************************************************************************/
;;;94     void TIM2_IRQHandler(void)
00022c  f04f4080          MOV      r0,#0x40000000
;;;95     { 		    		  			    
;;;96     	if(TIM2->SR&0X0001)//溢出中断
000230  8a00              LDRH     r0,[r0,#0x10]
;;;97     	{    				   				     	    	
;;;98     	}				   
;;;99     	TIM2->SR&=~(1<<0);//清除中断标志位 	    
000232  f04f4080          MOV      r0,#0x40000000
000236  8a00              LDRH     r0,[r0,#0x10]
000238  f0200001          BIC      r0,r0,#1
00023c  f04f4180          MOV      r1,#0x40000000
000240  8208              STRH     r0,[r1,#0x10]
;;;100    }
000242  4770              BX       lr
;;;101    
                          ENDP

                  |L1.580|
                          DCD      0x40021000
                  |L1.584|
                          DCD      0x40010800
                  |L1.588|
                          DCD      0x40010000
                  |L1.592|
                          DCD      0x40010c00
                  |L1.596|
                          DCD      0x40000828
                  |L1.600|
                          DCD      0x40000424
                  |L1.604|
                          DCD      0x40000824
                  |L1.608|
                          DCD      0x40000810

; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\inv_mpu_dmp_motion_driver.o --depend=..\OBJ\inv_mpu_dmp_motion_driver.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\OLED -I..\HARDWARE\ADC -I..\HARDWARE\TIMER -I..\HARDWARE\MOTOR -I..\BALANCE\CONTROL -I..\HARDWARE\ENCODER -I..\HARDWARE\IIC -I..\BALANCE\CONTROL -I..\BALANCE\DMP -I..\BALANCE\filter -I..\BALANCE\MPU6050 -I..\BALANCE\show -I..\BALANCE\controls -I..\HARDWARE\USART3 -I..\HARDWARE\EXTI -I..\HARDWARE\DataScope_DP -I"H:\KEIL MDK4\ARM\INC" -I"H:\KEIL MDK4\ARM\INC\STMicroelectronics" -DSTM32F10X_MD --omf_browse=..\OBJ\inv_mpu_dmp_motion_driver.crf ..\BALANCE\DMP\inv_mpu_dmp_motion_driver.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dmp_load_motion_driver_firmware PROC
;;;495     */
;;;496    int dmp_load_motion_driver_firmware(void)
000000  b510              PUSH     {r4,lr}
;;;497    {
;;;498        return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
000002  23c8              MOVS     r3,#0xc8
000004  f44f6280          MOV      r2,#0x400
000008  49fb              LDR      r1,|L1.1016|
00000a  f64030f6          MOV      r0,#0xbf6
00000e  f7fffffe          BL       mpu_load_firmware
;;;499            DMP_SAMPLE_RATE);
;;;500    }
000012  bd10              POP      {r4,pc}
;;;501    
                          ENDP

                  dmp_set_orientation PROC
;;;508     */
;;;509    int dmp_set_orientation(unsigned short orient)
000014  b510              PUSH     {r4,lr}
;;;510    {
000016  b086              SUB      sp,sp,#0x18
000018  4604              MOV      r4,r0
;;;511        unsigned char gyro_regs[3], accel_regs[3];
;;;512        const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
00001a  a0f8              ADR      r0,|L1.1020|
00001c  6800              LDR      r0,[r0,#0]
00001e  9003              STR      r0,[sp,#0xc]
;;;513        const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
000020  a0f7              ADR      r0,|L1.1024|
000022  6800              LDR      r0,[r0,#0]
000024  9002              STR      r0,[sp,#8]
;;;514        const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
000026  a0f7              ADR      r0,|L1.1028|
000028  6800              LDR      r0,[r0,#0]
00002a  9001              STR      r0,[sp,#4]
;;;515        const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
00002c  a0f6              ADR      r0,|L1.1032|
00002e  6800              LDR      r0,[r0,#0]
000030  9000              STR      r0,[sp,#0]
;;;516    
;;;517        gyro_regs[0] = gyro_axes[orient & 3];
000032  f0040003          AND      r0,r4,#3
000036  a903              ADD      r1,sp,#0xc
000038  5c08              LDRB     r0,[r1,r0]
00003a  f88d0014          STRB     r0,[sp,#0x14]
;;;518        gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
00003e  a803              ADD      r0,sp,#0xc
000040  f3c401c1          UBFX     r1,r4,#3,#2
000044  5c40              LDRB     r0,[r0,r1]
000046  f88d0015          STRB     r0,[sp,#0x15]
;;;519        gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
00004a  a803              ADD      r0,sp,#0xc
00004c  f3c41181          UBFX     r1,r4,#6,#2
000050  5c40              LDRB     r0,[r0,r1]
000052  f88d0016          STRB     r0,[sp,#0x16]
;;;520        accel_regs[0] = accel_axes[orient & 3];
000056  f0040003          AND      r0,r4,#3
00005a  a902              ADD      r1,sp,#8
00005c  5c08              LDRB     r0,[r1,r0]
00005e  f88d0010          STRB     r0,[sp,#0x10]
;;;521        accel_regs[1] = accel_axes[(orient >> 3) & 3];
000062  a802              ADD      r0,sp,#8
000064  f3c401c1          UBFX     r1,r4,#3,#2
000068  5c40              LDRB     r0,[r0,r1]
00006a  f88d0011          STRB     r0,[sp,#0x11]
;;;522        accel_regs[2] = accel_axes[(orient >> 6) & 3];
00006e  a802              ADD      r0,sp,#8
000070  f3c41181          UBFX     r1,r4,#6,#2
000074  5c40              LDRB     r0,[r0,r1]
000076  f88d0012          STRB     r0,[sp,#0x12]
;;;523    
;;;524        /* Chip-to-body, axes only. */
;;;525        if (mpu_write_mem(FCFG_1, 3, gyro_regs))
00007a  aa05              ADD      r2,sp,#0x14
00007c  2103              MOVS     r1,#3
00007e  f2404026          MOV      r0,#0x426
000082  f7fffffe          BL       mpu_write_mem
000086  b118              CBZ      r0,|L1.144|
;;;526            return -1;
000088  f04f30ff          MOV      r0,#0xffffffff
                  |L1.140|
;;;527        if (mpu_write_mem(FCFG_2, 3, accel_regs))
;;;528            return -1;
;;;529    
;;;530        memcpy(gyro_regs, gyro_sign, 3);
;;;531        memcpy(accel_regs, accel_sign, 3);
;;;532        if (orient & 4) {
;;;533            gyro_regs[0] |= 1;
;;;534            accel_regs[0] |= 1;
;;;535        }
;;;536        if (orient & 0x20) {
;;;537            gyro_regs[1] |= 1;
;;;538            accel_regs[1] |= 1;
;;;539        }
;;;540        if (orient & 0x100) {
;;;541            gyro_regs[2] |= 1;
;;;542            accel_regs[2] |= 1;
;;;543        }
;;;544    
;;;545        /* Chip-to-body, sign only. */
;;;546        if (mpu_write_mem(FCFG_3, 3, gyro_regs))
;;;547            return -1;
;;;548        if (mpu_write_mem(FCFG_7, 3, accel_regs))
;;;549            return -1;
;;;550        dmp.orient = orient;
;;;551        return 0;
;;;552    }
00008c  b006              ADD      sp,sp,#0x18
00008e  bd10              POP      {r4,pc}
                  |L1.144|
000090  aa04              ADD      r2,sp,#0x10           ;527
000092  2103              MOVS     r1,#3                 ;527
000094  f240402a          MOV      r0,#0x42a             ;527
000098  f7fffffe          BL       mpu_write_mem
00009c  b110              CBZ      r0,|L1.164|
00009e  f04f30ff          MOV      r0,#0xffffffff        ;528
0000a2  e7f3              B        |L1.140|
                  |L1.164|
0000a4  9801              LDR      r0,[sp,#4]            ;530
0000a6  9005              STR      r0,[sp,#0x14]         ;530
0000a8  9800              LDR      r0,[sp,#0]            ;531
0000aa  9004              STR      r0,[sp,#0x10]         ;531
0000ac  f0140f04          TST      r4,#4                 ;532
0000b0  d00b              BEQ      |L1.202|
0000b2  f89d0014          LDRB     r0,[sp,#0x14]         ;533
0000b6  f0400001          ORR      r0,r0,#1              ;533
0000ba  f88d0014          STRB     r0,[sp,#0x14]         ;533
0000be  f89d0010          LDRB     r0,[sp,#0x10]         ;534
0000c2  f0400001          ORR      r0,r0,#1              ;534
0000c6  f88d0010          STRB     r0,[sp,#0x10]         ;534
                  |L1.202|
0000ca  f0140f20          TST      r4,#0x20              ;536
0000ce  d00b              BEQ      |L1.232|
0000d0  f89d0015          LDRB     r0,[sp,#0x15]         ;537
0000d4  f0400001          ORR      r0,r0,#1              ;537
0000d8  f88d0015          STRB     r0,[sp,#0x15]         ;537
0000dc  f89d0011          LDRB     r0,[sp,#0x11]         ;538
0000e0  f0400001          ORR      r0,r0,#1              ;538
0000e4  f88d0011          STRB     r0,[sp,#0x11]         ;538
                  |L1.232|
0000e8  f4147f80          TST      r4,#0x100             ;540
0000ec  d00b              BEQ      |L1.262|
0000ee  f89d0016          LDRB     r0,[sp,#0x16]         ;541
0000f2  f0400001          ORR      r0,r0,#1              ;541
0000f6  f88d0016          STRB     r0,[sp,#0x16]         ;541
0000fa  f89d0012          LDRB     r0,[sp,#0x12]         ;542
0000fe  f0400001          ORR      r0,r0,#1              ;542
000102  f88d0012          STRB     r0,[sp,#0x12]         ;542
                  |L1.262|
000106  aa05              ADD      r2,sp,#0x14           ;546
000108  2103              MOVS     r1,#3                 ;546
00010a  f44f6088          MOV      r0,#0x440             ;546
00010e  f7fffffe          BL       mpu_write_mem
000112  b110              CBZ      r0,|L1.282|
000114  f04f30ff          MOV      r0,#0xffffffff        ;547
000118  e7b8              B        |L1.140|
                  |L1.282|
00011a  aa04              ADD      r2,sp,#0x10           ;548
00011c  2103              MOVS     r1,#3                 ;548
00011e  f2404031          MOV      r0,#0x431             ;548
000122  f7fffffe          BL       mpu_write_mem
000126  b110              CBZ      r0,|L1.302|
000128  f04f30ff          MOV      r0,#0xffffffff        ;549
00012c  e7ae              B        |L1.140|
                  |L1.302|
00012e  48b7              LDR      r0,|L1.1036|
000130  8104              STRH     r4,[r0,#8]            ;550
000132  2000              MOVS     r0,#0                 ;551
000134  e7aa              B        |L1.140|
;;;553    
                          ENDP

                  dmp_set_gyro_bias PROC
;;;563     */
;;;564    int dmp_set_gyro_bias(long *bias)
000136  e92d47ff          PUSH     {r0-r10,lr}
;;;565    {
00013a  4604              MOV      r4,r0
;;;566        long gyro_bias_body[3];
;;;567        unsigned char regs[4];
;;;568    
;;;569        gyro_bias_body[0] = bias[dmp.orient & 3];
00013c  48b3              LDR      r0,|L1.1036|
00013e  8900              LDRH     r0,[r0,#8]  ; dmp
000140  f0000003          AND      r0,r0,#3
000144  f8540020          LDR      r0,[r4,r0,LSL #2]
000148  9001              STR      r0,[sp,#4]
;;;570        if (dmp.orient & 4)
00014a  48b0              LDR      r0,|L1.1036|
00014c  8900              LDRH     r0,[r0,#8]  ; dmp
00014e  f0100f04          TST      r0,#4
000152  d002              BEQ      |L1.346|
;;;571            gyro_bias_body[0] *= -1;
000154  9801              LDR      r0,[sp,#4]
000156  4240              RSBS     r0,r0,#0
000158  9001              STR      r0,[sp,#4]
                  |L1.346|
;;;572        gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
00015a  48ac              LDR      r0,|L1.1036|
00015c  8900              LDRH     r0,[r0,#8]  ; dmp
00015e  f3c000c1          UBFX     r0,r0,#3,#2
000162  f8540020          LDR      r0,[r4,r0,LSL #2]
000166  9002              STR      r0,[sp,#8]
;;;573        if (dmp.orient & 0x20)
000168  48a8              LDR      r0,|L1.1036|
00016a  8900              LDRH     r0,[r0,#8]  ; dmp
00016c  f0100f20          TST      r0,#0x20
000170  d002              BEQ      |L1.376|
;;;574            gyro_bias_body[1] *= -1;
000172  9802              LDR      r0,[sp,#8]
000174  4240              RSBS     r0,r0,#0
000176  9002              STR      r0,[sp,#8]
                  |L1.376|
;;;575        gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
000178  48a4              LDR      r0,|L1.1036|
00017a  8900              LDRH     r0,[r0,#8]  ; dmp
00017c  f3c01081          UBFX     r0,r0,#6,#2
000180  f8540020          LDR      r0,[r4,r0,LSL #2]
000184  9003              STR      r0,[sp,#0xc]
;;;576        if (dmp.orient & 0x100)
000186  48a1              LDR      r0,|L1.1036|
000188  8900              LDRH     r0,[r0,#8]  ; dmp
00018a  f4107f80          TST      r0,#0x100
00018e  d002              BEQ      |L1.406|
;;;577            gyro_bias_body[2] *= -1;
000190  9803              LDR      r0,[sp,#0xc]
000192  4240              RSBS     r0,r0,#0
000194  9003              STR      r0,[sp,#0xc]
                  |L1.406|
;;;578    
;;;579    #ifdef EMPL_NO_64BIT
;;;580        gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
;;;581        gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
;;;582        gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
;;;583    #else
;;;584        gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
000196  499e              LDR      r1,|L1.1040|
000198  9801              LDR      r0,[sp,#4]
00019a  fb805a01          SMULL    r5,r10,r0,r1
00019e  221e              MOVS     r2,#0x1e
0001a0  4628              MOV      r0,r5
0001a2  4651              MOV      r1,r10
0001a4  f7fffffe          BL       __aeabi_lasr
0001a8  9001              STR      r0,[sp,#4]
;;;585        gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
0001aa  4999              LDR      r1,|L1.1040|
0001ac  9802              LDR      r0,[sp,#8]
0001ae  fb806701          SMULL    r6,r7,r0,r1
0001b2  221e              MOVS     r2,#0x1e
0001b4  4630              MOV      r0,r6
0001b6  4639              MOV      r1,r7
0001b8  f7fffffe          BL       __aeabi_lasr
0001bc  9002              STR      r0,[sp,#8]
;;;586        gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
0001be  4994              LDR      r1,|L1.1040|
0001c0  9803              LDR      r0,[sp,#0xc]
0001c2  fb808901          SMULL    r8,r9,r0,r1
0001c6  221e              MOVS     r2,#0x1e
0001c8  4640              MOV      r0,r8
0001ca  4649              MOV      r1,r9
0001cc  f7fffffe          BL       __aeabi_lasr
0001d0  9003              STR      r0,[sp,#0xc]
;;;587    #endif
;;;588    
;;;589        regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
0001d2  9801              LDR      r0,[sp,#4]
0001d4  0e00              LSRS     r0,r0,#24
0001d6  f88d0000          STRB     r0,[sp,#0]
;;;590        regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
0001da  9801              LDR      r0,[sp,#4]
0001dc  0c00              LSRS     r0,r0,#16
0001de  f88d0001          STRB     r0,[sp,#1]
;;;591        regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
0001e2  9801              LDR      r0,[sp,#4]
0001e4  0a00              LSRS     r0,r0,#8
0001e6  f88d0002          STRB     r0,[sp,#2]
;;;592        regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
0001ea  9801              LDR      r0,[sp,#4]
0001ec  b2c0              UXTB     r0,r0
0001ee  f88d0003          STRB     r0,[sp,#3]
;;;593        if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
0001f2  466a              MOV      r2,sp
0001f4  2104              MOVS     r1,#4
0001f6  f44f7074          MOV      r0,#0x3d0
0001fa  f7fffffe          BL       mpu_write_mem
0001fe  b120              CBZ      r0,|L1.522|
;;;594            return -1;
000200  f04f30ff          MOV      r0,#0xffffffff
                  |L1.516|
;;;595    
;;;596        regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
;;;597        regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
;;;598        regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
;;;599        regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
;;;600        if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
;;;601            return -1;
;;;602    
;;;603        regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
;;;604        regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
;;;605        regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
;;;606        regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
;;;607        return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
;;;608    }
000204  b004              ADD      sp,sp,#0x10
000206  e8bd87f0          POP      {r4-r10,pc}
                  |L1.522|
00020a  9802              LDR      r0,[sp,#8]            ;596
00020c  0e00              LSRS     r0,r0,#24             ;596
00020e  f88d0000          STRB     r0,[sp,#0]            ;596
000212  9802              LDR      r0,[sp,#8]            ;597
000214  0c00              LSRS     r0,r0,#16             ;597
000216  f88d0001          STRB     r0,[sp,#1]            ;597
00021a  9802              LDR      r0,[sp,#8]            ;598
00021c  0a00              LSRS     r0,r0,#8              ;598
00021e  f88d0002          STRB     r0,[sp,#2]            ;598
000222  9802              LDR      r0,[sp,#8]            ;599
000224  b2c0              UXTB     r0,r0                 ;599
000226  f88d0003          STRB     r0,[sp,#3]            ;599
00022a  466a              MOV      r2,sp                 ;600
00022c  2104              MOVS     r1,#4                 ;600
00022e  f44f7075          MOV      r0,#0x3d4             ;600
000232  f7fffffe          BL       mpu_write_mem
000236  b110              CBZ      r0,|L1.574|
000238  f04f30ff          MOV      r0,#0xffffffff        ;601
00023c  e7e2              B        |L1.516|
                  |L1.574|
00023e  9803              LDR      r0,[sp,#0xc]          ;603
000240  0e00              LSRS     r0,r0,#24             ;603
000242  f88d0000          STRB     r0,[sp,#0]            ;603
000246  9803              LDR      r0,[sp,#0xc]          ;604
000248  0c00              LSRS     r0,r0,#16             ;604
00024a  f88d0001          STRB     r0,[sp,#1]            ;604
00024e  9803              LDR      r0,[sp,#0xc]          ;605
000250  0a00              LSRS     r0,r0,#8              ;605
000252  f88d0002          STRB     r0,[sp,#2]            ;605
000256  9803              LDR      r0,[sp,#0xc]          ;606
000258  b2c0              UXTB     r0,r0                 ;606
00025a  f88d0003          STRB     r0,[sp,#3]            ;606
00025e  466a              MOV      r2,sp                 ;607
000260  2104              MOVS     r1,#4                 ;607
000262  f44f7076          MOV      r0,#0x3d8             ;607
000266  f7fffffe          BL       mpu_write_mem
00026a  e7cb              B        |L1.516|
;;;609    
                          ENDP

                  dmp_set_accel_bias PROC
;;;615     */
;;;616    int dmp_set_accel_bias(long *bias)
00026c  e92d4ff0          PUSH     {r4-r11,lr}
;;;617    {
000270  b08b              SUB      sp,sp,#0x2c
000272  4607              MOV      r7,r0
;;;618        long accel_bias_body[3];
;;;619        unsigned char regs[12];
;;;620        long long accel_sf;
;;;621        unsigned short accel_sens;
;;;622    
;;;623        mpu_get_accel_sens(&accel_sens);
000274  a801              ADD      r0,sp,#4
000276  f7fffffe          BL       mpu_get_accel_sens
;;;624        accel_sf = (long long)accel_sens << 15;
00027a  f8bd6004          LDRH     r6,[sp,#4]
00027e  2000              MOVS     r0,#0
000280  220f              MOVS     r2,#0xf
000282  9008              STR      r0,[sp,#0x20]
000284  4630              MOV      r0,r6
000286  9908              LDR      r1,[sp,#0x20]
000288  f7fffffe          BL       __aeabi_llsl
00028c  4604              MOV      r4,r0
00028e  460d              MOV      r5,r1
;;;625        //__no_operation();
;;;626    
;;;627        accel_bias_body[0] = bias[dmp.orient & 3];
000290  485e              LDR      r0,|L1.1036|
000292  8900              LDRH     r0,[r0,#8]  ; dmp
000294  f0000003          AND      r0,r0,#3
000298  f8570020          LDR      r0,[r7,r0,LSL #2]
00029c  9005              STR      r0,[sp,#0x14]
;;;628        if (dmp.orient & 4)
00029e  485b              LDR      r0,|L1.1036|
0002a0  8900              LDRH     r0,[r0,#8]  ; dmp
0002a2  f0100f04          TST      r0,#4
0002a6  d002              BEQ      |L1.686|
;;;629            accel_bias_body[0] *= -1;
0002a8  9805              LDR      r0,[sp,#0x14]
0002aa  4240              RSBS     r0,r0,#0
0002ac  9005              STR      r0,[sp,#0x14]
                  |L1.686|
;;;630        accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
0002ae  4857              LDR      r0,|L1.1036|
0002b0  8900              LDRH     r0,[r0,#8]  ; dmp
0002b2  f3c000c1          UBFX     r0,r0,#3,#2
0002b6  f8570020          LDR      r0,[r7,r0,LSL #2]
0002ba  9006              STR      r0,[sp,#0x18]
;;;631        if (dmp.orient & 0x20)
0002bc  4853              LDR      r0,|L1.1036|
0002be  8900              LDRH     r0,[r0,#8]  ; dmp
0002c0  f0100f20          TST      r0,#0x20
0002c4  d002              BEQ      |L1.716|
;;;632            accel_bias_body[1] *= -1;
0002c6  9806              LDR      r0,[sp,#0x18]
0002c8  4240              RSBS     r0,r0,#0
0002ca  9006              STR      r0,[sp,#0x18]
                  |L1.716|
;;;633        accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
0002cc  484f              LDR      r0,|L1.1036|
0002ce  8900              LDRH     r0,[r0,#8]  ; dmp
0002d0  f3c01081          UBFX     r0,r0,#6,#2
0002d4  f8570020          LDR      r0,[r7,r0,LSL #2]
0002d8  9007              STR      r0,[sp,#0x1c]
;;;634        if (dmp.orient & 0x100)
0002da  484c              LDR      r0,|L1.1036|
0002dc  8900              LDRH     r0,[r0,#8]  ; dmp
0002de  f4107f80          TST      r0,#0x100
0002e2  d002              BEQ      |L1.746|
;;;635            accel_bias_body[2] *= -1;
0002e4  9807              LDR      r0,[sp,#0x1c]
0002e6  4240              RSBS     r0,r0,#0
0002e8  9007              STR      r0,[sp,#0x1c]
                  |L1.746|
;;;636    
;;;637    #ifdef EMPL_NO_64BIT
;;;638        accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
;;;639        accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
;;;640        accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
;;;641    #else
;;;642        accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
0002ea  9805              LDR      r0,[sp,#0x14]
0002ec  17c1              ASRS     r1,r0,#31
0002ee  fba08204          UMULL    r8,r2,r0,r4
0002f2  fb012104          MLA      r1,r1,r4,r2
0002f6  fb001005          MLA      r0,r0,r5,r1
0002fa  221e              MOVS     r2,#0x1e
0002fc  900a              STR      r0,[sp,#0x28]
0002fe  4640              MOV      r0,r8
000300  990a              LDR      r1,[sp,#0x28]
000302  f7fffffe          BL       __aeabi_lasr
000306  9005              STR      r0,[sp,#0x14]
;;;643        accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
000308  9806              LDR      r0,[sp,#0x18]
00030a  17c1              ASRS     r1,r0,#31
00030c  fba09204          UMULL    r9,r2,r0,r4
000310  fb012104          MLA      r1,r1,r4,r2
000314  fb001a05          MLA      r10,r0,r5,r1
000318  221e              MOVS     r2,#0x1e
00031a  4648              MOV      r0,r9
00031c  4651              MOV      r1,r10
00031e  f7fffffe          BL       __aeabi_lasr
000322  9006              STR      r0,[sp,#0x18]
;;;644        accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
000324  9807              LDR      r0,[sp,#0x1c]
000326  17c1              ASRS     r1,r0,#31
000328  fba0b204          UMULL    r11,r2,r0,r4
00032c  fb012104          MLA      r1,r1,r4,r2
000330  fb001005          MLA      r0,r0,r5,r1
000334  221e              MOVS     r2,#0x1e
000336  9009              STR      r0,[sp,#0x24]
000338  4658              MOV      r0,r11
00033a  9909              LDR      r1,[sp,#0x24]
00033c  f7fffffe          BL       __aeabi_lasr
000340  9007              STR      r0,[sp,#0x1c]
;;;645    #endif
;;;646    
;;;647        regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
000342  9805              LDR      r0,[sp,#0x14]
000344  0e00              LSRS     r0,r0,#24
000346  f88d0008          STRB     r0,[sp,#8]
;;;648        regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
00034a  9805              LDR      r0,[sp,#0x14]
00034c  0c00              LSRS     r0,r0,#16
00034e  f88d0009          STRB     r0,[sp,#9]
;;;649        regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
000352  9805              LDR      r0,[sp,#0x14]
000354  0a00              LSRS     r0,r0,#8
000356  f88d000a          STRB     r0,[sp,#0xa]
;;;650        regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
00035a  9805              LDR      r0,[sp,#0x14]
00035c  b2c0              UXTB     r0,r0
00035e  f88d000b          STRB     r0,[sp,#0xb]
;;;651        regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
000362  9806              LDR      r0,[sp,#0x18]
000364  0e00              LSRS     r0,r0,#24
000366  f88d000c          STRB     r0,[sp,#0xc]
;;;652        regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
00036a  9806              LDR      r0,[sp,#0x18]
00036c  0c00              LSRS     r0,r0,#16
00036e  f88d000d          STRB     r0,[sp,#0xd]
;;;653        regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
000372  9806              LDR      r0,[sp,#0x18]
000374  0a00              LSRS     r0,r0,#8
000376  f88d000e          STRB     r0,[sp,#0xe]
;;;654        regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
00037a  9806              LDR      r0,[sp,#0x18]
00037c  b2c0              UXTB     r0,r0
00037e  f88d000f          STRB     r0,[sp,#0xf]
;;;655        regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
000382  9807              LDR      r0,[sp,#0x1c]
000384  0e00              LSRS     r0,r0,#24
000386  f88d0010          STRB     r0,[sp,#0x10]
;;;656        regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
00038a  9807              LDR      r0,[sp,#0x1c]
00038c  0c00              LSRS     r0,r0,#16
00038e  f88d0011          STRB     r0,[sp,#0x11]
;;;657        regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
000392  9807              LDR      r0,[sp,#0x1c]
000394  0a00              LSRS     r0,r0,#8
000396  f88d0012          STRB     r0,[sp,#0x12]
;;;658        regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
00039a  9807              LDR      r0,[sp,#0x1c]
00039c  b2c0              UXTB     r0,r0
00039e  f88d0013          STRB     r0,[sp,#0x13]
;;;659        return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
0003a2  aa02              ADD      r2,sp,#8
0003a4  210c              MOVS     r1,#0xc
0003a6  f44f7025          MOV      r0,#0x294
0003aa  f7fffffe          BL       mpu_write_mem
;;;660    }
0003ae  b00b              ADD      sp,sp,#0x2c
0003b0  e8bd8ff0          POP      {r4-r11,pc}
;;;661    
                          ENDP

                  dmp_set_fifo_rate PROC
;;;667     */
;;;668    int dmp_set_fifo_rate(unsigned short rate)
0003b4  b530              PUSH     {r4,r5,lr}
;;;669    {
0003b6  b085              SUB      sp,sp,#0x14
0003b8  4604              MOV      r4,r0
;;;670        const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
0003ba  a216              ADR      r2,|L1.1044|
0003bc  ca07              LDM      r2,{r0-r2}
0003be  ab02              ADD      r3,sp,#8
0003c0  c307              STM      r3!,{r0-r2}
;;;671            0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
;;;672        unsigned short div;
;;;673        unsigned char tmp[8];
;;;674    
;;;675        if (rate > DMP_SAMPLE_RATE)
0003c2  2cc8              CMP      r4,#0xc8
0003c4  dd03              BLE      |L1.974|
;;;676            return -1;
0003c6  f04f30ff          MOV      r0,#0xffffffff
                  |L1.970|
;;;677        div = DMP_SAMPLE_RATE / rate - 1;
;;;678        tmp[0] = (unsigned char)((div >> 8) & 0xFF);
;;;679        tmp[1] = (unsigned char)(div & 0xFF);
;;;680        if (mpu_write_mem(D_0_22, 2, tmp))
;;;681            return -1;
;;;682        if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
;;;683            return -1;
;;;684    
;;;685        dmp.fifo_rate = rate;
;;;686        return 0;
;;;687    }
0003ca  b005              ADD      sp,sp,#0x14
0003cc  bd30              POP      {r4,r5,pc}
                  |L1.974|
0003ce  20c8              MOVS     r0,#0xc8              ;677
0003d0  fb90f0f4          SDIV     r0,r0,r4              ;677
0003d4  1e40              SUBS     r0,r0,#1              ;677
0003d6  b285              UXTH     r5,r0                 ;677
0003d8  0a28              LSRS     r0,r5,#8              ;678
0003da  f88d0000          STRB     r0,[sp,#0]            ;678
0003de  b2e8              UXTB     r0,r5                 ;679
0003e0  f88d0001          STRB     r0,[sp,#1]            ;679
0003e4  466a              MOV      r2,sp                 ;680
0003e6  2102              MOVS     r1,#2                 ;680
0003e8  f2402016          MOV      r0,#0x216             ;680
0003ec  f7fffffe          BL       mpu_write_mem
0003f0  b1b0              CBZ      r0,|L1.1056|
0003f2  f04f30ff          MOV      r0,#0xffffffff        ;681
0003f6  e7e8              B        |L1.970|
                  |L1.1016|
                          DCD      dmp_memory
                  |L1.1020|
0003fc  4ccd6c00          DCB      "L",205,"l",0
                  |L1.1024|
000400  0cc92c00          DCB      "\f",201,",",0
                  |L1.1028|
000404  36567600          DCB      "6Vv",0
                  |L1.1032|
000408  26466600          DCB      "&Ff",0
                  |L1.1036|
                          DCD      ||dmp||
                  |L1.1040|
                          DCD      0x02cae309
                  |L1.1044|
000414  fef2abc4          DCB      254,242,171,196,170,241,223,223,187,175,223,223
000418  aaf1dfdf
00041c  bbafdfdf
                  |L1.1056|
000420  aa02              ADD      r2,sp,#8              ;682
000422  210c              MOVS     r1,#0xc               ;682
000424  f64020c1          MOV      r0,#0xac1             ;682
000428  f7fffffe          BL       mpu_write_mem
00042c  b110              CBZ      r0,|L1.1076|
00042e  f04f30ff          MOV      r0,#0xffffffff        ;683
000432  e7ca              B        |L1.970|
                  |L1.1076|
000434  48fe              LDR      r0,|L1.2096|
000436  8184              STRH     r4,[r0,#0xc]          ;685
000438  2000              MOVS     r0,#0                 ;686
00043a  e7c6              B        |L1.970|
;;;688    
                          ENDP

                  dmp_get_fifo_rate PROC
;;;693     */
;;;694    int dmp_get_fifo_rate(unsigned short *rate)
00043c  4601              MOV      r1,r0
;;;695    {
;;;696        rate[0] = dmp.fifo_rate;
00043e  48fc              LDR      r0,|L1.2096|
000440  8980              LDRH     r0,[r0,#0xc]  ; dmp
000442  8008              STRH     r0,[r1,#0]
;;;697        return 0;
000444  2000              MOVS     r0,#0
;;;698    }
000446  4770              BX       lr
;;;699    
                          ENDP

                  dmp_set_tap_thresh PROC
;;;705     */
;;;706    int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
000448  e92d47fc          PUSH     {r2-r10,lr}
;;;707    {
00044c  4606              MOV      r6,r0
00044e  460f              MOV      r7,r1
;;;708        unsigned char tmp[4], accel_fsr;
;;;709        float scaled_thresh;
;;;710        unsigned short dmp_thresh, dmp_thresh_2;
;;;711        if (!(axis & TAP_XYZ) || thresh > 1600)
000450  f0160f07          TST      r6,#7
000454  d002              BEQ      |L1.1116|
000456  f5b76fc8          CMP      r7,#0x640
00045a  dd03              BLE      |L1.1124|
                  |L1.1116|
;;;712            return -1;
00045c  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1120|
;;;713    
;;;714        scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
;;;715    
;;;716        mpu_get_accel_fsr(&accel_fsr);
;;;717        switch (accel_fsr) {
;;;718        case 2:
;;;719            dmp_thresh = (unsigned short)(scaled_thresh * 16384);
;;;720            /* dmp_thresh * 0.75 */
;;;721            dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
;;;722            break;
;;;723        case 4:
;;;724            dmp_thresh = (unsigned short)(scaled_thresh * 8192);
;;;725            /* dmp_thresh * 0.75 */
;;;726            dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
;;;727            break;
;;;728        case 8:
;;;729            dmp_thresh = (unsigned short)(scaled_thresh * 4096);
;;;730            /* dmp_thresh * 0.75 */
;;;731            dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
;;;732            break;
;;;733        case 16:
;;;734            dmp_thresh = (unsigned short)(scaled_thresh * 2048);
;;;735            /* dmp_thresh * 0.75 */
;;;736            dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
;;;737            break;
;;;738        default:
;;;739            return -1;
;;;740        }
;;;741        tmp[0] = (unsigned char)(dmp_thresh >> 8);
;;;742        tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
;;;743        tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
;;;744        tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
;;;745    
;;;746        if (axis & TAP_X) {
;;;747            if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
;;;748                return -1;
;;;749            if (mpu_write_mem(D_1_36, 2, tmp+2))
;;;750                return -1;
;;;751        }
;;;752        if (axis & TAP_Y) {
;;;753            if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
;;;754                return -1;
;;;755            if (mpu_write_mem(D_1_40, 2, tmp+2))
;;;756                return -1;
;;;757        }
;;;758        if (axis & TAP_Z) {
;;;759            if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
;;;760                return -1;
;;;761            if (mpu_write_mem(D_1_44, 2, tmp+2))
;;;762                return -1;
;;;763        }
;;;764        return 0;
;;;765    }
000460  e8bd87fc          POP      {r2-r10,pc}
                  |L1.1124|
000464  4638              MOV      r0,r7                 ;714
000466  f7fffffe          BL       __aeabi_ui2f
00046a  4681              MOV      r9,r0                 ;714
00046c  49f1              LDR      r1,|L1.2100|
00046e  f7fffffe          BL       __aeabi_fdiv
000472  4680              MOV      r8,r0                 ;714
000474  4668              MOV      r0,sp                 ;716
000476  f7fffffe          BL       mpu_get_accel_fsr
00047a  f89d0000          LDRB     r0,[sp,#0]            ;717
00047e  2802              CMP      r0,#2                 ;717
000480  d006              BEQ      |L1.1168|
000482  2804              CMP      r0,#4                 ;717
000484  d016              BEQ      |L1.1204|
000486  2808              CMP      r0,#8                 ;717
000488  d026              BEQ      |L1.1240|
00048a  2810              CMP      r0,#0x10              ;717
00048c  d148              BNE      |L1.1312|
00048e  e035              B        |L1.1276|
                  |L1.1168|
000490  f04f418d          MOV      r1,#0x46800000        ;719
000494  4640              MOV      r0,r8                 ;719
000496  f7fffffe          BL       __aeabi_fmul
00049a  4681              MOV      r9,r0                 ;719
00049c  f7fffffe          BL       __aeabi_f2uiz
0004a0  b284              UXTH     r4,r0                 ;719
0004a2  49e5              LDR      r1,|L1.2104|
0004a4  4640              MOV      r0,r8                 ;721
0004a6  f7fffffe          BL       __aeabi_fmul
0004aa  4681              MOV      r9,r0                 ;721
0004ac  f7fffffe          BL       __aeabi_f2uiz
0004b0  b285              UXTH     r5,r0                 ;721
0004b2  e038              B        |L1.1318|
                  |L1.1204|
0004b4  f04f418c          MOV      r1,#0x46000000        ;724
0004b8  4640              MOV      r0,r8                 ;724
0004ba  f7fffffe          BL       __aeabi_fmul
0004be  4681              MOV      r9,r0                 ;724
0004c0  f7fffffe          BL       __aeabi_f2uiz
0004c4  b284              UXTH     r4,r0                 ;724
0004c6  49dd              LDR      r1,|L1.2108|
0004c8  4640              MOV      r0,r8                 ;726
0004ca  f7fffffe          BL       __aeabi_fmul
0004ce  4681              MOV      r9,r0                 ;726
0004d0  f7fffffe          BL       __aeabi_f2uiz
0004d4  b285              UXTH     r5,r0                 ;726
0004d6  e026              B        |L1.1318|
                  |L1.1240|
0004d8  f04f418b          MOV      r1,#0x45800000        ;729
0004dc  4640              MOV      r0,r8                 ;729
0004de  f7fffffe          BL       __aeabi_fmul
0004e2  4681              MOV      r9,r0                 ;729
0004e4  f7fffffe          BL       __aeabi_f2uiz
0004e8  b284              UXTH     r4,r0                 ;729
0004ea  49d5              LDR      r1,|L1.2112|
0004ec  4640              MOV      r0,r8                 ;731
0004ee  f7fffffe          BL       __aeabi_fmul
0004f2  4681              MOV      r9,r0                 ;731
0004f4  f7fffffe          BL       __aeabi_f2uiz
0004f8  b285              UXTH     r5,r0                 ;731
0004fa  e014              B        |L1.1318|
                  |L1.1276|
0004fc  f04f418a          MOV      r1,#0x45000000        ;734
000500  4640              MOV      r0,r8                 ;734
000502  f7fffffe          BL       __aeabi_fmul
000506  4681              MOV      r9,r0                 ;734
000508  f7fffffe          BL       __aeabi_f2uiz
00050c  b284              UXTH     r4,r0                 ;734
00050e  49cd              LDR      r1,|L1.2116|
000510  4640              MOV      r0,r8                 ;736
000512  f7fffffe          BL       __aeabi_fmul
000516  4681              MOV      r9,r0                 ;736
000518  f7fffffe          BL       __aeabi_f2uiz
00051c  b285              UXTH     r5,r0                 ;736
00051e  e002              B        |L1.1318|
                  |L1.1312|
000520  f04f30ff          MOV      r0,#0xffffffff        ;739
000524  e79c              B        |L1.1120|
                  |L1.1318|
000526  bf00              NOP                            ;722
000528  1220              ASRS     r0,r4,#8              ;741
00052a  f88d0004          STRB     r0,[sp,#4]            ;741
00052e  b2e0              UXTB     r0,r4                 ;742
000530  f88d0005          STRB     r0,[sp,#5]            ;742
000534  1228              ASRS     r0,r5,#8              ;743
000536  f88d0006          STRB     r0,[sp,#6]            ;743
00053a  b2e8              UXTB     r0,r5                 ;744
00053c  f88d0007          STRB     r0,[sp,#7]            ;744
000540  f0160f01          TST      r6,#1                 ;746
000544  d014              BEQ      |L1.1392|
000546  aa01              ADD      r2,sp,#4              ;747
000548  2102              MOVS     r1,#2                 ;747
00054a  f44f70ea          MOV      r0,#0x1d4             ;747
00054e  f7fffffe          BL       mpu_write_mem
000552  b110              CBZ      r0,|L1.1370|
000554  f04f30ff          MOV      r0,#0xffffffff        ;748
000558  e782              B        |L1.1120|
                  |L1.1370|
00055a  f10d0206          ADD      r2,sp,#6              ;749
00055e  2102              MOVS     r1,#2                 ;749
000560  f44f7092          MOV      r0,#0x124             ;749
000564  f7fffffe          BL       mpu_write_mem
000568  b110              CBZ      r0,|L1.1392|
00056a  f04f30ff          MOV      r0,#0xffffffff        ;750
00056e  e777              B        |L1.1120|
                  |L1.1392|
000570  f0160f02          TST      r6,#2                 ;752
000574  d014              BEQ      |L1.1440|
000576  aa01              ADD      r2,sp,#4              ;753
000578  2102              MOVS     r1,#2                 ;753
00057a  f44f70ec          MOV      r0,#0x1d8             ;753
00057e  f7fffffe          BL       mpu_write_mem
000582  b110              CBZ      r0,|L1.1418|
000584  f04f30ff          MOV      r0,#0xffffffff        ;754
000588  e76a              B        |L1.1120|
                  |L1.1418|
00058a  f10d0206          ADD      r2,sp,#6              ;755
00058e  2102              MOVS     r1,#2                 ;755
000590  f44f7094          MOV      r0,#0x128             ;755
000594  f7fffffe          BL       mpu_write_mem
000598  b110              CBZ      r0,|L1.1440|
00059a  f04f30ff          MOV      r0,#0xffffffff        ;756
00059e  e75f              B        |L1.1120|
                  |L1.1440|
0005a0  f0160f04          TST      r6,#4                 ;758
0005a4  d014              BEQ      |L1.1488|
0005a6  aa01              ADD      r2,sp,#4              ;759
0005a8  2102              MOVS     r1,#2                 ;759
0005aa  f44f70ee          MOV      r0,#0x1dc             ;759
0005ae  f7fffffe          BL       mpu_write_mem
0005b2  b110              CBZ      r0,|L1.1466|
0005b4  f04f30ff          MOV      r0,#0xffffffff        ;760
0005b8  e752              B        |L1.1120|
                  |L1.1466|
0005ba  f10d0206          ADD      r2,sp,#6              ;761
0005be  2102              MOVS     r1,#2                 ;761
0005c0  f44f7096          MOV      r0,#0x12c             ;761
0005c4  f7fffffe          BL       mpu_write_mem
0005c8  b110              CBZ      r0,|L1.1488|
0005ca  f04f30ff          MOV      r0,#0xffffffff        ;762
0005ce  e747              B        |L1.1120|
                  |L1.1488|
0005d0  2000              MOVS     r0,#0                 ;764
0005d2  e745              B        |L1.1120|
;;;766    
                          ENDP

                  dmp_set_tap_axes PROC
;;;771     */
;;;772    int dmp_set_tap_axes(unsigned char axis)
0005d4  b538              PUSH     {r3-r5,lr}
;;;773    {
0005d6  4604              MOV      r4,r0
;;;774        unsigned char tmp = 0;
0005d8  2000              MOVS     r0,#0
0005da  9000              STR      r0,[sp,#0]
;;;775    
;;;776        if (axis & TAP_X)
0005dc  f0140f01          TST      r4,#1
0005e0  d004              BEQ      |L1.1516|
;;;777            tmp |= 0x30;
0005e2  f89d0000          LDRB     r0,[sp,#0]
0005e6  f0400030          ORR      r0,r0,#0x30
0005ea  9000              STR      r0,[sp,#0]
                  |L1.1516|
;;;778        if (axis & TAP_Y)
0005ec  f0140f02          TST      r4,#2
0005f0  d004              BEQ      |L1.1532|
;;;779            tmp |= 0x0C;
0005f2  f89d0000          LDRB     r0,[sp,#0]
0005f6  f040000c          ORR      r0,r0,#0xc
0005fa  9000              STR      r0,[sp,#0]
                  |L1.1532|
;;;780        if (axis & TAP_Z)
0005fc  f0140f04          TST      r4,#4
000600  d004              BEQ      |L1.1548|
;;;781            tmp |= 0x03;
000602  f89d0000          LDRB     r0,[sp,#0]
000606  f0400003          ORR      r0,r0,#3
00060a  9000              STR      r0,[sp,#0]
                  |L1.1548|
;;;782        return mpu_write_mem(D_1_72, 1, &tmp);
00060c  466a              MOV      r2,sp
00060e  2101              MOVS     r1,#1
000610  f44f70a4          MOV      r0,#0x148
000614  f7fffffe          BL       mpu_write_mem
;;;783    }
000618  bd38              POP      {r3-r5,pc}
;;;784    
                          ENDP

                  dmp_set_tap_count PROC
;;;789     */
;;;790    int dmp_set_tap_count(unsigned char min_taps)
00061a  b538              PUSH     {r3-r5,lr}
;;;791    {
00061c  4604              MOV      r4,r0
;;;792        unsigned char tmp;
;;;793    
;;;794        if (min_taps < 1)
00061e  2c01              CMP      r4,#1
000620  da01              BGE      |L1.1574|
;;;795            min_taps = 1;
000622  2401              MOVS     r4,#1
000624  e002              B        |L1.1580|
                  |L1.1574|
;;;796        else if (min_taps > 4)
000626  2c04              CMP      r4,#4
000628  dd00              BLE      |L1.1580|
;;;797            min_taps = 4;
00062a  2404              MOVS     r4,#4
                  |L1.1580|
;;;798    
;;;799        tmp = min_taps - 1;
00062c  1e60              SUBS     r0,r4,#1
00062e  b2c0              UXTB     r0,r0
000630  9000              STR      r0,[sp,#0]
;;;800        return mpu_write_mem(D_1_79, 1, &tmp);
000632  466a              MOV      r2,sp
000634  2101              MOVS     r1,#1
000636  f240104f          MOV      r0,#0x14f
00063a  f7fffffe          BL       mpu_write_mem
;;;801    }
00063e  bd38              POP      {r3-r5,pc}
;;;802    
                          ENDP

                  dmp_set_tap_time PROC
;;;807     */
;;;808    int dmp_set_tap_time(unsigned short time)
000640  b538              PUSH     {r3-r5,lr}
;;;809    {
000642  4604              MOV      r4,r0
;;;810        unsigned short dmp_time;
;;;811        unsigned char tmp[2];
;;;812    
;;;813        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
000644  2005              MOVS     r0,#5
000646  fb94f0f0          SDIV     r0,r4,r0
00064a  b285              UXTH     r5,r0
;;;814        tmp[0] = (unsigned char)(dmp_time >> 8);
00064c  1228              ASRS     r0,r5,#8
00064e  f88d0000          STRB     r0,[sp,#0]
;;;815        tmp[1] = (unsigned char)(dmp_time & 0xFF);
000652  b2e8              UXTB     r0,r5
000654  f88d0001          STRB     r0,[sp,#1]
;;;816        return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
000658  466a              MOV      r2,sp
00065a  2102              MOVS     r1,#2
00065c  f44f70ef          MOV      r0,#0x1de
000660  f7fffffe          BL       mpu_write_mem
;;;817    }
000664  bd38              POP      {r3-r5,pc}
;;;818    
                          ENDP

                  dmp_set_tap_time_multi PROC
;;;823     */
;;;824    int dmp_set_tap_time_multi(unsigned short time)
000666  b538              PUSH     {r3-r5,lr}
;;;825    {
000668  4604              MOV      r4,r0
;;;826        unsigned short dmp_time;
;;;827        unsigned char tmp[2];
;;;828    
;;;829        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
00066a  2005              MOVS     r0,#5
00066c  fb94f0f0          SDIV     r0,r4,r0
000670  b285              UXTH     r5,r0
;;;830        tmp[0] = (unsigned char)(dmp_time >> 8);
000672  1228              ASRS     r0,r5,#8
000674  f88d0000          STRB     r0,[sp,#0]
;;;831        tmp[1] = (unsigned char)(dmp_time & 0xFF);
000678  b2e8              UXTB     r0,r5
00067a  f88d0001          STRB     r0,[sp,#1]
;;;832        return mpu_write_mem(D_1_218, 2, tmp);
00067e  466a              MOV      r2,sp
000680  2102              MOVS     r1,#2
000682  f44f70ed          MOV      r0,#0x1da
000686  f7fffffe          BL       mpu_write_mem
;;;833    }
00068a  bd38              POP      {r3-r5,pc}
;;;834    
                          ENDP

                  dmp_set_shake_reject_thresh PROC
;;;841     */
;;;842    int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
00068c  b5f8              PUSH     {r3-r7,lr}
;;;843    {
00068e  4605              MOV      r5,r0
000690  460e              MOV      r6,r1
;;;844        unsigned char tmp[4];
;;;845        long thresh_scaled = sf / 1000 * thresh;
000692  f44f707a          MOV      r0,#0x3e8
000696  fb95f0f0          SDIV     r0,r5,r0
00069a  fb00f406          MUL      r4,r0,r6
;;;846        tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
00069e  0e20              LSRS     r0,r4,#24
0006a0  f88d0000          STRB     r0,[sp,#0]
;;;847        tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
0006a4  0c20              LSRS     r0,r4,#16
0006a6  f88d0001          STRB     r0,[sp,#1]
;;;848        tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
0006aa  0a20              LSRS     r0,r4,#8
0006ac  f88d0002          STRB     r0,[sp,#2]
;;;849        tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
0006b0  b2e0              UXTB     r0,r4
0006b2  f88d0003          STRB     r0,[sp,#3]
;;;850        return mpu_write_mem(D_1_92, 4, tmp);
0006b6  466a              MOV      r2,sp
0006b8  2104              MOVS     r1,#4
0006ba  f44f70ae          MOV      r0,#0x15c
0006be  f7fffffe          BL       mpu_write_mem
;;;851    }
0006c2  bdf8              POP      {r3-r7,pc}
;;;852    
                          ENDP

                  dmp_set_shake_reject_time PROC
;;;860     */
;;;861    int dmp_set_shake_reject_time(unsigned short time)
0006c4  b538              PUSH     {r3-r5,lr}
;;;862    {
0006c6  4604              MOV      r4,r0
;;;863        unsigned char tmp[2];
;;;864    
;;;865        time /= (1000 / DMP_SAMPLE_RATE);
0006c8  2005              MOVS     r0,#5
0006ca  fb94f0f0          SDIV     r0,r4,r0
0006ce  b284              UXTH     r4,r0
;;;866        tmp[0] = time >> 8;
0006d0  1220              ASRS     r0,r4,#8
0006d2  f88d0000          STRB     r0,[sp,#0]
;;;867        tmp[1] = time & 0xFF;
0006d6  b2e0              UXTB     r0,r4
0006d8  f88d0001          STRB     r0,[sp,#1]
;;;868        return mpu_write_mem(D_1_90,2,tmp);
0006dc  466a              MOV      r2,sp
0006de  2102              MOVS     r1,#2
0006e0  f44f70ad          MOV      r0,#0x15a
0006e4  f7fffffe          BL       mpu_write_mem
;;;869    }
0006e8  bd38              POP      {r3-r5,pc}
;;;870    
                          ENDP

                  dmp_set_shake_reject_timeout PROC
;;;878     */
;;;879    int dmp_set_shake_reject_timeout(unsigned short time)
0006ea  b538              PUSH     {r3-r5,lr}
;;;880    {
0006ec  4604              MOV      r4,r0
;;;881        unsigned char tmp[2];
;;;882    
;;;883        time /= (1000 / DMP_SAMPLE_RATE);
0006ee  2005              MOVS     r0,#5
0006f0  fb94f0f0          SDIV     r0,r4,r0
0006f4  b284              UXTH     r4,r0
;;;884        tmp[0] = time >> 8;
0006f6  1220              ASRS     r0,r4,#8
0006f8  f88d0000          STRB     r0,[sp,#0]
;;;885        tmp[1] = time & 0xFF;
0006fc  b2e0              UXTB     r0,r4
0006fe  f88d0001          STRB     r0,[sp,#1]
;;;886        return mpu_write_mem(D_1_88,2,tmp);
000702  466a              MOV      r2,sp
000704  2102              MOVS     r1,#2
000706  f44f70ac          MOV      r0,#0x158
00070a  f7fffffe          BL       mpu_write_mem
;;;887    }
00070e  bd38              POP      {r3-r5,pc}
;;;888    
                          ENDP

                  dmp_get_pedometer_step_count PROC
;;;893     */
;;;894    int dmp_get_pedometer_step_count(unsigned long *count)
000710  b538              PUSH     {r3-r5,lr}
;;;895    {
000712  4604              MOV      r4,r0
;;;896        unsigned char tmp[4];
;;;897        if (!count)
000714  b914              CBNZ     r4,|L1.1820|
;;;898            return -1;
000716  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1818|
;;;899    
;;;900        if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
;;;901            return -1;
;;;902    
;;;903        count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;904            ((unsigned long)tmp[2] << 8) | tmp[3];
;;;905        return 0;
;;;906    }
00071a  bd38              POP      {r3-r5,pc}
                  |L1.1820|
00071c  466a              MOV      r2,sp                 ;900
00071e  2104              MOVS     r1,#4                 ;900
000720  f44f7058          MOV      r0,#0x360             ;900
000724  f7fffffe          BL       mpu_read_mem
000728  b110              CBZ      r0,|L1.1840|
00072a  f04f30ff          MOV      r0,#0xffffffff        ;901
00072e  e7f4              B        |L1.1818|
                  |L1.1840|
000730  f89d0000          LDRB     r0,[sp,#0]            ;903
000734  0600              LSLS     r0,r0,#24             ;903
000736  f89d1001          LDRB     r1,[sp,#1]            ;903
00073a  ea404001          ORR      r0,r0,r1,LSL #16      ;903
00073e  f89d1002          LDRB     r1,[sp,#2]            ;903
000742  ea402001          ORR      r0,r0,r1,LSL #8       ;903
000746  f89d1003          LDRB     r1,[sp,#3]            ;903
00074a  4308              ORRS     r0,r0,r1              ;903
00074c  6020              STR      r0,[r4,#0]            ;903
00074e  2000              MOVS     r0,#0                 ;905
000750  e7e3              B        |L1.1818|
;;;907    
                          ENDP

                  dmp_set_pedometer_step_count PROC
;;;914     */
;;;915    int dmp_set_pedometer_step_count(unsigned long count)
000752  b538              PUSH     {r3-r5,lr}
;;;916    {
000754  4604              MOV      r4,r0
;;;917        unsigned char tmp[4];
;;;918    
;;;919        tmp[0] = (unsigned char)((count >> 24) & 0xFF);
000756  0e20              LSRS     r0,r4,#24
000758  f88d0000          STRB     r0,[sp,#0]
;;;920        tmp[1] = (unsigned char)((count >> 16) & 0xFF);
00075c  0c20              LSRS     r0,r4,#16
00075e  f88d0001          STRB     r0,[sp,#1]
;;;921        tmp[2] = (unsigned char)((count >> 8) & 0xFF);
000762  0a20              LSRS     r0,r4,#8
000764  f88d0002          STRB     r0,[sp,#2]
;;;922        tmp[3] = (unsigned char)(count & 0xFF);
000768  b2e0              UXTB     r0,r4
00076a  f88d0003          STRB     r0,[sp,#3]
;;;923        return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
00076e  466a              MOV      r2,sp
000770  2104              MOVS     r1,#4
000772  f44f7058          MOV      r0,#0x360
000776  f7fffffe          BL       mpu_write_mem
;;;924    }
00077a  bd38              POP      {r3-r5,pc}
;;;925    
                          ENDP

                  dmp_get_pedometer_walk_time PROC
;;;930     */
;;;931    int dmp_get_pedometer_walk_time(unsigned long *time)
00077c  b538              PUSH     {r3-r5,lr}
;;;932    {
00077e  4604              MOV      r4,r0
;;;933        unsigned char tmp[4];
;;;934        if (!time)
000780  b914              CBNZ     r4,|L1.1928|
;;;935            return -1;
000782  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1926|
;;;936    
;;;937        if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
;;;938            return -1;
;;;939    
;;;940        time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;941            ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
;;;942        return 0;
;;;943    }
000786  bd38              POP      {r3-r5,pc}
                  |L1.1928|
000788  466a              MOV      r2,sp                 ;937
00078a  2104              MOVS     r1,#4                 ;937
00078c  f44f7071          MOV      r0,#0x3c4             ;937
000790  f7fffffe          BL       mpu_read_mem
000794  b110              CBZ      r0,|L1.1948|
000796  f04f30ff          MOV      r0,#0xffffffff        ;938
00079a  e7f4              B        |L1.1926|
                  |L1.1948|
00079c  f89d0000          LDRB     r0,[sp,#0]            ;940
0007a0  0600              LSLS     r0,r0,#24             ;940
0007a2  f89d1001          LDRB     r1,[sp,#1]            ;940
0007a6  ea404001          ORR      r0,r0,r1,LSL #16      ;940
0007aa  f89d1002          LDRB     r1,[sp,#2]            ;940
0007ae  ea402001          ORR      r0,r0,r1,LSL #8       ;940
0007b2  f89d1003          LDRB     r1,[sp,#3]            ;940
0007b6  4308              ORRS     r0,r0,r1              ;940
0007b8  eb000080          ADD      r0,r0,r0,LSL #2       ;940
0007bc  0080              LSLS     r0,r0,#2              ;940
0007be  6020              STR      r0,[r4,#0]            ;940
0007c0  2000              MOVS     r0,#0                 ;942
0007c2  e7e0              B        |L1.1926|
;;;944    
                          ENDP

                  dmp_set_pedometer_walk_time PROC
;;;950     */
;;;951    int dmp_set_pedometer_walk_time(unsigned long time)
0007c4  b538              PUSH     {r3-r5,lr}
;;;952    {
0007c6  4604              MOV      r4,r0
;;;953        unsigned char tmp[4];
;;;954    
;;;955        time /= 20;
0007c8  2014              MOVS     r0,#0x14
0007ca  fbb4f4f0          UDIV     r4,r4,r0
;;;956    
;;;957        tmp[0] = (unsigned char)((time >> 24) & 0xFF);
0007ce  0e20              LSRS     r0,r4,#24
0007d0  f88d0000          STRB     r0,[sp,#0]
;;;958        tmp[1] = (unsigned char)((time >> 16) & 0xFF);
0007d4  0c20              LSRS     r0,r4,#16
0007d6  f88d0001          STRB     r0,[sp,#1]
;;;959        tmp[2] = (unsigned char)((time >> 8) & 0xFF);
0007da  0a20              LSRS     r0,r4,#8
0007dc  f88d0002          STRB     r0,[sp,#2]
;;;960        tmp[3] = (unsigned char)(time & 0xFF);
0007e0  b2e0              UXTB     r0,r4
0007e2  f88d0003          STRB     r0,[sp,#3]
;;;961        return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
0007e6  466a              MOV      r2,sp
0007e8  2104              MOVS     r1,#4
0007ea  f44f7071          MOV      r0,#0x3c4
0007ee  f7fffffe          BL       mpu_write_mem
;;;962    }
0007f2  bd38              POP      {r3-r5,pc}
;;;963    
                          ENDP

                  dmp_enable_6x_lp_quat PROC
;;;1159    */
;;;1160   int dmp_enable_6x_lp_quat(unsigned char enable)
0007f4  b538              PUSH     {r3-r5,lr}
;;;1161   {
0007f6  4604              MOV      r4,r0
;;;1162       unsigned char regs[4];
;;;1163       if (enable) {
0007f8  b164              CBZ      r4,|L1.2068|
;;;1164           regs[0] = DINA20;
0007fa  2020              MOVS     r0,#0x20
0007fc  f88d0000          STRB     r0,[sp,#0]
;;;1165           regs[1] = DINA28;
000800  2028              MOVS     r0,#0x28
000802  f88d0001          STRB     r0,[sp,#1]
;;;1166           regs[2] = DINA30;
000806  2030              MOVS     r0,#0x30
000808  f88d0002          STRB     r0,[sp,#2]
;;;1167           regs[3] = DINA38;
00080c  2038              MOVS     r0,#0x38
00080e  f88d0003          STRB     r0,[sp,#3]
000812  e004              B        |L1.2078|
                  |L1.2068|
;;;1168       } else
;;;1169           memset(regs, 0xA3, 4);
000814  22a3              MOVS     r2,#0xa3
000816  2104              MOVS     r1,#4
000818  4668              MOV      r0,sp
00081a  f7fffffe          BL       __aeabi_memset
                  |L1.2078|
;;;1170   
;;;1171       mpu_write_mem(CFG_8, 4, regs);
00081e  466a              MOV      r2,sp
000820  2104              MOVS     r1,#4
000822  f640209e          MOV      r0,#0xa9e
000826  f7fffffe          BL       mpu_write_mem
;;;1172   
;;;1173       return mpu_reset_fifo();
00082a  f7fffffe          BL       mpu_reset_fifo
;;;1174   }
00082e  bd38              POP      {r3-r5,pc}
                  |L1.2096|
                          DCD      ||dmp||
                  |L1.2100|
                          DCD      0x43480000
                  |L1.2104|
                          DCD      0x46400000
                  |L1.2108|
                          DCD      0x45c00000
                  |L1.2112|
                          DCD      0x45400000
                  |L1.2116|
                          DCD      0x44c00000
                          ENDP

                  dmp_enable_lp_quat PROC
;;;1135    */
;;;1136   int dmp_enable_lp_quat(unsigned char enable)
000848  b538              PUSH     {r3-r5,lr}
;;;1137   {
00084a  4604              MOV      r4,r0
;;;1138       unsigned char regs[4];
;;;1139       if (enable) {
00084c  b164              CBZ      r4,|L1.2152|
;;;1140           regs[0] = DINBC0;
00084e  20c0              MOVS     r0,#0xc0
000850  f88d0000          STRB     r0,[sp,#0]
;;;1141           regs[1] = DINBC2;
000854  20c2              MOVS     r0,#0xc2
000856  f88d0001          STRB     r0,[sp,#1]
;;;1142           regs[2] = DINBC4;
00085a  20c4              MOVS     r0,#0xc4
00085c  f88d0002          STRB     r0,[sp,#2]
;;;1143           regs[3] = DINBC6;
000860  20c6              MOVS     r0,#0xc6
000862  f88d0003          STRB     r0,[sp,#3]
000866  e004              B        |L1.2162|
                  |L1.2152|
;;;1144       }
;;;1145       else
;;;1146           memset(regs, 0x8B, 4);
000868  228b              MOVS     r2,#0x8b
00086a  2104              MOVS     r1,#4
00086c  4668              MOV      r0,sp
00086e  f7fffffe          BL       __aeabi_memset
                  |L1.2162|
;;;1147   
;;;1148       mpu_write_mem(CFG_LP_QUAT, 4, regs);
000872  466a              MOV      r2,sp
000874  2104              MOVS     r1,#4
000876  f6402098          MOV      r0,#0xa98
00087a  f7fffffe          BL       mpu_write_mem
;;;1149   
;;;1150       return mpu_reset_fifo();
00087e  f7fffffe          BL       mpu_reset_fifo
;;;1151   }
000882  bd38              POP      {r3-r5,pc}
;;;1152   
                          ENDP

                  dmp_enable_gyro_cal PROC
;;;1117    */
;;;1118   int dmp_enable_gyro_cal(unsigned char enable)
000884  b53e              PUSH     {r1-r5,lr}
;;;1119   {
000886  4604              MOV      r4,r0
;;;1120       if (enable) {
000888  b16c              CBZ      r4,|L1.2214|
;;;1121           unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
00088a  a1fc              ADR      r1,|L1.3196|
00088c  e9d12000          LDRD     r2,r0,[r1,#0]
000890  6889              LDR      r1,[r1,#8]
000892  e9cd2000          STRD     r2,r0,[sp,#0]
000896  9102              STR      r1,[sp,#8]
;;;1122           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
000898  466a              MOV      r2,sp
00089a  2109              MOVS     r1,#9
00089c  f44f6097          MOV      r0,#0x4b8
0008a0  f7fffffe          BL       mpu_write_mem
                  |L1.2212|
;;;1123       } else {
;;;1124           unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
;;;1125           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
;;;1126       }
;;;1127   }
0008a4  bd3e              POP      {r1-r5,pc}
                  |L1.2214|
0008a6  a2f8              ADR      r2,|L1.3208|
0008a8  e9d21000          LDRD     r1,r0,[r2,#0]         ;1124
0008ac  6892              LDR      r2,[r2,#8]            ;1124
0008ae  e9cd0201          STRD     r0,r2,[sp,#4]         ;1124
0008b2  9100              STR      r1,[sp,#0]            ;1124
0008b4  466a              MOV      r2,sp                 ;1125
0008b6  2109              MOVS     r1,#9                 ;1125
0008b8  f44f6097          MOV      r0,#0x4b8             ;1125
0008bc  f7fffffe          BL       mpu_write_mem
0008c0  e7f0              B        |L1.2212|
;;;1128   
                          ENDP

                  dmp_enable_feature PROC
;;;980     */
;;;981    int dmp_enable_feature(unsigned short mask)
0008c2  b53e              PUSH     {r1-r5,lr}
;;;982    {
0008c4  4604              MOV      r4,r0
;;;983        unsigned char tmp[10];
;;;984    
;;;985        /* TODO: All of these settings can probably be integrated into the default
;;;986         * DMP image.
;;;987         */
;;;988        /* Set integration scale factor. */
;;;989        tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
0008c6  2002              MOVS     r0,#2
0008c8  f88d0000          STRB     r0,[sp,#0]
;;;990        tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
0008cc  20ca              MOVS     r0,#0xca
0008ce  f88d0001          STRB     r0,[sp,#1]
;;;991        tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
0008d2  20e3              MOVS     r0,#0xe3
0008d4  f88d0002          STRB     r0,[sp,#2]
;;;992        tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
0008d8  2009              MOVS     r0,#9
0008da  f88d0003          STRB     r0,[sp,#3]
;;;993        mpu_write_mem(D_0_104, 4, tmp);
0008de  466a              MOV      r2,sp
0008e0  2104              MOVS     r1,#4
0008e2  2068              MOVS     r0,#0x68
0008e4  f7fffffe          BL       mpu_write_mem
;;;994    
;;;995        /* Send sensor data to the FIFO. */
;;;996        tmp[0] = 0xA3;
0008e8  20a3              MOVS     r0,#0xa3
0008ea  f88d0000          STRB     r0,[sp,#0]
;;;997        if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
0008ee  f0140f40          TST      r4,#0x40
0008f2  d009              BEQ      |L1.2312|
;;;998            tmp[1] = 0xC0;
0008f4  20c0              MOVS     r0,#0xc0
0008f6  f88d0001          STRB     r0,[sp,#1]
;;;999            tmp[2] = 0xC8;
0008fa  20c8              MOVS     r0,#0xc8
0008fc  f88d0002          STRB     r0,[sp,#2]
;;;1000           tmp[3] = 0xC2;
000900  20c2              MOVS     r0,#0xc2
000902  f88d0003          STRB     r0,[sp,#3]
000906  e006              B        |L1.2326|
                  |L1.2312|
;;;1001       } else {
;;;1002           tmp[1] = 0xA3;
000908  20a3              MOVS     r0,#0xa3
00090a  f88d0001          STRB     r0,[sp,#1]
;;;1003           tmp[2] = 0xA3;
00090e  f88d0002          STRB     r0,[sp,#2]
;;;1004           tmp[3] = 0xA3;
000912  f88d0003          STRB     r0,[sp,#3]
                  |L1.2326|
;;;1005       }
;;;1006       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
000916  f4147fc0          TST      r4,#0x180
00091a  d009              BEQ      |L1.2352|
;;;1007           tmp[4] = 0xC4;
00091c  20c4              MOVS     r0,#0xc4
00091e  f88d0004          STRB     r0,[sp,#4]
;;;1008           tmp[5] = 0xCC;
000922  20cc              MOVS     r0,#0xcc
000924  f88d0005          STRB     r0,[sp,#5]
;;;1009           tmp[6] = 0xC6;
000928  20c6              MOVS     r0,#0xc6
00092a  f88d0006          STRB     r0,[sp,#6]
00092e  e006              B        |L1.2366|
                  |L1.2352|
;;;1010       } else {
;;;1011           tmp[4] = 0xA3;
000930  20a3              MOVS     r0,#0xa3
000932  f88d0004          STRB     r0,[sp,#4]
;;;1012           tmp[5] = 0xA3;
000936  f88d0005          STRB     r0,[sp,#5]
;;;1013           tmp[6] = 0xA3;
00093a  f88d0006          STRB     r0,[sp,#6]
                  |L1.2366|
;;;1014       }
;;;1015       tmp[7] = 0xA3;
00093e  20a3              MOVS     r0,#0xa3
000940  f88d0007          STRB     r0,[sp,#7]
;;;1016       tmp[8] = 0xA3;
000944  f88d0008          STRB     r0,[sp,#8]
;;;1017       tmp[9] = 0xA3;
000948  f88d0009          STRB     r0,[sp,#9]
;;;1018       mpu_write_mem(CFG_15,10,tmp);
00094c  466a              MOV      r2,sp
00094e  210a              MOVS     r1,#0xa
000950  f64020a7          MOV      r0,#0xaa7
000954  f7fffffe          BL       mpu_write_mem
;;;1019   
;;;1020       /* Send gesture data to the FIFO. */
;;;1021       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
000958  f0140f03          TST      r4,#3
00095c  d003              BEQ      |L1.2406|
;;;1022           tmp[0] = DINA20;
00095e  2020              MOVS     r0,#0x20
000960  f88d0000          STRB     r0,[sp,#0]
000964  e002              B        |L1.2412|
                  |L1.2406|
;;;1023       else
;;;1024           tmp[0] = 0xD8;
000966  20d8              MOVS     r0,#0xd8
000968  f88d0000          STRB     r0,[sp,#0]
                  |L1.2412|
;;;1025       mpu_write_mem(CFG_27,1,tmp);
00096c  466a              MOV      r2,sp
00096e  2101              MOVS     r1,#1
000970  f64020b6          MOV      r0,#0xab6
000974  f7fffffe          BL       mpu_write_mem
;;;1026   
;;;1027       if (mask & DMP_FEATURE_GYRO_CAL)
000978  f0140f20          TST      r4,#0x20
00097c  d003              BEQ      |L1.2438|
;;;1028           dmp_enable_gyro_cal(1);
00097e  2001              MOVS     r0,#1
000980  f7fffffe          BL       dmp_enable_gyro_cal
000984  e002              B        |L1.2444|
                  |L1.2438|
;;;1029       else
;;;1030           dmp_enable_gyro_cal(0);
000986  2000              MOVS     r0,#0
000988  f7fffffe          BL       dmp_enable_gyro_cal
                  |L1.2444|
;;;1031   
;;;1032       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
00098c  f4147fc0          TST      r4,#0x180
000990  d021              BEQ      |L1.2518|
;;;1033           if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
000992  f4147f80          TST      r4,#0x100
000996  d00c              BEQ      |L1.2482|
;;;1034               tmp[0] = 0xB2;
000998  20b2              MOVS     r0,#0xb2
00099a  f88d0000          STRB     r0,[sp,#0]
;;;1035               tmp[1] = 0x8B;
00099e  208b              MOVS     r0,#0x8b
0009a0  f88d0001          STRB     r0,[sp,#1]
;;;1036               tmp[2] = 0xB6;
0009a4  20b6              MOVS     r0,#0xb6
0009a6  f88d0002          STRB     r0,[sp,#2]
;;;1037               tmp[3] = 0x9B;
0009aa  209b              MOVS     r0,#0x9b
0009ac  f88d0003          STRB     r0,[sp,#3]
0009b0  e00b              B        |L1.2506|
                  |L1.2482|
;;;1038           } else {
;;;1039               tmp[0] = DINAC0;
0009b2  20b0              MOVS     r0,#0xb0
0009b4  f88d0000          STRB     r0,[sp,#0]
;;;1040               tmp[1] = DINA80;
0009b8  2080              MOVS     r0,#0x80
0009ba  f88d0001          STRB     r0,[sp,#1]
;;;1041               tmp[2] = DINAC2;
0009be  20b4              MOVS     r0,#0xb4
0009c0  f88d0002          STRB     r0,[sp,#2]
;;;1042               tmp[3] = DINA90;
0009c4  2090              MOVS     r0,#0x90
0009c6  f88d0003          STRB     r0,[sp,#3]
                  |L1.2506|
;;;1043           }
;;;1044           mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
0009ca  466a              MOV      r2,sp
0009cc  2104              MOVS     r1,#4
0009ce  f64020a2          MOV      r0,#0xaa2
0009d2  f7fffffe          BL       mpu_write_mem
                  |L1.2518|
;;;1045       }
;;;1046   
;;;1047       if (mask & DMP_FEATURE_TAP) {
0009d6  f0140f01          TST      r4,#1
0009da  d024              BEQ      |L1.2598|
;;;1048           /* Enable tap. */
;;;1049           tmp[0] = 0xF8;
0009dc  20f8              MOVS     r0,#0xf8
0009de  f88d0000          STRB     r0,[sp,#0]
;;;1050           mpu_write_mem(CFG_20, 1, tmp);
0009e2  466a              MOV      r2,sp
0009e4  2101              MOVS     r1,#1
0009e6  f44f600b          MOV      r0,#0x8b0
0009ea  f7fffffe          BL       mpu_write_mem
;;;1051           dmp_set_tap_thresh(TAP_XYZ, 250);
0009ee  21fa              MOVS     r1,#0xfa
0009f0  2007              MOVS     r0,#7
0009f2  f7fffffe          BL       dmp_set_tap_thresh
;;;1052           dmp_set_tap_axes(TAP_XYZ);
0009f6  2007              MOVS     r0,#7
0009f8  f7fffffe          BL       dmp_set_tap_axes
;;;1053           dmp_set_tap_count(1);
0009fc  2001              MOVS     r0,#1
0009fe  f7fffffe          BL       dmp_set_tap_count
;;;1054           dmp_set_tap_time(100);
000a02  2064              MOVS     r0,#0x64
000a04  f7fffffe          BL       dmp_set_tap_time
;;;1055           dmp_set_tap_time_multi(500);
000a08  f44f70fa          MOV      r0,#0x1f4
000a0c  f7fffffe          BL       dmp_set_tap_time_multi
;;;1056   
;;;1057           dmp_set_shake_reject_thresh(GYRO_SF, 200);
000a10  21c8              MOVS     r1,#0xc8
000a12  48a0              LDR      r0,|L1.3220|
000a14  f7fffffe          BL       dmp_set_shake_reject_thresh
;;;1058           dmp_set_shake_reject_time(40);
000a18  2028              MOVS     r0,#0x28
000a1a  f7fffffe          BL       dmp_set_shake_reject_time
;;;1059           dmp_set_shake_reject_timeout(10);
000a1e  200a              MOVS     r0,#0xa
000a20  f7fffffe          BL       dmp_set_shake_reject_timeout
000a24  e008              B        |L1.2616|
                  |L1.2598|
;;;1060       } else {
;;;1061           tmp[0] = 0xD8;
000a26  20d8              MOVS     r0,#0xd8
000a28  f88d0000          STRB     r0,[sp,#0]
;;;1062           mpu_write_mem(CFG_20, 1, tmp);
000a2c  466a              MOV      r2,sp
000a2e  2101              MOVS     r1,#1
000a30  f44f600b          MOV      r0,#0x8b0
000a34  f7fffffe          BL       mpu_write_mem
                  |L1.2616|
;;;1063       }
;;;1064   
;;;1065       if (mask & DMP_FEATURE_ANDROID_ORIENT) {
000a38  f0140f02          TST      r4,#2
000a3c  d003              BEQ      |L1.2630|
;;;1066           tmp[0] = 0xD9;
000a3e  20d9              MOVS     r0,#0xd9
000a40  f88d0000          STRB     r0,[sp,#0]
000a44  e002              B        |L1.2636|
                  |L1.2630|
;;;1067       } else
;;;1068           tmp[0] = 0xD8;
000a46  20d8              MOVS     r0,#0xd8
000a48  f88d0000          STRB     r0,[sp,#0]
                  |L1.2636|
;;;1069       mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
000a4c  466a              MOV      r2,sp
000a4e  2101              MOVS     r1,#1
000a50  f240703d          MOV      r0,#0x73d
000a54  f7fffffe          BL       mpu_write_mem
;;;1070   
;;;1071       if (mask & DMP_FEATURE_LP_QUAT)
000a58  f0140f04          TST      r4,#4
000a5c  d003              BEQ      |L1.2662|
;;;1072           dmp_enable_lp_quat(1);
000a5e  2001              MOVS     r0,#1
000a60  f7fffffe          BL       dmp_enable_lp_quat
000a64  e002              B        |L1.2668|
                  |L1.2662|
;;;1073       else
;;;1074           dmp_enable_lp_quat(0);
000a66  2000              MOVS     r0,#0
000a68  f7fffffe          BL       dmp_enable_lp_quat
                  |L1.2668|
;;;1075   
;;;1076       if (mask & DMP_FEATURE_6X_LP_QUAT)
000a6c  f0140f10          TST      r4,#0x10
000a70  d003              BEQ      |L1.2682|
;;;1077           dmp_enable_6x_lp_quat(1);
000a72  2001              MOVS     r0,#1
000a74  f7fffffe          BL       dmp_enable_6x_lp_quat
000a78  e002              B        |L1.2688|
                  |L1.2682|
;;;1078       else
;;;1079           dmp_enable_6x_lp_quat(0);
000a7a  2000              MOVS     r0,#0
000a7c  f7fffffe          BL       dmp_enable_6x_lp_quat
                  |L1.2688|
;;;1080   
;;;1081       /* Pedometer is always enabled. */
;;;1082       dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
000a80  f0440008          ORR      r0,r4,#8
000a84  4984              LDR      r1,|L1.3224|
000a86  8148              STRH     r0,[r1,#0xa]
;;;1083       mpu_reset_fifo();
000a88  f7fffffe          BL       mpu_reset_fifo
;;;1084   
;;;1085       dmp.packet_length = 0;
000a8c  2000              MOVS     r0,#0
000a8e  4982              LDR      r1,|L1.3224|
000a90  7388              STRB     r0,[r1,#0xe]
;;;1086       if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
000a92  f0140f40          TST      r4,#0x40
000a96  d003              BEQ      |L1.2720|
;;;1087           dmp.packet_length += 6;
000a98  4608              MOV      r0,r1
000a9a  7b80              LDRB     r0,[r0,#0xe]  ; dmp
000a9c  1d80              ADDS     r0,r0,#6
000a9e  7388              STRB     r0,[r1,#0xe]
                  |L1.2720|
;;;1088       if (mask & DMP_FEATURE_SEND_ANY_GYRO)
000aa0  f4147fc0          TST      r4,#0x180
000aa4  d004              BEQ      |L1.2736|
;;;1089           dmp.packet_length += 6;
000aa6  487c              LDR      r0,|L1.3224|
000aa8  7b80              LDRB     r0,[r0,#0xe]  ; dmp
000aaa  1d80              ADDS     r0,r0,#6
000aac  497a              LDR      r1,|L1.3224|
000aae  7388              STRB     r0,[r1,#0xe]
                  |L1.2736|
;;;1090       if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
000ab0  f0140f14          TST      r4,#0x14
000ab4  d004              BEQ      |L1.2752|
;;;1091           dmp.packet_length += 16;
000ab6  4878              LDR      r0,|L1.3224|
000ab8  7b80              LDRB     r0,[r0,#0xe]  ; dmp
000aba  3010              ADDS     r0,r0,#0x10
000abc  4976              LDR      r1,|L1.3224|
000abe  7388              STRB     r0,[r1,#0xe]
                  |L1.2752|
;;;1092       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
000ac0  f0140f03          TST      r4,#3
000ac4  d004              BEQ      |L1.2768|
;;;1093           dmp.packet_length += 4;
000ac6  4874              LDR      r0,|L1.3224|
000ac8  7b80              LDRB     r0,[r0,#0xe]  ; dmp
000aca  1d00              ADDS     r0,r0,#4
000acc  4972              LDR      r1,|L1.3224|
000ace  7388              STRB     r0,[r1,#0xe]
                  |L1.2768|
;;;1094   
;;;1095       return 0;
000ad0  2000              MOVS     r0,#0
;;;1096   }
000ad2  bd3e              POP      {r1-r5,pc}
;;;1097   
                          ENDP

                  dmp_get_enabled_features PROC
;;;1102    */
;;;1103   int dmp_get_enabled_features(unsigned short *mask)
000ad4  4601              MOV      r1,r0
;;;1104   {
;;;1105       mask[0] = dmp.feature_mask;
000ad6  4870              LDR      r0,|L1.3224|
000ad8  8940              LDRH     r0,[r0,#0xa]  ; dmp
000ada  8008              STRH     r0,[r1,#0]
;;;1106       return 0;
000adc  2000              MOVS     r0,#0
;;;1107   }
000ade  4770              BX       lr
;;;1108   
                          ENDP

                  decode_gesture PROC
;;;1180    */
;;;1181   static int decode_gesture(unsigned char *gesture)
000ae0  e92d41f0          PUSH     {r4-r8,lr}
;;;1182   {
000ae4  4604              MOV      r4,r0
;;;1183       unsigned char tap, android_orient;
;;;1184   
;;;1185       android_orient = gesture[3] & 0xC0;
000ae6  78e0              LDRB     r0,[r4,#3]
000ae8  f00006c0          AND      r6,r0,#0xc0
;;;1186       tap = 0x3F & gesture[3];
000aec  78e0              LDRB     r0,[r4,#3]
000aee  f000053f          AND      r5,r0,#0x3f
;;;1187   
;;;1188       if (gesture[1] & INT_SRC_TAP) {
000af2  7860              LDRB     r0,[r4,#1]
000af4  f0100f01          TST      r0,#1
000af8  d013              BEQ      |L1.2850|
;;;1189           unsigned char direction, count;
;;;1190           direction = tap >> 3;
000afa  10ef              ASRS     r7,r5,#3
;;;1191           count = (tap % 8) + 1;
000afc  4628              MOV      r0,r5
000afe  17e9              ASRS     r1,r5,#31
000b00  eb057151          ADD      r1,r5,r1,LSR #29
000b04  10c9              ASRS     r1,r1,#3
000b06  eba501c1          SUB      r1,r5,r1,LSL #3
000b0a  1c49              ADDS     r1,r1,#1
000b0c  f00108ff          AND      r8,r1,#0xff
;;;1192           if (dmp.tap_cb)
000b10  4861              LDR      r0,|L1.3224|
000b12  6800              LDR      r0,[r0,#0]  ; dmp
000b14  b120              CBZ      r0,|L1.2848|
;;;1193               dmp.tap_cb(direction, count);
000b16  4860              LDR      r0,|L1.3224|
000b18  4641              MOV      r1,r8
000b1a  6802              LDR      r2,[r0,#0]  ; dmp
000b1c  4638              MOV      r0,r7
000b1e  4790              BLX      r2
                  |L1.2848|
;;;1194       }
000b20  bf00              NOP      
                  |L1.2850|
;;;1195   
;;;1196       if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
000b22  7860              LDRB     r0,[r4,#1]
000b24  f0100f08          TST      r0,#8
000b28  d006              BEQ      |L1.2872|
;;;1197           if (dmp.android_orient_cb)
000b2a  485b              LDR      r0,|L1.3224|
000b2c  6840              LDR      r0,[r0,#4]  ; dmp
000b2e  b118              CBZ      r0,|L1.2872|
;;;1198               dmp.android_orient_cb(android_orient >> 6);
000b30  11b0              ASRS     r0,r6,#6
000b32  4a59              LDR      r2,|L1.3224|
000b34  6851              LDR      r1,[r2,#4]  ; dmp
000b36  4788              BLX      r1
                  |L1.2872|
;;;1199       }
;;;1200   
;;;1201       return 0;
000b38  2000              MOVS     r0,#0
;;;1202   }
000b3a  e8bd81f0          POP      {r4-r8,pc}
;;;1203   
                          ENDP

                  dmp_set_interrupt_mode PROC
;;;1212    */
;;;1213   int dmp_set_interrupt_mode(unsigned char mode)
000b3e  b510              PUSH     {r4,lr}
;;;1214   {
000b40  b086              SUB      sp,sp,#0x18
000b42  4604              MOV      r4,r0
;;;1215       const unsigned char regs_continuous[11] =
000b44  a255              ADR      r2,|L1.3228|
000b46  ca07              LDM      r2,{r0-r2}
000b48  ab03              ADD      r3,sp,#0xc
000b4a  c307              STM      r3!,{r0-r2}
;;;1216           {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
;;;1217       const unsigned char regs_gesture[11] =
000b4c  a256              ADR      r2,|L1.3240|
000b4e  ca07              LDM      r2,{r0-r2}
000b50  e88d0007          STM      sp,{r0-r2}
;;;1218           {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
;;;1219   
;;;1220       switch (mode) {
000b54  2c01              CMP      r4,#1
000b56  d009              BEQ      |L1.2924|
000b58  2c02              CMP      r4,#2
000b5a  d10e              BNE      |L1.2938|
;;;1221       case DMP_INT_CONTINUOUS:
;;;1222           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
000b5c  aa03              ADD      r2,sp,#0xc
000b5e  210b              MOVS     r1,#0xb
000b60  f6402082          MOV      r0,#0xa82
000b64  f7fffffe          BL       mpu_write_mem
                  |L1.2920|
;;;1223               (unsigned char*)regs_continuous);
;;;1224       case DMP_INT_GESTURE:
;;;1225           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
;;;1226               (unsigned char*)regs_gesture);
;;;1227       default:
;;;1228           return -1;
;;;1229       }
;;;1230   }
000b68  b006              ADD      sp,sp,#0x18
000b6a  bd10              POP      {r4,pc}
                  |L1.2924|
000b6c  466a              MOV      r2,sp                 ;1225
000b6e  210b              MOVS     r1,#0xb               ;1225
000b70  f6402082          MOV      r0,#0xa82             ;1225
000b74  f7fffffe          BL       mpu_write_mem
000b78  e7f6              B        |L1.2920|
                  |L1.2938|
000b7a  f04f30ff          MOV      r0,#0xffffffff        ;1228
000b7e  e7f3              B        |L1.2920|
;;;1231   
                          ENDP

                  dmp_read_fifo PROC
;;;1251    */
;;;1252   int dmp_read_fifo(short *gyro, short *accel, long *quat,
000b80  e92d4ff0          PUSH     {r4-r11,lr}
;;;1253       unsigned long *timestamp, short *sensors, unsigned char *more)
;;;1254   {
000b84  b08d              SUB      sp,sp,#0x34
000b86  4607              MOV      r7,r0
000b88  4688              MOV      r8,r1
000b8a  4615              MOV      r5,r2
000b8c  4699              MOV      r9,r3
000b8e  e9dd6b16          LDRD     r6,r11,[sp,#0x58]
;;;1255       unsigned char fifo_data[MAX_PACKET_LENGTH];
;;;1256       unsigned char ii = 0;
000b92  2400              MOVS     r4,#0
;;;1257       sensors[0] = 0;
000b94  2000              MOVS     r0,#0
000b96  8030              STRH     r0,[r6,#0]
;;;1258   
;;;1259       /* Get a packet. */
;;;1260       if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
000b98  493f              LDR      r1,|L1.3224|
000b9a  7b88              LDRB     r0,[r1,#0xe]  ; dmp
000b9c  465a              MOV      r2,r11
000b9e  a905              ADD      r1,sp,#0x14
000ba0  f7fffffe          BL       mpu_read_fifo_stream
000ba4  b118              CBZ      r0,|L1.2990|
;;;1261           return -1;
000ba6  1e60              SUBS     r0,r4,#1
                  |L1.2984|
;;;1262   
;;;1263       /* Parse DMP packet. */
;;;1264       if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
;;;1265   #ifdef FIFO_CORRUPTION_CHECK
;;;1266           long quat_q14[4], quat_mag_sq;
;;;1267   #endif
;;;1268           quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
;;;1269               ((long)fifo_data[2] << 8) | fifo_data[3];
;;;1270           quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
;;;1271               ((long)fifo_data[6] << 8) | fifo_data[7];
;;;1272           quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
;;;1273               ((long)fifo_data[10] << 8) | fifo_data[11];
;;;1274           quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
;;;1275               ((long)fifo_data[14] << 8) | fifo_data[15];
;;;1276           ii += 16;
;;;1277   #ifdef FIFO_CORRUPTION_CHECK
;;;1278           /* We can detect a corrupted FIFO by monitoring the quaternion data and
;;;1279            * ensuring that the magnitude is always normalized to one. This
;;;1280            * shouldn't happen in normal operation, but if an I2C error occurs,
;;;1281            * the FIFO reads might become misaligned.
;;;1282            *
;;;1283            * Let's start by scaling down the quaternion data to avoid long long
;;;1284            * math.
;;;1285            */
;;;1286           quat_q14[0] = quat[0] >> 16;
;;;1287           quat_q14[1] = quat[1] >> 16;
;;;1288           quat_q14[2] = quat[2] >> 16;
;;;1289           quat_q14[3] = quat[3] >> 16;
;;;1290           quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
;;;1291               quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
;;;1292           if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
;;;1293               (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
;;;1294               /* Quaternion is outside of the acceptable threshold. */
;;;1295               mpu_reset_fifo();
;;;1296               sensors[0] = 0;
;;;1297               return -1;
;;;1298           }
;;;1299           sensors[0] |= INV_WXYZ_QUAT;
;;;1300   #endif
;;;1301       }
;;;1302   
;;;1303       if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
;;;1304           accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1305           accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1306           accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1307           ii += 6;
;;;1308           sensors[0] |= INV_XYZ_ACCEL;
;;;1309       }
;;;1310   
;;;1311       if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
;;;1312           gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1313           gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1314           gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1315           ii += 6;
;;;1316           sensors[0] |= INV_XYZ_GYRO;
;;;1317       }
;;;1318   
;;;1319       /* Gesture data is at the end of the DMP packet. Parse it and call
;;;1320        * the gesture callbacks (if registered).
;;;1321        */
;;;1322       if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
;;;1323           decode_gesture(fifo_data + ii);
;;;1324   
;;;1325       myget_ms(timestamp);
;;;1326       return 0;
;;;1327   }
000ba8  b00d              ADD      sp,sp,#0x34
000baa  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2990|
000bae  483a              LDR      r0,|L1.3224|
000bb0  8940              LDRH     r0,[r0,#0xa]          ;1264  ; dmp
000bb2  f0100f14          TST      r0,#0x14              ;1264
000bb6  d07d              BEQ      |L1.3252|
000bb8  f89d0014          LDRB     r0,[sp,#0x14]         ;1268
000bbc  0600              LSLS     r0,r0,#24             ;1268
000bbe  f89d1015          LDRB     r1,[sp,#0x15]         ;1268
000bc2  ea404001          ORR      r0,r0,r1,LSL #16      ;1268
000bc6  f89d1016          LDRB     r1,[sp,#0x16]         ;1268
000bca  ea402001          ORR      r0,r0,r1,LSL #8       ;1268
000bce  f89d1017          LDRB     r1,[sp,#0x17]         ;1268
000bd2  4308              ORRS     r0,r0,r1              ;1268
000bd4  6028              STR      r0,[r5,#0]            ;1268
000bd6  f89d0018          LDRB     r0,[sp,#0x18]         ;1270
000bda  0600              LSLS     r0,r0,#24             ;1270
000bdc  f89d1019          LDRB     r1,[sp,#0x19]         ;1270
000be0  ea404001          ORR      r0,r0,r1,LSL #16      ;1270
000be4  f89d101a          LDRB     r1,[sp,#0x1a]         ;1270
000be8  ea402001          ORR      r0,r0,r1,LSL #8       ;1270
000bec  f89d101b          LDRB     r1,[sp,#0x1b]         ;1270
000bf0  4308              ORRS     r0,r0,r1              ;1270
000bf2  6068              STR      r0,[r5,#4]            ;1270
000bf4  f89d001c          LDRB     r0,[sp,#0x1c]         ;1272
000bf8  0600              LSLS     r0,r0,#24             ;1272
000bfa  f89d101d          LDRB     r1,[sp,#0x1d]         ;1272
000bfe  ea404001          ORR      r0,r0,r1,LSL #16      ;1272
000c02  f89d101e          LDRB     r1,[sp,#0x1e]         ;1272
000c06  ea402001          ORR      r0,r0,r1,LSL #8       ;1272
000c0a  f89d101f          LDRB     r1,[sp,#0x1f]         ;1272
000c0e  4308              ORRS     r0,r0,r1              ;1272
000c10  60a8              STR      r0,[r5,#8]            ;1272
000c12  f89d0020          LDRB     r0,[sp,#0x20]         ;1274
000c16  0600              LSLS     r0,r0,#24             ;1274
000c18  f89d1021          LDRB     r1,[sp,#0x21]         ;1274
000c1c  ea404001          ORR      r0,r0,r1,LSL #16      ;1274
000c20  f89d1022          LDRB     r1,[sp,#0x22]         ;1274
000c24  ea402001          ORR      r0,r0,r1,LSL #8       ;1274
000c28  f89d1023          LDRB     r1,[sp,#0x23]         ;1274
000c2c  4308              ORRS     r0,r0,r1              ;1274
000c2e  60e8              STR      r0,[r5,#0xc]          ;1274
000c30  f1040010          ADD      r0,r4,#0x10           ;1276
000c34  b2c4              UXTB     r4,r0                 ;1276
000c36  6828              LDR      r0,[r5,#0]            ;1286
000c38  1400              ASRS     r0,r0,#16             ;1286
000c3a  9001              STR      r0,[sp,#4]            ;1286
000c3c  6868              LDR      r0,[r5,#4]            ;1287
000c3e  1400              ASRS     r0,r0,#16             ;1287
000c40  9002              STR      r0,[sp,#8]            ;1287
000c42  68a8              LDR      r0,[r5,#8]            ;1288
000c44  1400              ASRS     r0,r0,#16             ;1288
000c46  9003              STR      r0,[sp,#0xc]          ;1288
000c48  68e8              LDR      r0,[r5,#0xc]          ;1289
000c4a  1400              ASRS     r0,r0,#16             ;1289
000c4c  9004              STR      r0,[sp,#0x10]         ;1289
000c4e  9801              LDR      r0,[sp,#4]            ;1290
000c50  4340              MULS     r0,r0,r0              ;1290
000c52  9902              LDR      r1,[sp,#8]            ;1290
000c54  fb010001          MLA      r0,r1,r1,r0           ;1290
000c58  9903              LDR      r1,[sp,#0xc]          ;1290
000c5a  fb010001          MLA      r0,r1,r1,r0           ;1290
000c5e  9904              LDR      r1,[sp,#0x10]         ;1290
000c60  fb010a01          MLA      r10,r1,r1,r0          ;1290
000c64  f1ba6f70          CMP      r10,#0xf000000        ;1292
000c68  db02              BLT      |L1.3184|
000c6a  f1ba5f88          CMP      r10,#0x11000000       ;1293
000c6e  dd22              BLE      |L1.3254|
                  |L1.3184|
000c70  f7fffffe          BL       mpu_reset_fifo
000c74  2000              MOVS     r0,#0                 ;1296
000c76  8030              STRH     r0,[r6,#0]            ;1296
000c78  1e40              SUBS     r0,r0,#1              ;1297
000c7a  e795              B        |L1.2984|
                  |L1.3196|
000c7c  b8aab38d          DCB      184,170,179,141,180,152,"\r5]",0
000c80  b4980d35
000c84  5d00    
000c86  00                DCB      0
000c87  00                DCB      0
                  |L1.3208|
000c88  b8aaaaaa          DCB      184,170,170,170,176,136,195,197,199,0
000c8c  b088c3c5
000c90  c700    
000c92  00                DCB      0
000c93  00                DCB      0
                  |L1.3220|
                          DCD      0x02cae309
                  |L1.3224|
                          DCD      ||dmp||
                  |L1.3228|
000c9c  d8b1b9f3          DCB      216,177,185,243,139,163,145,182,"\t",180,217,0
000ca0  8ba391b6
000ca4  09b4d900
                  |L1.3240|
000ca8  dab1b9f3          DCB      218,177,185,243,139,163,145,182,218,180,218,0
000cac  8ba391b6
000cb0  dab4da00
                  |L1.3252|
000cb4  e005              B        |L1.3266|
                  |L1.3254|
000cb6  f9b60000          LDRSH    r0,[r6,#0]            ;1299
000cba  f4407080          ORR      r0,r0,#0x100          ;1299
000cbe  8030              STRH     r0,[r6,#0]            ;1299
000cc0  bf00              NOP                            ;1301
                  |L1.3266|
000cc2  4834              LDR      r0,|L1.3476|
000cc4  8940              LDRH     r0,[r0,#0xa]          ;1303  ; dmp
000cc6  f0100f40          TST      r0,#0x40              ;1303
000cca  d024              BEQ      |L1.3350|
000ccc  a905              ADD      r1,sp,#0x14           ;1304
000cce  1c60              ADDS     r0,r4,#1              ;1304
000cd0  5c08              LDRB     r0,[r1,r0]            ;1304
000cd2  5d09              LDRB     r1,[r1,r4]            ;1304
000cd4  ea402001          ORR      r0,r0,r1,LSL #8       ;1304
000cd8  b200              SXTH     r0,r0                 ;1304
000cda  f8a80000          STRH     r0,[r8,#0]            ;1304
000cde  a905              ADD      r1,sp,#0x14           ;1305
000ce0  1ce0              ADDS     r0,r4,#3              ;1305
000ce2  5c09              LDRB     r1,[r1,r0]            ;1305
000ce4  aa05              ADD      r2,sp,#0x14           ;1305
000ce6  1ca0              ADDS     r0,r4,#2              ;1305
000ce8  5c10              LDRB     r0,[r2,r0]            ;1305
000cea  ea412000          ORR      r0,r1,r0,LSL #8       ;1305
000cee  b200              SXTH     r0,r0                 ;1305
000cf0  f8a80002          STRH     r0,[r8,#2]            ;1305
000cf4  a905              ADD      r1,sp,#0x14           ;1306
000cf6  1d60              ADDS     r0,r4,#5              ;1306
000cf8  5c09              LDRB     r1,[r1,r0]            ;1306
000cfa  1d20              ADDS     r0,r4,#4              ;1306
000cfc  5c10              LDRB     r0,[r2,r0]            ;1306
000cfe  ea412000          ORR      r0,r1,r0,LSL #8       ;1306
000d02  b200              SXTH     r0,r0                 ;1306
000d04  f8a80004          STRH     r0,[r8,#4]            ;1306
000d08  1da0              ADDS     r0,r4,#6              ;1307
000d0a  b2c4              UXTB     r4,r0                 ;1307
000d0c  f9b60000          LDRSH    r0,[r6,#0]            ;1308
000d10  f0400008          ORR      r0,r0,#8              ;1308
000d14  8030              STRH     r0,[r6,#0]            ;1308
                  |L1.3350|
000d16  481f              LDR      r0,|L1.3476|
000d18  8940              LDRH     r0,[r0,#0xa]          ;1311  ; dmp
000d1a  f4107fc0          TST      r0,#0x180             ;1311
000d1e  d021              BEQ      |L1.3428|
000d20  a905              ADD      r1,sp,#0x14           ;1312
000d22  1c60              ADDS     r0,r4,#1              ;1312
000d24  5c08              LDRB     r0,[r1,r0]            ;1312
000d26  5d09              LDRB     r1,[r1,r4]            ;1312
000d28  ea402001          ORR      r0,r0,r1,LSL #8       ;1312
000d2c  b200              SXTH     r0,r0                 ;1312
000d2e  8038              STRH     r0,[r7,#0]            ;1312
000d30  a905              ADD      r1,sp,#0x14           ;1313
000d32  1ce0              ADDS     r0,r4,#3              ;1313
000d34  5c09              LDRB     r1,[r1,r0]            ;1313
000d36  aa05              ADD      r2,sp,#0x14           ;1313
000d38  1ca0              ADDS     r0,r4,#2              ;1313
000d3a  5c10              LDRB     r0,[r2,r0]            ;1313
000d3c  ea412000          ORR      r0,r1,r0,LSL #8       ;1313
000d40  b200              SXTH     r0,r0                 ;1313
000d42  8078              STRH     r0,[r7,#2]            ;1313
000d44  a905              ADD      r1,sp,#0x14           ;1314
000d46  1d60              ADDS     r0,r4,#5              ;1314
000d48  5c09              LDRB     r1,[r1,r0]            ;1314
000d4a  1d20              ADDS     r0,r4,#4              ;1314
000d4c  5c10              LDRB     r0,[r2,r0]            ;1314
000d4e  ea412000          ORR      r0,r1,r0,LSL #8       ;1314
000d52  b200              SXTH     r0,r0                 ;1314
000d54  80b8              STRH     r0,[r7,#4]            ;1314
000d56  1da0              ADDS     r0,r4,#6              ;1315
000d58  b2c4              UXTB     r4,r0                 ;1315
000d5a  f9b60000          LDRSH    r0,[r6,#0]            ;1316
000d5e  f0400070          ORR      r0,r0,#0x70           ;1316
000d62  8030              STRH     r0,[r6,#0]            ;1316
                  |L1.3428|
000d64  480b              LDR      r0,|L1.3476|
000d66  8940              LDRH     r0,[r0,#0xa]          ;1322  ; dmp
000d68  f0100f03          TST      r0,#3                 ;1322
000d6c  d003              BEQ      |L1.3446|
000d6e  a905              ADD      r1,sp,#0x14           ;1323
000d70  1908              ADDS     r0,r1,r4              ;1323
000d72  f7fffffe          BL       decode_gesture
                  |L1.3446|
000d76  4648              MOV      r0,r9                 ;1325
000d78  f7fffffe          BL       myget_ms
000d7c  2000              MOVS     r0,#0                 ;1326
000d7e  e713              B        |L1.2984|
;;;1328   
                          ENDP

                  dmp_register_tap_cb PROC
;;;1340    */
;;;1341   int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
000d80  4601              MOV      r1,r0
;;;1342   {
;;;1343       dmp.tap_cb = func;
000d82  4804              LDR      r0,|L1.3476|
000d84  6001              STR      r1,[r0,#0]  ; dmp
;;;1344       return 0;
000d86  2000              MOVS     r0,#0
;;;1345   }
000d88  4770              BX       lr
;;;1346   
                          ENDP

                  dmp_register_android_orient_cb PROC
;;;1351    */
;;;1352   int dmp_register_android_orient_cb(void (*func)(unsigned char))
000d8a  4601              MOV      r1,r0
;;;1353   {
;;;1354       dmp.android_orient_cb = func;
000d8c  4801              LDR      r0,|L1.3476|
000d8e  6041              STR      r1,[r0,#4]  ; dmp
;;;1355       return 0;
000d90  2000              MOVS     r0,#0
;;;1356   }
000d92  4770              BX       lr
;;;1357   
                          ENDP

                  |L1.3476|
                          DCD      ||dmp||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||dmp||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  dmp_memory
000000  00007000          DCB      0x00,0x00,0x70,0x00
000004  00000024          DCB      0x00,0x00,0x00,0x24
000008  00000002          DCB      0x00,0x00,0x00,0x02
00000c  00030000          DCB      0x00,0x03,0x00,0x00
000010  00650054          DCB      0x00,0x65,0x00,0x54
000014  ffef0000          DCB      0xff,0xef,0x00,0x00
000018  fa80000b          DCB      0xfa,0x80,0x00,0x0b
00001c  12820001          DCB      0x12,0x82,0x00,0x01
000020  030c30c3          DCB      0x03,0x0c,0x30,0xc3
000024  0e8c8ce9          DCB      0x0e,0x8c,0x8c,0xe9
000028  14d54002          DCB      0x14,0xd5,0x40,0x02
00002c  13710f8e          DCB      0x13,0x71,0x0f,0x8e
000030  3883f883          DCB      0x38,0x83,0xf8,0x83
000034  3000f883          DCB      0x30,0x00,0xf8,0x83
000038  258ef883          DCB      0x25,0x8e,0xf8,0x83
00003c  3000f883          DCB      0x30,0x00,0xf8,0x83
000040  ffffffff          DCB      0xff,0xff,0xff,0xff
000044  0ffea9d6          DCB      0x0f,0xfe,0xa9,0xd6
000048  24000400          DCB      0x24,0x00,0x04,0x00
00004c  1a8279a1          DCB      0x1a,0x82,0x79,0xa1
000050  0000003c          DCB      0x00,0x00,0x00,0x3c
000054  ffff0000          DCB      0xff,0xff,0x00,0x00
000058  00100000          DCB      0x00,0x10,0x00,0x00
00005c  38836fa2          DCB      0x38,0x83,0x6f,0xa2
000060  003e0330          DCB      0x00,0x3e,0x03,0x30
000064  40000000          DCB      0x40,0x00,0x00,0x00
000068  02cae309          DCB      0x02,0xca,0xe3,0x09
00006c  3e800000          DCB      0x3e,0x80,0x00,0x00
000070  20000000          DCB      0x20,0x00,0x00,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  40000000          DCB      0x40,0x00,0x00,0x00
00007c  60000000          DCB      0x60,0x00,0x00,0x00
000080  000c0000          DCB      0x00,0x0c,0x00,0x00
000084  000c186e          DCB      0x00,0x0c,0x18,0x6e
000088  00000692          DCB      0x00,0x00,0x06,0x92
00008c  0a16c0df          DCB      0x0a,0x16,0xc0,0xdf
000090  ffff0256          DCB      0xff,0xff,0x02,0x56
000094  fd8cd377          DCB      0xfd,0x8c,0xd3,0x77
000098  ffe1c496          DCB      0xff,0xe1,0xc4,0x96
00009c  e0c5beaa          DCB      0xe0,0xc5,0xbe,0xaa
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  ffff0b2b          DCB      0xff,0xff,0x0b,0x2b
0000a8  00001657          DCB      0x00,0x00,0x16,0x57
0000ac  00000359          DCB      0x00,0x00,0x03,0x59
0000b0  40000000          DCB      0x40,0x00,0x00,0x00
0000b4  00001dfa          DCB      0x00,0x00,0x1d,0xfa
0000b8  00026c1d          DCB      0x00,0x02,0x6c,0x1d
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  3fffdfeb          DCB      0x3f,0xff,0xdf,0xeb
0000c4  003eb3b6          DCB      0x00,0x3e,0xb3,0xb6
0000c8  000d2278          DCB      0x00,0x0d,0x22,0x78
0000cc  00002f3c          DCB      0x00,0x00,0x2f,0x3c
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  001942b5          DCB      0x00,0x19,0x42,0xb5
0000d8  000039a2          DCB      0x00,0x00,0x39,0xa2
0000dc  0000b365          DCB      0x00,0x00,0xb3,0x65
0000e0  d90e9fc9          DCB      0xd9,0x0e,0x9f,0xc9
0000e4  1dcf4c34          DCB      0x1d,0xcf,0x4c,0x34
0000e8  30000000          DCB      0x30,0x00,0x00,0x00
0000ec  50000000          DCB      0x50,0x00,0x00,0x00
0000f0  3bb67ae8          DCB      0x3b,0xb6,0x7a,0xe8
0000f4  00640000          DCB      0x00,0x64,0x00,0x00
0000f8  00c80000          DCB      0x00,0xc8,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  10000000          DCB      0x10,0x00,0x00,0x00
000104  1000fa92          DCB      0x10,0x00,0xfa,0x92
000108  1000225e          DCB      0x10,0x00,0x22,0x5e
00010c  000d229f          DCB      0x00,0x0d,0x22,0x9f
000110  00010000          DCB      0x00,0x01,0x00,0x00
000114  00320000          DCB      0x00,0x32,0x00,0x00
000118  ff460000          DCB      0xff,0x46,0x00,0x00
00011c  63d40000          DCB      0x63,0xd4,0x00,0x00
000120  10000000          DCB      0x10,0x00,0x00,0x00
000124  04d60000          DCB      0x04,0xd6,0x00,0x00
000128  04cc0000          DCB      0x04,0xcc,0x00,0x00
00012c  04cc0000          DCB      0x04,0xcc,0x00,0x00
000130  00001072          DCB      0x00,0x00,0x10,0x72
000134  00000040          DCB      0x00,0x00,0x00,0x40
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00060002          DCB      0x00,0x06,0x00,0x02
000144  00050007          DCB      0x00,0x05,0x00,0x07
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00640000          DCB      0x00,0x64,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000005          DCB      0x00,0x00,0x00,0x05
000158  00050064          DCB      0x00,0x05,0x00,0x64
00015c  00200000          DCB      0x00,0x20,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00004000          DCB      0x00,0x00,0x40,0x00
00016c  00000300          DCB      0x00,0x00,0x03,0x00
000170  00000032          DCB      0x00,0x00,0x00,0x32
000174  f8980000          DCB      0xf8,0x98,0x00,0x00
000178  ff650000          DCB      0xff,0x65,0x00,0x00
00017c  830f0000          DCB      0x83,0x0f,0x00,0x00
000180  ff9bfc00          DCB      0xff,0x9b,0xfc,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  00001000          DCB      0x00,0x00,0x10,0x00
0001b0  40000000          DCB      0x40,0x00,0x00,0x00
0001b4  00000006          DCB      0x00,0x00,0x00,0x06
0001b8  0000b26a          DCB      0x00,0x00,0xb2,0x6a
0001bc  00020000          DCB      0x00,0x02,0x00,0x00
0001c0  0001fb83          DCB      0x00,0x01,0xfb,0x83
0001c4  00680000          DCB      0x00,0x68,0x00,0x00
0001c8  00d9fc00          DCB      0x00,0xd9,0xfc,0x00
0001cc  7cf1ff83          DCB      0x7c,0xf1,0xff,0x83
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00650000          DCB      0x00,0x65,0x00,0x00
0001d8  006403e8          DCB      0x00,0x64,0x03,0xe8
0001dc  00640028          DCB      0x00,0x64,0x00,0x28
0001e0  00000025          DCB      0x00,0x00,0x00,0x25
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  16a00000          DCB      0x16,0xa0,0x00,0x00
0001ec  00001000          DCB      0x00,0x00,0x10,0x00
0001f0  00001000          DCB      0x00,0x00,0x10,0x00
0001f4  002f0000          DCB      0x00,0x2f,0x00,0x00
0001f8  000001f4          DCB      0x00,0x00,0x01,0xf4
0001fc  00001000          DCB      0x00,0x00,0x10,0x00
000200  00280000          DCB      0x00,0x28,0x00,0x00
000204  ffff4581          DCB      0xff,0xff,0x45,0x81
000208  fffffa72          DCB      0xff,0xff,0xfa,0x72
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  00440005          DCB      0x00,0x44,0x00,0x05
000218  0005bac6          DCB      0x00,0x05,0xba,0xc6
00021c  004778a2          DCB      0x00,0x47,0x78,0xa2
000220  00000001          DCB      0x00,0x00,0x00,0x01
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000600          DCB      0x00,0x00,0x06,0x00
00022c  00000014          DCB      0x00,0x00,0x00,0x14
000230  0000254d          DCB      0x00,0x00,0x25,0x4d
000234  002f706d          DCB      0x00,0x2f,0x70,0x6d
000238  000005ae          DCB      0x00,0x00,0x05,0xae
00023c  000c02d0          DCB      0x00,0x0c,0x02,0xd0
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  001b0000          DCB      0x00,0x1b,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  00000000          DCB      0x00,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  00640000          DCB      0x00,0x64,0x00,0x00
000264  00080000          DCB      0x00,0x08,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00000000          DCB      0x00,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000000          DCB      0x00,0x00,0x00,0x00
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000000          DCB      0x00,0x00,0x00,0x00
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  00000000          DCB      0x00,0x00,0x00,0x00
0002b8  00000000          DCB      0x00,0x00,0x00,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  001b0000          DCB      0x00,0x1b,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  000e000e          DCB      0x00,0x0e,0x00,0x0e
0002d0  00000ac7          DCB      0x00,0x00,0x0a,0xc7
0002d4  00040000          DCB      0x00,0x04,0x00,0x00
0002d8  00000032          DCB      0x00,0x00,0x00,0x32
0002dc  ffffff9c          DCB      0xff,0xff,0xff,0x9c
0002e0  00000b2b          DCB      0x00,0x00,0x0b,0x2b
0002e4  00000002          DCB      0x00,0x00,0x00,0x02
0002e8  00000001          DCB      0x00,0x00,0x00,0x01
0002ec  00000064          DCB      0x00,0x00,0x00,0x64
0002f0  ffe50000          DCB      0xff,0xe5,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000001          DCB      0x00,0x00,0x00,0x01
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00010000          DCB      0x00,0x01,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00018000          DCB      0x00,0x01,0x80,0x00
000314  00018000          DCB      0x00,0x01,0x80,0x00
000318  00018000          DCB      0x00,0x01,0x80,0x00
00031c  002426d3          DCB      0x00,0x24,0x26,0xd3
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00060010          DCB      0x00,0x06,0x00,0x10
00032c  0096003c          DCB      0x00,0x96,0x00,0x3c
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  0c0a4e68          DCB      0x0c,0x0a,0x4e,0x68
000344  cdcf7709          DCB      0xcd,0xcf,0x77,0x09
000348  50166759          DCB      0x50,0x16,0x67,0x59
00034c  c619ce82          DCB      0xc6,0x19,0xce,0x82
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  17d78400          DCB      0x17,0xd7,0x84,0x00
00036c  03000000          DCB      0x03,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  c7938f9d          DCB      0xc7,0x93,0x8f,0x9d
00037c  1e1b1c19          DCB      0x1e,0x1b,0x1c,0x19
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  02031885          DCB      0x02,0x03,0x18,0x85
00039c  00004000          DCB      0x00,0x00,0x40,0x00
0003a0  00000003          DCB      0x00,0x00,0x00,0x03
0003a4  00000003          DCB      0x00,0x00,0x00,0x03
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  40000000          DCB      0x40,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  677ddf7e          DCB      0x67,0x7d,0xdf,0x7e
0003e8  72902e55          DCB      0x72,0x90,0x2e,0x55
0003ec  4cf6e688          DCB      0x4c,0xf6,0xe6,0x88
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  d8dcb4b8          DCB      0xd8,0xdc,0xb4,0xb8
000404  b0d8b9ab          DCB      0xb0,0xd8,0xb9,0xab
000408  f3f8fab3          DCB      0xf3,0xf8,0xfa,0xb3
00040c  b7bb8e9e          DCB      0xb7,0xbb,0x8e,0x9e
000410  aef132f5          DCB      0xae,0xf1,0x32,0xf5
000414  1bf1b4b8          DCB      0x1b,0xf1,0xb4,0xb8
000418  b08097f1          DCB      0xb0,0x80,0x97,0xf1
00041c  a9dfdfdf          DCB      0xa9,0xdf,0xdf,0xdf
000420  aadfdfdf          DCB      0xaa,0xdf,0xdf,0xdf
000424  f2aac5cd          DCB      0xf2,0xaa,0xc5,0xcd
000428  c7a90cc9          DCB      0xc7,0xa9,0x0c,0xc9
00042c  2c97f1a9          DCB      0x2c,0x97,0xf1,0xa9
000430  89264666          DCB      0x89,0x26,0x46,0x66
000434  b28999a9          DCB      0xb2,0x89,0x99,0xa9
000438  2d557db0          DCB      0x2d,0x55,0x7d,0xb0
00043c  b08aa896          DCB      0xb0,0x8a,0xa8,0x96
000440  365676f1          DCB      0x36,0x56,0x76,0xf1
000444  baa3b4b2          DCB      0xba,0xa3,0xb4,0xb2
000448  80c0b8a8          DCB      0x80,0xc0,0xb8,0xa8
00044c  9711b283          DCB      0x97,0x11,0xb2,0x83
000450  98baa3f0          DCB      0x98,0xba,0xa3,0xf0
000454  24084410          DCB      0x24,0x08,0x44,0x10
000458  6418b2b9          DCB      0x64,0x18,0xb2,0xb9
00045c  b49883f1          DCB      0xb4,0x98,0x83,0xf1
000460  a329557d          DCB      0xa3,0x29,0x55,0x7d
000464  bab5b1a3          DCB      0xba,0xb5,0xb1,0xa3
000468  8393f000          DCB      0x83,0x93,0xf0,0x00
00046c  2850f5b2          DCB      0x28,0x50,0xf5,0xb2
000470  b6aa8393          DCB      0xb6,0xaa,0x83,0x93
000474  28547cf1          DCB      0x28,0x54,0x7c,0xf1
000478  b9a38293          DCB      0xb9,0xa3,0x82,0x93
00047c  61baa2da          DCB      0x61,0xba,0xa2,0xda
000480  dedfdb81          DCB      0xde,0xdf,0xdb,0x81
000484  9ab9aef5          DCB      0x9a,0xb9,0xae,0xf5
000488  606870f1          DCB      0x60,0x68,0x70,0xf1
00048c  dabaa2df          DCB      0xda,0xba,0xa2,0xdf
000490  d9baa2fa          DCB      0xd9,0xba,0xa2,0xfa
000494  b9a38292          DCB      0xb9,0xa3,0x82,0x92
000498  db31baa2          DCB      0xdb,0x31,0xba,0xa2
00049c  d9baa2f8          DCB      0xd9,0xba,0xa2,0xf8
0004a0  df85a4d0          DCB      0xdf,0x85,0xa4,0xd0
0004a4  c1bbad83          DCB      0xc1,0xbb,0xad,0x83
0004a8  c2c5c7b8          DCB      0xc2,0xc5,0xc7,0xb8
0004ac  a2dfdfdf          DCB      0xa2,0xdf,0xdf,0xdf
0004b0  baa0dfdf          DCB      0xba,0xa0,0xdf,0xdf
0004b4  dfd8d8f1          DCB      0xdf,0xd8,0xd8,0xf1
0004b8  b8aab38d          DCB      0xb8,0xaa,0xb3,0x8d
0004bc  b4980d35          DCB      0xb4,0x98,0x0d,0x35
0004c0  5db2b6ba          DCB      0x5d,0xb2,0xb6,0xba
0004c4  af8c9619          DCB      0xaf,0x8c,0x96,0x19
0004c8  8f9fa70e          DCB      0x8f,0x9f,0xa7,0x0e
0004cc  161eb49a          DCB      0x16,0x1e,0xb4,0x9a
0004d0  b8aa872c          DCB      0xb8,0xaa,0x87,0x2c
0004d4  547cbaa4          DCB      0x54,0x7c,0xba,0xa4
0004d8  b08ab691          DCB      0xb0,0x8a,0xb6,0x91
0004dc  325676b2          DCB      0x32,0x56,0x76,0xb2
0004e0  8494a4c8          DCB      0x84,0x94,0xa4,0xc8
0004e4  08cdd8b8          DCB      0x08,0xcd,0xd8,0xb8
0004e8  b4b0f199          DCB      0xb4,0xb0,0xf1,0x99
0004ec  82a82d55          DCB      0x82,0xa8,0x2d,0x55
0004f0  7d98a80e          DCB      0x7d,0x98,0xa8,0x0e
0004f4  161ea22c          DCB      0x16,0x1e,0xa2,0x2c
0004f8  547c92a4          DCB      0x54,0x7c,0x92,0xa4
0004fc  f02c5078          DCB      0xf0,0x2c,0x50,0x78
000500  f184a898          DCB      0xf1,0x84,0xa8,0x98
000504  c4cdfcd8          DCB      0xc4,0xcd,0xfc,0xd8
000508  0ddba8fc          DCB      0x0d,0xdb,0xa8,0xfc
00050c  2df3d9ba          DCB      0x2d,0xf3,0xd9,0xba
000510  a6f8daba          DCB      0xa6,0xf8,0xda,0xba
000514  a6ded8ba          DCB      0xa6,0xde,0xd8,0xba
000518  b2b68696          DCB      0xb2,0xb6,0x86,0x96
00051c  a6d0f3c8          DCB      0xa6,0xd0,0xf3,0xc8
000520  41daa6c8          DCB      0x41,0xda,0xa6,0xc8
000524  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
000528  b882a892          DCB      0xb8,0x82,0xa8,0x92
00052c  f52c5488          DCB      0xf5,0x2c,0x54,0x88
000530  98f135d9          DCB      0x98,0xf1,0x35,0xd9
000534  f418d8f1          DCB      0xf4,0x18,0xd8,0xf1
000538  a2d0f8f9          DCB      0xa2,0xd0,0xf8,0xf9
00053c  a884d9c7          DCB      0xa8,0x84,0xd9,0xc7
000540  dff8f883          DCB      0xdf,0xf8,0xf8,0x83
000544  c5dadf69          DCB      0xc5,0xda,0xdf,0x69
000548  df83c1d8          DCB      0xdf,0x83,0xc1,0xd8
00054c  f40114f1          DCB      0xf4,0x01,0x14,0xf1
000550  a8824ea8          DCB      0xa8,0x82,0x4e,0xa8
000554  84f311d1          DCB      0x84,0xf3,0x11,0xd1
000558  82f5d992          DCB      0x82,0xf5,0xd9,0x92
00055c  289788f1          DCB      0x28,0x97,0x88,0xf1
000560  09f41c1c          DCB      0x09,0xf4,0x1c,0x1c
000564  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
000568  c0f9d1d9          DCB      0xc0,0xf9,0xd1,0xd9
00056c  9782f129          DCB      0x97,0x82,0xf1,0x29
000570  f40dd8f3          DCB      0xf4,0x0d,0xd8,0xf3
000574  f9f9d1d9          DCB      0xf9,0xf9,0xd1,0xd9
000578  82f4c203          DCB      0x82,0xf4,0xc2,0x03
00057c  d8dedf1a          DCB      0xd8,0xde,0xdf,0x1a
000580  d8f1a2fa          DCB      0xd8,0xf1,0xa2,0xfa
000584  f9a88498          DCB      0xf9,0xa8,0x84,0x98
000588  d9c7dff8          DCB      0xd9,0xc7,0xdf,0xf8
00058c  f8f883c7          DCB      0xf8,0xf8,0x83,0xc7
000590  dadf69df          DCB      0xda,0xdf,0x69,0xdf
000594  f883c3d8          DCB      0xf8,0x83,0xc3,0xd8
000598  f40114f1          DCB      0xf4,0x01,0x14,0xf1
00059c  98a8822e          DCB      0x98,0xa8,0x82,0x2e
0005a0  a884f311          DCB      0xa8,0x84,0xf3,0x11
0005a4  d182f5d9          DCB      0xd1,0x82,0xf5,0xd9
0005a8  92509788          DCB      0x92,0x50,0x97,0x88
0005ac  f109f41c          DCB      0xf1,0x09,0xf4,0x1c
0005b0  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
0005b4  c0f8f9d1          DCB      0xc0,0xf8,0xf9,0xd1
0005b8  d99782f1          DCB      0xd9,0x97,0x82,0xf1
0005bc  49f40dd8          DCB      0x49,0xf4,0x0d,0xd8
0005c0  f3f9f9d1          DCB      0xf3,0xf9,0xf9,0xd1
0005c4  d982f4c4          DCB      0xd9,0x82,0xf4,0xc4
0005c8  03d8dedf          DCB      0x03,0xd8,0xde,0xdf
0005cc  d8f1ad88          DCB      0xd8,0xf1,0xad,0x88
0005d0  98cca809          DCB      0x98,0xcc,0xa8,0x09
0005d4  f9d98292          DCB      0xf9,0xd9,0x82,0x92
0005d8  a8f57cf1          DCB      0xa8,0xf5,0x7c,0xf1
0005dc  883acf94          DCB      0x88,0x3a,0xcf,0x94
0005e0  4a6e98db          DCB      0x4a,0x6e,0x98,0xdb
0005e4  6931daad          DCB      0x69,0x31,0xda,0xad
0005e8  f2def9d8          DCB      0xf2,0xde,0xf9,0xd8
0005ec  8795a8f2          DCB      0x87,0x95,0xa8,0xf2
0005f0  21d1daa5          DCB      0x21,0xd1,0xda,0xa5
0005f4  f9f417d9          DCB      0xf9,0xf4,0x17,0xd9
0005f8  f1ae8ed0          DCB      0xf1,0xae,0x8e,0xd0
0005fc  c0c3ae82          DCB      0xc0,0xc3,0xae,0x82
000600  c684c3a8          DCB      0xc6,0x84,0xc3,0xa8
000604  8595c8a5          DCB      0x85,0x95,0xc8,0xa5
000608  88f2c0f1          DCB      0x88,0xf2,0xc0,0xf1
00060c  f4010ef1          DCB      0xf4,0x01,0x0e,0xf1
000610  8e9ea8c6          DCB      0x8e,0x9e,0xa8,0xc6
000614  3e56f554          DCB      0x3e,0x56,0xf5,0x54
000618  f18872f4          DCB      0xf1,0x88,0x72,0xf4
00061c  0115f198          DCB      0x01,0x15,0xf1,0x98
000620  45856ef5          DCB      0x45,0x85,0x6e,0xf5
000624  8e9e0488          DCB      0x8e,0x9e,0x04,0x88
000628  f142985a          DCB      0xf1,0x42,0x98,0x5a
00062c  8e9e0688          DCB      0x8e,0x9e,0x06,0x88
000630  69f4011c          DCB      0x69,0xf4,0x01,0x1c
000634  f1981e11          DCB      0xf1,0x98,0x1e,0x11
000638  08d0f504          DCB      0x08,0xd0,0xf5,0x04
00063c  f11e9702          DCB      0xf1,0x1e,0x97,0x02
000640  02983625          DCB      0x02,0x98,0x36,0x25
000644  dbf9d985          DCB      0xdb,0xf9,0xd9,0x85
000648  a5f3c1da          DCB      0xa5,0xf3,0xc1,0xda
00064c  85a5f3df          DCB      0x85,0xa5,0xf3,0xdf
000650  d88595a8          DCB      0xd8,0x85,0x95,0xa8
000654  f309daa5          DCB      0xf3,0x09,0xda,0xa5
000658  fad88292          DCB      0xfa,0xd8,0x82,0x92
00065c  a8f578f1          DCB      0xa8,0xf5,0x78,0xf1
000660  881a849f          DCB      0x88,0x1a,0x84,0x9f
000664  26889821          DCB      0x26,0x88,0x98,0x21
000668  daf41df3          DCB      0xda,0xf4,0x1d,0xf3
00066c  d8879f39          DCB      0xd8,0x87,0x9f,0x39
000670  d1afd9df          DCB      0xd1,0xaf,0xd9,0xdf
000674  dffbf9f4          DCB      0xdf,0xfb,0xf9,0xf4
000678  0cf3d8fa          DCB      0x0c,0xf3,0xd8,0xfa
00067c  d0f8daf9          DCB      0xd0,0xf8,0xda,0xf9
000680  f9d0dfd9          DCB      0xf9,0xd0,0xdf,0xd9
000684  f9d8f40b          DCB      0xf9,0xd8,0xf4,0x0b
000688  d8f3879f          DCB      0xd8,0xf3,0x87,0x9f
00068c  39d1afd9          DCB      0x39,0xd1,0xaf,0xd9
000690  dfdff41d          DCB      0xdf,0xdf,0xf4,0x1d
000694  f3d8fafc          DCB      0xf3,0xd8,0xfa,0xfc
000698  a869f9f9          DCB      0xa8,0x69,0xf9,0xf9
00069c  afd0dade          DCB      0xaf,0xd0,0xda,0xde
0006a0  fad9f88f          DCB      0xfa,0xd9,0xf8,0x8f
0006a4  9fa8f1cc          DCB      0x9f,0xa8,0xf1,0xcc
0006a8  f398db45          DCB      0xf3,0x98,0xdb,0x45
0006ac  d9afdfd0          DCB      0xd9,0xaf,0xdf,0xd0
0006b0  f8d8f18f          DCB      0xf8,0xd8,0xf1,0x8f
0006b4  9fa8caf3          DCB      0x9f,0xa8,0xca,0xf3
0006b8  8809daaf          DCB      0x88,0x09,0xda,0xaf
0006bc  8fcbf8d8          DCB      0x8f,0xcb,0xf8,0xd8
0006c0  f2ad978d          DCB      0xf2,0xad,0x97,0x8d
0006c4  0cd9a5df          DCB      0x0c,0xd9,0xa5,0xdf
0006c8  f9baa6f3          DCB      0xf9,0xba,0xa6,0xf3
0006cc  faf412f2          DCB      0xfa,0xf4,0x12,0xf2
0006d0  d8950dd1          DCB      0xd8,0x95,0x0d,0xd1
0006d4  d9baa6f3          DCB      0xd9,0xba,0xa6,0xf3
0006d8  fadaa5f2          DCB      0xfa,0xda,0xa5,0xf2
0006dc  c1baa6f3          DCB      0xc1,0xba,0xa6,0xf3
0006e0  dfd8f1ba          DCB      0xdf,0xd8,0xf1,0xba
0006e4  b2b68696          DCB      0xb2,0xb6,0x86,0x96
0006e8  a6d0caf3          DCB      0xa6,0xd0,0xca,0xf3
0006ec  49daa6cb          DCB      0x49,0xda,0xa6,0xcb
0006f0  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
0006f4  b8d8ad84          DCB      0xb8,0xd8,0xad,0x84
0006f8  f2c0dff1          DCB      0xf2,0xc0,0xdf,0xf1
0006fc  8fcbc3a8          DCB      0x8f,0xcb,0xc3,0xa8
000700  b2b68696          DCB      0xb2,0xb6,0x86,0x96
000704  c8c1cbc3          DCB      0xc8,0xc1,0xcb,0xc3
000708  f3b0b488          DCB      0xf3,0xb0,0xb4,0x88
00070c  98a821db          DCB      0x98,0xa8,0x21,0xdb
000710  718d9d71          DCB      0x71,0x8d,0x9d,0x71
000714  859521d9          DCB      0x85,0x95,0x21,0xd9
000718  adf2fad8          DCB      0xad,0xf2,0xfa,0xd8
00071c  8597a828          DCB      0x85,0x97,0xa8,0x28
000720  d9f408d8          DCB      0xd9,0xf4,0x08,0xd8
000724  f28d29da          DCB      0xf2,0x8d,0x29,0xda
000728  f405d9f2          DCB      0xf4,0x05,0xd9,0xf2
00072c  85a4c2f2          DCB      0x85,0xa4,0xc2,0xf2
000730  d8a88d94          DCB      0xd8,0xa8,0x8d,0x94
000734  01d1d9f4          DCB      0x01,0xd1,0xd9,0xf4
000738  11f2d887          DCB      0x11,0xf2,0xd8,0x87
00073c  21d8f40a          DCB      0x21,0xd8,0xf4,0x0a
000740  d8f28498          DCB      0xd8,0xf2,0x84,0x98
000744  a8c801d1          DCB      0xa8,0xc8,0x01,0xd1
000748  d9f411d8          DCB      0xd9,0xf4,0x11,0xd8
00074c  f3a4c8bb          DCB      0xf3,0xa4,0xc8,0xbb
000750  afd0f2de          DCB      0xaf,0xd0,0xf2,0xde
000754  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
000758  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
00075c  d8f1b8f6          DCB      0xd8,0xf1,0xb8,0xf6
000760  b5b9b08a          DCB      0xb5,0xb9,0xb0,0x8a
000764  95a3de3c          DCB      0x95,0xa3,0xde,0x3c
000768  a3d9f8d8          DCB      0xa3,0xd9,0xf8,0xd8
00076c  5ca3d9f8          DCB      0x5c,0xa3,0xd9,0xf8
000770  d87ca3d9          DCB      0xd8,0x7c,0xa3,0xd9
000774  f8d8f8f9          DCB      0xf8,0xd8,0xf8,0xf9
000778  d1a5d9df          DCB      0xd1,0xa5,0xd9,0xdf
00077c  dafad8b1          DCB      0xda,0xfa,0xd8,0xb1
000780  8530f7d9          DCB      0x85,0x30,0xf7,0xd9
000784  ded8f830          DCB      0xde,0xd8,0xf8,0x30
000788  addaded8          DCB      0xad,0xda,0xde,0xd8
00078c  f2b48c99          DCB      0xf2,0xb4,0x8c,0x99
000790  a32d557d          DCB      0xa3,0x2d,0x55,0x7d
000794  a083dfdf          DCB      0xa0,0x83,0xdf,0xdf
000798  dfb591a0          DCB      0xdf,0xb5,0x91,0xa0
00079c  f629d9fb          DCB      0xf6,0x29,0xd9,0xfb
0007a0  d8a0fc29          DCB      0xd8,0xa0,0xfc,0x29
0007a4  d9fad8a0          DCB      0xd9,0xfa,0xd8,0xa0
0007a8  d051d9f8          DCB      0xd0,0x51,0xd9,0xf8
0007ac  d8fc51d9          DCB      0xd8,0xfc,0x51,0xd9
0007b0  f9d879d9          DCB      0xf9,0xd8,0x79,0xd9
0007b4  fbd8a0d0          DCB      0xfb,0xd8,0xa0,0xd0
0007b8  fc79d9fa          DCB      0xfc,0x79,0xd9,0xfa
0007bc  d8a1f9f9          DCB      0xd8,0xa1,0xf9,0xf9
0007c0  f9f9f9a0          DCB      0xf9,0xf9,0xf9,0xa0
0007c4  dadfdfdf          DCB      0xda,0xdf,0xdf,0xdf
0007c8  d8a1f8f8          DCB      0xd8,0xa1,0xf8,0xf8
0007cc  f8f8f8ac          DCB      0xf8,0xf8,0xf8,0xac
0007d0  def8adde          DCB      0xde,0xf8,0xad,0xde
0007d4  8393ac2c          DCB      0x83,0x93,0xac,0x2c
0007d8  547cf1a8          DCB      0x54,0x7c,0xf1,0xa8
0007dc  dfdfdff6          DCB      0xdf,0xdf,0xdf,0xf6
0007e0  9d2cdaa0          DCB      0x9d,0x2c,0xda,0xa0
0007e4  dfd9fadb          DCB      0xdf,0xd9,0xfa,0xdb
0007e8  2df8d8a8          DCB      0x2d,0xf8,0xd8,0xa8
0007ec  50daa0d0          DCB      0x50,0xda,0xa0,0xd0
0007f0  ded9d0f8          DCB      0xde,0xd9,0xd0,0xf8
0007f4  f8f8db55          DCB      0xf8,0xf8,0xdb,0x55
0007f8  f8d8a878          DCB      0xf8,0xd8,0xa8,0x78
0007fc  daa0d0df          DCB      0xda,0xa0,0xd0,0xdf
000800  d9d0faf8          DCB      0xd9,0xd0,0xfa,0xf8
000804  f8f8f8db          DCB      0xf8,0xf8,0xf8,0xdb
000808  7df8d89c          DCB      0x7d,0xf8,0xd8,0x9c
00080c  a88cf530          DCB      0xa8,0x8c,0xf5,0x30
000810  db38d9d0          DCB      0xdb,0x38,0xd9,0xd0
000814  dedfa0d0          DCB      0xde,0xdf,0xa0,0xd0
000818  dedfd8a8          DCB      0xde,0xdf,0xd8,0xa8
00081c  48db58d9          DCB      0x48,0xdb,0x58,0xd9
000820  dfd0dea0          DCB      0xdf,0xd0,0xde,0xa0
000824  dfd0ded8          DCB      0xdf,0xd0,0xde,0xd8
000828  a868db70          DCB      0xa8,0x68,0xdb,0x70
00082c  d9dfdfa0          DCB      0xd9,0xdf,0xdf,0xa0
000830  dfdfd8f1          DCB      0xdf,0xdf,0xd8,0xf1
000834  a888902c          DCB      0xa8,0x88,0x90,0x2c
000838  547c98a8          DCB      0x54,0x7c,0x98,0xa8
00083c  d05c38d1          DCB      0xd0,0x5c,0x38,0xd1
000840  daf2ae8c          DCB      0xda,0xf2,0xae,0x8c
000844  dff9d8b0          DCB      0xdf,0xf9,0xd8,0xb0
000848  87a8c1c1          DCB      0x87,0xa8,0xc1,0xc1
00084c  b188a8c6          DCB      0xb1,0x88,0xa8,0xc6
000850  f9f9da36          DCB      0xf9,0xf9,0xda,0x36
000854  d8a8f9da          DCB      0xd8,0xa8,0xf9,0xda
000858  36d8a8f9          DCB      0x36,0xd8,0xa8,0xf9
00085c  da36d8a8          DCB      0xda,0x36,0xd8,0xa8
000860  f9da36d8          DCB      0xf9,0xda,0x36,0xd8
000864  a8f9da36          DCB      0xa8,0xf9,0xda,0x36
000868  d8f78d9d          DCB      0xd8,0xf7,0x8d,0x9d
00086c  adf818da          DCB      0xad,0xf8,0x18,0xda
000870  f2aedfd8          DCB      0xf2,0xae,0xdf,0xd8
000874  f7adfa30          DCB      0xf7,0xad,0xfa,0x30
000878  d9a4def9          DCB      0xd9,0xa4,0xde,0xf9
00087c  d8f2aede          DCB      0xd8,0xf2,0xae,0xde
000880  faf983a7          DCB      0xfa,0xf9,0x83,0xa7
000884  d9c3c5c7          DCB      0xd9,0xc3,0xc5,0xc7
000888  f1889ba7          DCB      0xf1,0x88,0x9b,0xa7
00088c  7aadf7de          DCB      0x7a,0xad,0xf7,0xde
000890  dfa4f884          DCB      0xdf,0xa4,0xf8,0x84
000894  9408a797          DCB      0x94,0x08,0xa7,0x97
000898  f300aef2          DCB      0xf3,0x00,0xae,0xf2
00089c  9819a488          DCB      0x98,0x19,0xa4,0x88
0008a0  c6a39488          DCB      0xc6,0xa3,0x94,0x88
0008a4  f632dff2          DCB      0xf6,0x32,0xdf,0xf2
0008a8  8393db09          DCB      0x83,0x93,0xdb,0x09
0008ac  d9f2aadf          DCB      0xd9,0xf2,0xaa,0xdf
0008b0  d8d8aef8          DCB      0xd8,0xd8,0xae,0xf8
0008b4  f9d1daf3          DCB      0xf9,0xd1,0xda,0xf3
0008b8  a4dea7f1          DCB      0xa4,0xde,0xa7,0xf1
0008bc  889b7ad8          DCB      0x88,0x9b,0x7a,0xd8
0008c0  f38494ae          DCB      0xf3,0x84,0x94,0xae
0008c4  19f9daaa          DCB      0x19,0xf9,0xda,0xaa
0008c8  f1dfd8a8          DCB      0xf1,0xdf,0xd8,0xa8
0008cc  81c0c3c5          DCB      0x81,0xc0,0xc3,0xc5
0008d0  c7a39283          DCB      0xc7,0xa3,0x92,0x83
0008d4  f628adde          DCB      0xf6,0x28,0xad,0xde
0008d8  d9f8d8a3          DCB      0xd9,0xf8,0xd8,0xa3
0008dc  50add9f8          DCB      0x50,0xad,0xd9,0xf8
0008e0  d8a378ad          DCB      0xd8,0xa3,0x78,0xad
0008e4  d9f8d8f8          DCB      0xd9,0xf8,0xd8,0xf8
0008e8  f9d1a1da          DCB      0xf9,0xd1,0xa1,0xda
0008ec  dec3c5c7          DCB      0xde,0xc3,0xc5,0xc7
0008f0  d8a18194          DCB      0xd8,0xa1,0x81,0x94
0008f4  f818f2b0          DCB      0xf8,0x18,0xf2,0xb0
0008f8  89acc3c5          DCB      0x89,0xac,0xc3,0xc5
0008fc  c7f1d8b8          DCB      0xc7,0xf1,0xd8,0xb8
000900  b4b09786          DCB      0xb4,0xb0,0x97,0x86
000904  a8319b06          DCB      0xa8,0x31,0x9b,0x06
000908  9907ab97          DCB      0x99,0x07,0xab,0x97
00090c  28889bf0          DCB      0x28,0x88,0x9b,0xf0
000910  0c201440          DCB      0x0c,0x20,0x14,0x40
000914  b0b4b8f0          DCB      0xb0,0xb4,0xb8,0xf0
000918  a88a9a28          DCB      0xa8,0x8a,0x9a,0x28
00091c  5078b79b          DCB      0x50,0x78,0xb7,0x9b
000920  a8295179          DCB      0xa8,0x29,0x51,0x79
000924  24705944          DCB      0x24,0x70,0x59,0x44
000928  69386448          DCB      0x69,0x38,0x64,0x48
00092c  31f1bbab          DCB      0x31,0xf1,0xbb,0xab
000930  88002c54          DCB      0x88,0x00,0x2c,0x54
000934  7cf0b38b          DCB      0x7c,0xf0,0xb3,0x8b
000938  b8a80428          DCB      0xb8,0xa8,0x04,0x28
00093c  5078f1b0          DCB      0x50,0x78,0xf1,0xb0
000940  88b49726          DCB      0x88,0xb4,0x97,0x26
000944  a85998bb          DCB      0xa8,0x59,0x98,0xbb
000948  abb38b02          DCB      0xab,0xb3,0x8b,0x02
00094c  264666b0          DCB      0x26,0x46,0x66,0xb0
000950  b8f08a9c          DCB      0xb8,0xf0,0x8a,0x9c
000954  a8295179          DCB      0xa8,0x29,0x51,0x79
000958  8b295179          DCB      0x8b,0x29,0x51,0x79
00095c  8a247059          DCB      0x8a,0x24,0x70,0x59
000960  8b205871          DCB      0x8b,0x20,0x58,0x71
000964  8a446938          DCB      0x8a,0x44,0x69,0x38
000968  8b394068          DCB      0x8b,0x39,0x40,0x68
00096c  8a644831          DCB      0x8a,0x64,0x48,0x31
000970  8b304960          DCB      0x8b,0x30,0x49,0x60
000974  88f1ac00          DCB      0x88,0xf1,0xac,0x00
000978  2c547cf0          DCB      0x2c,0x54,0x7c,0xf0
00097c  8ca80428          DCB      0x8c,0xa8,0x04,0x28
000980  5078f188          DCB      0x50,0x78,0xf1,0x88
000984  9726a859          DCB      0x97,0x26,0xa8,0x59
000988  98ac8c02          DCB      0x98,0xac,0x8c,0x02
00098c  264666f0          DCB      0x26,0x46,0x66,0xf0
000990  899ca829          DCB      0x89,0x9c,0xa8,0x29
000994  51792470          DCB      0x51,0x79,0x24,0x70
000998  59446938          DCB      0x59,0x44,0x69,0x38
00099c  644831a9          DCB      0x64,0x48,0x31,0xa9
0009a0  88092059          DCB      0x88,0x09,0x20,0x59
0009a4  70ab1138          DCB      0x70,0xab,0x11,0x38
0009a8  4069a819          DCB      0x40,0x69,0xa8,0x19
0009ac  3148608c          DCB      0x31,0x48,0x60,0x8c
0009b0  a83c415c          DCB      0xa8,0x3c,0x41,0x5c
0009b4  207c00f1          DCB      0x20,0x7c,0x00,0xf1
0009b8  87981986          DCB      0x87,0x98,0x19,0x86
0009bc  a86e767e          DCB      0xa8,0x6e,0x76,0x7e
0009c0  a999882d          DCB      0xa9,0x99,0x88,0x2d
0009c4  557dd8b1          DCB      0x55,0x7d,0xd8,0xb1
0009c8  b5b9a3df          DCB      0xb5,0xb9,0xa3,0xdf
0009cc  dfdfaed0          DCB      0xdf,0xdf,0xae,0xd0
0009d0  dfaad0de          DCB      0xdf,0xaa,0xd0,0xde
0009d4  f2abf8f9          DCB      0xf2,0xab,0xf8,0xf9
0009d8  d9b087c4          DCB      0xd9,0xb0,0x87,0xc4
0009dc  aaf1dfdf          DCB      0xaa,0xf1,0xdf,0xdf
0009e0  bbafdfdf          DCB      0xbb,0xaf,0xdf,0xdf
0009e4  b9d8b1f1          DCB      0xb9,0xd8,0xb1,0xf1
0009e8  a3978e60          DCB      0xa3,0x97,0x8e,0x60
0009ec  dfb084f2          DCB      0xdf,0xb0,0x84,0xf2
0009f0  c8f8f9d9          DCB      0xc8,0xf8,0xf9,0xd9
0009f4  ded89385          DCB      0xde,0xd8,0x93,0x85
0009f8  f14ab183          DCB      0xf1,0x4a,0xb1,0x83
0009fc  a308b583          DCB      0xa3,0x08,0xb5,0x83
000a00  9a0810b7          DCB      0x9a,0x08,0x10,0xb7
000a04  9f10d8f1          DCB      0x9f,0x10,0xd8,0xf1
000a08  b0baaeb0          DCB      0xb0,0xba,0xae,0xb0
000a0c  8ac2b2b6          DCB      0x8a,0xc2,0xb2,0xb6
000a10  8e9ef1fb          DCB      0x8e,0x9e,0xf1,0xfb
000a14  d9f41dd8          DCB      0xd9,0xf4,0x1d,0xd8
000a18  f9d90cf1          DCB      0xf9,0xd9,0x0c,0xf1
000a1c  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a20  61d9aefb          DCB      0x61,0xd9,0xae,0xfb
000a24  d8f40cf1          DCB      0xd8,0xf4,0x0c,0xf1
000a28  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a2c  19d9aefb          DCB      0x19,0xd9,0xae,0xfb
000a30  dfd8f416          DCB      0xdf,0xd8,0xf4,0x16
000a34  f1d8f8ad          DCB      0xf1,0xd8,0xf8,0xad
000a38  8d61d9f4          DCB      0x8d,0x61,0xd9,0xf4
000a3c  f4acf59c          DCB      0xf4,0xac,0xf5,0x9c
000a40  9c8ddf2b          DCB      0x9c,0x8d,0xdf,0x2b
000a44  bab6aefa          DCB      0xba,0xb6,0xae,0xfa
000a48  f8f40bd8          DCB      0xf8,0xf4,0x0b,0xd8
000a4c  f1aed0f8          DCB      0xf1,0xae,0xd0,0xf8
000a50  ad51daae          DCB      0xad,0x51,0xda,0xae
000a54  faf8f1d8          DCB      0xfa,0xf8,0xf1,0xd8
000a58  b9b1b6a3          DCB      0xb9,0xb1,0xb6,0xa3
000a5c  839c08b9          DCB      0x83,0x9c,0x08,0xb9
000a60  b1839ab5          DCB      0xb1,0x83,0x9a,0xb5
000a64  aac0fd30          DCB      0xaa,0xc0,0xfd,0x30
000a68  83b79f10          DCB      0x83,0xb7,0x9f,0x10
000a6c  b58b93f2          DCB      0xb5,0x8b,0x93,0xf2
000a70  0202d1ab          DCB      0x02,0x02,0xd1,0xab
000a74  daded8f1          DCB      0xda,0xde,0xd8,0xf1
000a78  b080baab          DCB      0xb0,0x80,0xba,0xab
000a7c  c0c3b284          DCB      0xc0,0xc3,0xb2,0x84
000a80  c1c3d8b1          DCB      0xc1,0xc3,0xd8,0xb1
000a84  b9f38ba3          DCB      0xb9,0xf3,0x8b,0xa3
000a88  91b609b4          DCB      0x91,0xb6,0x09,0xb4
000a8c  d9abdeb0          DCB      0xd9,0xab,0xde,0xb0
000a90  879cb9a3          DCB      0x87,0x9c,0xb9,0xa3
000a94  ddf1b38b          DCB      0xdd,0xf1,0xb3,0x8b
000a98  8b8b8b8b          DCB      0x8b,0x8b,0x8b,0x8b
000a9c  b087a3a3          DCB      0xb0,0x87,0xa3,0xa3
000aa0  a3a3b28b          DCB      0xa3,0xa3,0xb2,0x8b
000aa4  b69bf2a3          DCB      0xb6,0x9b,0xf2,0xa3
000aa8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000aac  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ab0  a3f1b087          DCB      0xa3,0xf1,0xb0,0x87
000ab4  b59aa3f3          DCB      0xb5,0x9a,0xa3,0xf3
000ab8  9ba3a3dc          DCB      0x9b,0xa3,0xa3,0xdc
000abc  baacdfb9          DCB      0xba,0xac,0xdf,0xb9
000ac0  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac4  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000acc  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ad0  d8d8d8bb          DCB      0xd8,0xd8,0xd8,0xbb
000ad4  b3b7f1aa          DCB      0xb3,0xb7,0xf1,0xaa
000ad8  f9daffd9          DCB      0xf9,0xda,0xff,0xd9
000adc  809aaa28          DCB      0x80,0x9a,0xaa,0x28
000ae0  b48098a7          DCB      0xb4,0x80,0x98,0xa7
000ae4  20b79787          DCB      0x20,0xb7,0x97,0x87
000ae8  a86688f0          DCB      0xa8,0x66,0x88,0xf0
000aec  7951f190          DCB      0x79,0x51,0xf1,0x90
000af0  2c870ca7          DCB      0x2c,0x87,0x0c,0xa7
000af4  81976293          DCB      0x81,0x97,0x62,0x93
000af8  f0717160          DCB      0xf0,0x71,0x71,0x60
000afc  85940129          DCB      0x85,0x94,0x01,0x29
000b00  517990a5          DCB      0x51,0x79,0x90,0xa5
000b04  f1284c6c          DCB      0xf1,0x28,0x4c,0x6c
000b08  870c9518          DCB      0x87,0x0c,0x95,0x18
000b0c  8578a383          DCB      0x85,0x78,0xa3,0x83
000b10  90284c6c          DCB      0x90,0x28,0x4c,0x6c
000b14  886cd8f3          DCB      0x88,0x6c,0xd8,0xf3
000b18  a28200f2          DCB      0xa2,0x82,0x00,0xf2
000b1c  10a89219          DCB      0x10,0xa8,0x92,0x19
000b20  80a2f2d9          DCB      0x80,0xa2,0xf2,0xd9
000b24  26d8f188          DCB      0x26,0xd8,0xf1,0x88
000b28  a84dd948          DCB      0xa8,0x4d,0xd9,0x48
000b2c  d896a839          DCB      0xd8,0x96,0xa8,0x39
000b30  80d93cd8          DCB      0x80,0xd9,0x3c,0xd8
000b34  9580a839          DCB      0x95,0x80,0xa8,0x39
000b38  a68698d9          DCB      0xa6,0x86,0x98,0xd9
000b3c  2cda87a7          DCB      0x2c,0xda,0x87,0xa7
000b40  2cd8a889          DCB      0x2c,0xd8,0xa8,0x89
000b44  9519a980          DCB      0x95,0x19,0xa9,0x80
000b48  d938d8a8          DCB      0xd9,0x38,0xd8,0xa8
000b4c  8939a980          DCB      0x89,0x39,0xa9,0x80
000b50  da3cd8a8          DCB      0xda,0x3c,0xd8,0xa8
000b54  2ea83990          DCB      0x2e,0xa8,0x39,0x90
000b58  d90cd8a8          DCB      0xd9,0x0c,0xd8,0xa8
000b5c  953198d9          DCB      0x95,0x31,0x98,0xd9
000b60  0cd8a809          DCB      0x0c,0xd8,0xa8,0x09
000b64  d9ffd801          DCB      0xd9,0xff,0xd8,0x01
000b68  daffd895          DCB      0xda,0xff,0xd8,0x95
000b6c  39a9da26          DCB      0x39,0xa9,0xda,0x26
000b70  ffd890a8          DCB      0xff,0xd8,0x90,0xa8
000b74  0d8999a8          DCB      0x0d,0x89,0x99,0xa8
000b78  10809821          DCB      0x10,0x80,0x98,0x21
000b7c  da2ed889          DCB      0xda,0x2e,0xd8,0x89
000b80  99a83180          DCB      0x99,0xa8,0x31,0x80
000b84  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b88  86963180          DCB      0x86,0x96,0x31,0x80
000b8c  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b90  873180da          DCB      0x87,0x31,0x80,0xda
000b94  2ed8a882          DCB      0x2e,0xd8,0xa8,0x82
000b98  92f34180          DCB      0x92,0xf3,0x41,0x80
000b9c  f1d92ed8          DCB      0xf1,0xd9,0x2e,0xd8
000ba0  a882f319          DCB      0xa8,0x82,0xf3,0x19
000ba4  80f1d92e          DCB      0x80,0xf1,0xd9,0x2e
000ba8  d882acf3          DCB      0xd8,0x82,0xac,0xf3
000bac  c0a28022          DCB      0xc0,0xa2,0x80,0x22
000bb0  f1a62ea7          DCB      0xf1,0xa6,0x2e,0xa7
000bb4  2ea92298          DCB      0x2e,0xa9,0x22,0x98
000bb8  a829daac          DCB      0xa8,0x29,0xda,0xac
000bbc  deffd8a2          DCB      0xde,0xff,0xd8,0xa2
000bc0  f22af1a9          DCB      0xf2,0x2a,0xf1,0xa9
000bc4  2e8292a8          DCB      0x2e,0x82,0x92,0xa8
000bc8  f23180a6          DCB      0xf2,0x31,0x80,0xa6
000bcc  96f1d900          DCB      0x96,0xf1,0xd9,0x00
000bd0  ac8c9c0c          DCB      0xac,0x8c,0x9c,0x0c
000bd4  30acded0          DCB      0x30,0xac,0xde,0xd0
000bd8  deffd88c          DCB      0xde,0xff,0xd8,0x8c
000bdc  9cacd010          DCB      0x9c,0xac,0xd0,0x10
000be0  acde8092          DCB      0xac,0xde,0x80,0x92
000be4  a2f24c82          DCB      0xa2,0xf2,0x4c,0x82
000be8  a8f1caf2          DCB      0xa8,0xf1,0xca,0xf2
000bec  35f19688          DCB      0x35,0xf1,0x96,0x88
000bf0  a6d900d8          DCB      0xa6,0xd9,0x00,0xd8
000bf4  f1ff              DCB      0xf1,0xff

; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\control.o --depend=..\OBJ\control.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\OLED -I..\HARDWARE\ADC -I..\HARDWARE\TIMER -I..\HARDWARE\MOTOR -I..\BALANCE\CONTROL -I..\HARDWARE\ENCODER -I..\HARDWARE\IIC -I..\BALANCE\CONTROL -I..\BALANCE\DMP -I..\BALANCE\filter -I..\BALANCE\MPU6050 -I..\BALANCE\show -I..\BALANCE\controls -I..\HARDWARE\USART3 -I..\HARDWARE\EXTI -I..\HARDWARE\DataScope_DP -I"H:\KEIL MDK4\ARM\INC" -I"H:\KEIL MDK4\ARM\INC\STMicroelectronics" -DSTM32F10X_MD --omf_browse=..\OBJ\control.crf ..\BALANCE\CONTROL\control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  myabs PROC
;;;238    **************************************************************************/
;;;239    int myabs(int a)
000000  4601              MOV      r1,r0
;;;240    { 		   
;;;241    	  int temp;
;;;242    		if(a<0)  temp=-a;  
000002  2900              CMP      r1,#0
000004  da01              BGE      |L1.10|
000006  4248              RSBS     r0,r1,#0
000008  e000              B        |L1.12|
                  |L1.10|
;;;243    	  else temp=a;
00000a  4608              MOV      r0,r1
                  |L1.12|
;;;244    	  return temp;
;;;245    }
00000c  4770              BX       lr
;;;246    /**************************************************************************
                          ENDP

                  Set_Pwm PROC
;;;134    **************************************************************************/
;;;135    void Set_Pwm(int moto1,int moto2)
00000e  b500              PUSH     {lr}
;;;136    {
000010  4603              MOV      r3,r0
000012  460a              MOV      r2,r1
;;;137        	if(moto1<0)			AIN2=1,			AIN1=0;
000014  2b00              CMP      r3,#0
000016  da08              BGE      |L1.42|
000018  2001              MOVS     r0,#1
00001a  49fc              LDR      r1,|L1.1036|
00001c  6008              STR      r0,[r1,#0]
00001e  f04f0000          MOV      r0,#0
000022  49fb              LDR      r1,|L1.1040|
000024  f8c101b8          STR      r0,[r1,#0x1b8]
000028  e007              B        |L1.58|
                  |L1.42|
;;;138    			else 	          AIN2=0,			AIN1=1;
00002a  2000              MOVS     r0,#0
00002c  49f7              LDR      r1,|L1.1036|
00002e  6008              STR      r0,[r1,#0]
000030  f04f0001          MOV      r0,#1
000034  49f6              LDR      r1,|L1.1040|
000036  f8c101b8          STR      r0,[r1,#0x1b8]
                  |L1.58|
;;;139    			PWMA=myabs(moto1);
00003a  4618              MOV      r0,r3
00003c  f7fffffe          BL       myabs
000040  49f4              LDR      r1,|L1.1044|
000042  8008              STRH     r0,[r1,#0]
;;;140    		  if(moto2<0)	BIN1=0,			BIN2=1;
000044  2a00              CMP      r2,#0
000046  da08              BGE      |L1.90|
000048  2000              MOVS     r0,#0
00004a  49f3              LDR      r1,|L1.1048|
00004c  6008              STR      r0,[r1,#0]
00004e  f04f0001          MOV      r0,#1
000052  49ef              LDR      r1,|L1.1040|
000054  f8c101b0          STR      r0,[r1,#0x1b0]
000058  e007              B        |L1.106|
                  |L1.90|
;;;141    			else        BIN1=1,			BIN2=0;
00005a  2001              MOVS     r0,#1
00005c  49ee              LDR      r1,|L1.1048|
00005e  6008              STR      r0,[r1,#0]
000060  f04f0000          MOV      r0,#0
000064  49ea              LDR      r1,|L1.1040|
000066  f8c101b0          STR      r0,[r1,#0x1b0]
                  |L1.106|
;;;142    			PWMB=myabs(moto2);	
00006a  4610              MOV      r0,r2
00006c  f7fffffe          BL       myabs
000070  49ea              LDR      r1,|L1.1052|
000072  8008              STRH     r0,[r1,#0]
;;;143    }
000074  bd00              POP      {pc}
;;;144    
                          ENDP

                  Turn_Off PROC
;;;180    **************************************************************************/
;;;181    u8 Turn_Off(float angle, int voltage)
000076  b570              PUSH     {r4-r6,lr}
;;;182    {
000078  4606              MOV      r6,r0
00007a  460d              MOV      r5,r1
;;;183    	    u8 temp;
;;;184    			if(angle<-40||angle>40||1==Flag_Stop||voltage<1110)//电池电压低于11.1V关闭电机
00007c  49e8              LDR      r1,|L1.1056|
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       __aeabi_cfcmple
000084  d30c              BCC      |L1.160|
000086  49e7              LDR      r1,|L1.1060|
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       __aeabi_cfrcmple
00008e  d307              BCC      |L1.160|
000090  48e5              LDR      r0,|L1.1064|
000092  7800              LDRB     r0,[r0,#0]  ; Flag_Stop
000094  2801              CMP      r0,#1
000096  d003              BEQ      |L1.160|
000098  f2404056          MOV      r0,#0x456
00009c  4285              CMP      r5,r0
00009e  da0c              BGE      |L1.186|
                  |L1.160|
;;;185    			{	                                                 //===倾角大于40度关闭电机
;;;186          temp=1;                                            //===Flag_Stop置1关闭电机
0000a0  2401              MOVS     r4,#1
;;;187    			AIN1=0;                                            
0000a2  2000              MOVS     r0,#0
0000a4  49e1              LDR      r1,|L1.1068|
0000a6  6008              STR      r0,[r1,#0]
;;;188    			AIN2=0;
0000a8  49d9              LDR      r1,|L1.1040|
0000aa  f8c101bc          STR      r0,[r1,#0x1bc]
;;;189    			BIN1=0;
0000ae  49da              LDR      r1,|L1.1048|
0000b0  6008              STR      r0,[r1,#0]
;;;190    			BIN2=0;
0000b2  49d7              LDR      r1,|L1.1040|
0000b4  f8c101b0          STR      r0,[r1,#0x1b0]
0000b8  e000              B        |L1.188|
                  |L1.186|
;;;191          }
;;;192    			else
;;;193          temp=0;
0000ba  2400              MOVS     r4,#0
                  |L1.188|
;;;194          return temp;			
0000bc  4620              MOV      r0,r4
;;;195    }
0000be  bd70              POP      {r4-r6,pc}
;;;196    	
                          ENDP

                  Put_Down PROC
;;;284    **************************************************************************/
;;;285    int Put_Down(float Angle,int encoder_left,int encoder_right)
0000c0  b570              PUSH     {r4-r6,lr}
;;;286    { 		   
0000c2  4606              MOV      r6,r0
0000c4  460c              MOV      r4,r1
0000c6  4615              MOV      r5,r2
;;;287    	 static u16 flag,count;	 
;;;288    	 if(Flag_Stop==0)                           //防止误检      
0000c8  48d7              LDR      r0,|L1.1064|
0000ca  7800              LDRB     r0,[r0,#0]  ; Flag_Stop
0000cc  b908              CBNZ     r0,|L1.210|
;;;289       return 0;	                 
0000ce  2000              MOVS     r0,#0
                  |L1.208|
;;;290    	 if(flag==0)                                               
;;;291    	 {
;;;292    	      if(Angle>(-10+ZHONGZHI)&&Angle<(10+ZHONGZHI)&&encoder_left==0&&encoder_right==0)         //条件1，小车是在0度附近的
;;;293    		    flag=1; 
;;;294    	 } 
;;;295    	 if(flag==1)                                               
;;;296    	 {
;;;297    		  if(++count>50)                                          //超时不再等待 500ms
;;;298    		  {
;;;299    				count=0;flag=0;
;;;300    		  }
;;;301    	    if(encoder_left>3&&encoder_right>3&&encoder_left<60&&encoder_right<60)                //条件2，小车的轮胎在未上电的时候被人为转动  
;;;302          {
;;;303    				flag=0;
;;;304    				flag=0;
;;;305    				return 1;                                             //检测到小车被放下
;;;306    			}
;;;307    	 }
;;;308    	return 0;
;;;309    }
0000d0  bd70              POP      {r4-r6,pc}
                  |L1.210|
0000d2  48d7              LDR      r0,|L1.1072|
0000d4  8800              LDRH     r0,[r0,#0]            ;290  ; flag
0000d6  b970              CBNZ     r0,|L1.246|
0000d8  49d6              LDR      r1,|L1.1076|
0000da  4630              MOV      r0,r6                 ;292
0000dc  f7fffffe          BL       __aeabi_cfrcmple
0000e0  d209              BCS      |L1.246|
0000e2  49d5              LDR      r1,|L1.1080|
0000e4  4630              MOV      r0,r6                 ;292
0000e6  f7fffffe          BL       __aeabi_cfcmple
0000ea  d204              BCS      |L1.246|
0000ec  b91c              CBNZ     r4,|L1.246|
0000ee  b915              CBNZ     r5,|L1.246|
0000f0  2001              MOVS     r0,#1                 ;293
0000f2  49cf              LDR      r1,|L1.1072|
0000f4  8008              STRH     r0,[r1,#0]            ;293
                  |L1.246|
0000f6  48ce              LDR      r0,|L1.1072|
0000f8  8800              LDRH     r0,[r0,#0]            ;295  ; flag
0000fa  2801              CMP      r0,#1                 ;295
0000fc  d119              BNE      |L1.306|
0000fe  48cf              LDR      r0,|L1.1084|
000100  8800              LDRH     r0,[r0,#0]            ;297  ; count
000102  1c40              ADDS     r0,r0,#1              ;297
000104  b280              UXTH     r0,r0                 ;297
000106  49cd              LDR      r1,|L1.1084|
000108  8008              STRH     r0,[r1,#0]            ;297
00010a  2832              CMP      r0,#0x32              ;297
00010c  dd03              BLE      |L1.278|
00010e  2000              MOVS     r0,#0                 ;299
000110  8008              STRH     r0,[r1,#0]            ;299
000112  49c7              LDR      r1,|L1.1072|
000114  8008              STRH     r0,[r1,#0]            ;299
                  |L1.278|
000116  2c03              CMP      r4,#3                 ;301
000118  dd0b              BLE      |L1.306|
00011a  2d03              CMP      r5,#3                 ;301
00011c  dd09              BLE      |L1.306|
00011e  2c3c              CMP      r4,#0x3c              ;301
000120  da07              BGE      |L1.306|
000122  2d3c              CMP      r5,#0x3c              ;301
000124  da05              BGE      |L1.306|
000126  2000              MOVS     r0,#0                 ;303
000128  49c1              LDR      r1,|L1.1072|
00012a  8008              STRH     r0,[r1,#0]            ;303
00012c  8008              STRH     r0,[r1,#0]            ;304
00012e  2001              MOVS     r0,#1                 ;305
000130  e7ce              B        |L1.208|
                  |L1.306|
000132  2000              MOVS     r0,#0                 ;308
000134  e7cc              B        |L1.208|
;;;310    
                          ENDP

                  Pick_Up PROC
;;;250    **************************************************************************/
;;;251    int Pick_Up(float Acceleration,float Angle,int encoder_left,int encoder_right)
000136  e92d41f0          PUSH     {r4-r8,lr}
;;;252    { 		   
00013a  4607              MOV      r7,r0
00013c  460e              MOV      r6,r1
00013e  4614              MOV      r4,r2
000140  461d              MOV      r5,r3
;;;253    	 static u16 flag,count0,count1,count2;
;;;254    	if(flag==0)                                                                   //第一步
000142  48bf              LDR      r0,|L1.1088|
000144  8800              LDRH     r0,[r0,#0]  ; flag
000146  b9e0              CBNZ     r0,|L1.386|
;;;255    	 {
;;;256    	      if(myabs(encoder_left)+myabs(encoder_right)<30)                         //条件1，小车接近静止
000148  4620              MOV      r0,r4
00014a  f7fffffe          BL       myabs
00014e  4602              MOV      r2,r0
000150  4628              MOV      r0,r5
000152  f7fffffe          BL       myabs
000156  4410              ADD      r0,r0,r2
000158  281e              CMP      r0,#0x1e
00015a  da05              BGE      |L1.360|
;;;257    				count0++;
00015c  48b9              LDR      r0,|L1.1092|
00015e  8800              LDRH     r0,[r0,#0]  ; count0
000160  1c40              ADDS     r0,r0,#1
000162  49b8              LDR      r1,|L1.1092|
000164  8008              STRH     r0,[r1,#0]
000166  e002              B        |L1.366|
                  |L1.360|
;;;258            else 
;;;259            count0=0;		
000168  2000              MOVS     r0,#0
00016a  49b6              LDR      r1,|L1.1092|
00016c  8008              STRH     r0,[r1,#0]
                  |L1.366|
;;;260            if(count0>10)				
00016e  48b5              LDR      r0,|L1.1092|
000170  8800              LDRH     r0,[r0,#0]  ; count0
000172  280a              CMP      r0,#0xa
000174  dd05              BLE      |L1.386|
;;;261    		    flag=1,count0=0; 
000176  2001              MOVS     r0,#1
000178  49b1              LDR      r1,|L1.1088|
00017a  8008              STRH     r0,[r1,#0]
00017c  2000              MOVS     r0,#0
00017e  49b1              LDR      r1,|L1.1092|
000180  8008              STRH     r0,[r1,#0]
                  |L1.386|
;;;262    	 } 
;;;263    	 if(flag==1)                                                                  //进入第二步
000182  48af              LDR      r0,|L1.1088|
000184  8800              LDRH     r0,[r0,#0]  ; flag
000186  2801              CMP      r0,#1
000188  d11d              BNE      |L1.454|
;;;264    	 {
;;;265    		    if(++count1>200)       count1=0,flag=0;                                 //超时不再等待2000ms
00018a  48af              LDR      r0,|L1.1096|
00018c  8800              LDRH     r0,[r0,#0]  ; count1
00018e  1c40              ADDS     r0,r0,#1
000190  b280              UXTH     r0,r0
000192  49ad              LDR      r1,|L1.1096|
000194  8008              STRH     r0,[r1,#0]
000196  28c8              CMP      r0,#0xc8
000198  dd03              BLE      |L1.418|
00019a  2000              MOVS     r0,#0
00019c  8008              STRH     r0,[r1,#0]
00019e  49a8              LDR      r1,|L1.1088|
0001a0  8008              STRH     r0,[r1,#0]
                  |L1.418|
;;;266    	      if(Acceleration>26000&&(Angle>(-20+ZHONGZHI))&&(Angle<(20+ZHONGZHI)))   //条件2，小车是在0度附近被拿起
0001a2  49aa              LDR      r1,|L1.1100|
0001a4  4638              MOV      r0,r7
0001a6  f7fffffe          BL       __aeabi_cfrcmple
0001aa  d20c              BCS      |L1.454|
0001ac  49a8              LDR      r1,|L1.1104|
0001ae  4630              MOV      r0,r6
0001b0  f7fffffe          BL       __aeabi_cfrcmple
0001b4  d207              BCS      |L1.454|
0001b6  49a7              LDR      r1,|L1.1108|
0001b8  4630              MOV      r0,r6
0001ba  f7fffffe          BL       __aeabi_cfcmple
0001be  d202              BCS      |L1.454|
;;;267    		    flag=2; 
0001c0  2002              MOVS     r0,#2
0001c2  499f              LDR      r1,|L1.1088|
0001c4  8008              STRH     r0,[r1,#0]
                  |L1.454|
;;;268    	 } 
;;;269    	 if(flag==2)                                                                  //第三步
0001c6  489e              LDR      r0,|L1.1088|
0001c8  8800              LDRH     r0,[r0,#0]  ; flag
0001ca  2802              CMP      r0,#2
0001cc  d116              BNE      |L1.508|
;;;270    	 {
;;;271    		  if(++count2>100)       count2=0,flag=0;                                   //超时不再等待1000ms
0001ce  48a2              LDR      r0,|L1.1112|
0001d0  8800              LDRH     r0,[r0,#0]  ; count2
0001d2  1c40              ADDS     r0,r0,#1
0001d4  b280              UXTH     r0,r0
0001d6  49a0              LDR      r1,|L1.1112|
0001d8  8008              STRH     r0,[r1,#0]
0001da  2864              CMP      r0,#0x64
0001dc  dd03              BLE      |L1.486|
0001de  2000              MOVS     r0,#0
0001e0  8008              STRH     r0,[r1,#0]
0001e2  4997              LDR      r1,|L1.1088|
0001e4  8008              STRH     r0,[r1,#0]
                  |L1.486|
;;;272    	    if(myabs(encoder_left+encoder_right)>135)                                 //条件3，小车的轮胎因为正反馈达到最大的转速   
0001e6  1960              ADDS     r0,r4,r5
0001e8  f7fffffe          BL       myabs
0001ec  2887              CMP      r0,#0x87
0001ee  dd05              BLE      |L1.508|
;;;273          {
;;;274    				flag=0;                                                                                     
0001f0  2000              MOVS     r0,#0
0001f2  4993              LDR      r1,|L1.1088|
0001f4  8008              STRH     r0,[r1,#0]
;;;275    				return 1;                                                               //检测到小车被拿起
0001f6  2001              MOVS     r0,#1
                  |L1.504|
;;;276    			}
;;;277    	 }
;;;278    	return 0;
;;;279    }
0001f8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.508|
0001fc  2000              MOVS     r0,#0                 ;278
0001fe  e7fb              B        |L1.504|
;;;280    /**************************************************************************
                          ENDP

                  Xianfu_Pwm PROC
;;;149    **************************************************************************/
;;;150    void Xianfu_Pwm(void)
000200  f64120f4          MOV      r0,#0x1af4
;;;151    {	
;;;152    	  int Amplitude=6900;    //===PWM满幅是7200 限制在6900
;;;153    	  if(Flag_Qian==1)  Moto1+=DIFFERENCE;  //DIFFERENCE是一个衡量平衡小车电机和机械安装差异的一个变量。直接作用于输出，让小车具有更好的一致性。
000204  4995              LDR      r1,|L1.1116|
000206  7809              LDRB     r1,[r1,#0]  ; Flag_Qian
000208  2901              CMP      r1,#1
00020a  d104              BNE      |L1.534|
00020c  4994              LDR      r1,|L1.1120|
00020e  6809              LDR      r1,[r1,#0]  ; Moto1
000210  3164              ADDS     r1,r1,#0x64
000212  4a93              LDR      r2,|L1.1120|
000214  6011              STR      r1,[r2,#0]  ; Moto1
                  |L1.534|
;;;154    	  if(Flag_Hou==1)   Moto2-=DIFFERENCE;
000216  4993              LDR      r1,|L1.1124|
000218  7809              LDRB     r1,[r1,#0]  ; Flag_Hou
00021a  2901              CMP      r1,#1
00021c  d104              BNE      |L1.552|
00021e  4992              LDR      r1,|L1.1128|
000220  6809              LDR      r1,[r1,#0]  ; Moto2
000222  3964              SUBS     r1,r1,#0x64
000224  4a90              LDR      r2,|L1.1128|
000226  6011              STR      r1,[r2,#0]  ; Moto2
                  |L1.552|
;;;155        if(Moto1<-Amplitude) Moto1=-Amplitude;	
000228  498d              LDR      r1,|L1.1120|
00022a  6809              LDR      r1,[r1,#0]  ; Moto1
00022c  4242              RSBS     r2,r0,#0
00022e  4291              CMP      r1,r2
000230  da02              BGE      |L1.568|
000232  4241              RSBS     r1,r0,#0
000234  4a8a              LDR      r2,|L1.1120|
000236  6011              STR      r1,[r2,#0]  ; Moto1
                  |L1.568|
;;;156    		if(Moto1>Amplitude)  Moto1=Amplitude;	
000238  4989              LDR      r1,|L1.1120|
00023a  6809              LDR      r1,[r1,#0]  ; Moto1
00023c  4281              CMP      r1,r0
00023e  dd01              BLE      |L1.580|
000240  4987              LDR      r1,|L1.1120|
000242  6008              STR      r0,[r1,#0]  ; Moto1
                  |L1.580|
;;;157    	  if(Moto2<-Amplitude) Moto2=-Amplitude;	
000244  4988              LDR      r1,|L1.1128|
000246  6809              LDR      r1,[r1,#0]  ; Moto2
000248  4242              RSBS     r2,r0,#0
00024a  4291              CMP      r1,r2
00024c  da02              BGE      |L1.596|
00024e  4241              RSBS     r1,r0,#0
000250  4a85              LDR      r2,|L1.1128|
000252  6011              STR      r1,[r2,#0]  ; Moto2
                  |L1.596|
;;;158    		if(Moto2>Amplitude)  Moto2=Amplitude;		
000254  4984              LDR      r1,|L1.1128|
000256  6809              LDR      r1,[r1,#0]  ; Moto2
000258  4281              CMP      r1,r0
00025a  dd01              BLE      |L1.608|
00025c  4982              LDR      r1,|L1.1128|
00025e  6008              STR      r0,[r1,#0]  ; Moto2
                  |L1.608|
;;;159    	
;;;160    }
000260  4770              BX       lr
;;;161    /**************************************************************************
                          ENDP

                  turn PROC
;;;98     **************************************************************************/
;;;99     int turn(int encoder_left,int encoder_right,float gyro)//转向控制
000262  e92d4ff8          PUSH     {r3-r11,lr}
;;;100    {
000266  4607              MOV      r7,r0
000268  4688              MOV      r8,r1
00026a  4691              MOV      r9,r2
;;;101    	 static float Turn_Target,Turn,Encoder_temp,Turn_Convert=0.9,Turn_Count;
;;;102    	  float Turn_Amplitude=88/Flag_sudu,Kp=45,Kd=0;     
00026c  487f              LDR      r0,|L1.1132|
00026e  7800              LDRB     r0,[r0,#0]  ; Flag_sudu
000270  2158              MOVS     r1,#0x58
000272  fb91f4f0          SDIV     r4,r1,r0
000276  4620              MOV      r0,r4
000278  f7fffffe          BL       __aeabi_i2f
00027c  4606              MOV      r6,r0
00027e  f8dfa1f0          LDR      r10,|L1.1136|
000282  f04f0b00          MOV      r11,#0
;;;103    	  //=============遥控左右旋转部分=======================//
;;;104      	if(1==Flag_Left||1==Flag_Right)                      //根据旋转前的速度调整速度的起始速度
000286  487b              LDR      r0,|L1.1140|
000288  7800              LDRB     r0,[r0,#0]  ; Flag_Left
00028a  2801              CMP      r0,#1
00028c  d003              BEQ      |L1.662|
00028e  487a              LDR      r0,|L1.1144|
000290  7800              LDRB     r0,[r0,#0]  ; Flag_Right
000292  2801              CMP      r0,#1
000294  d135              BNE      |L1.770|
                  |L1.662|
;;;105    		{
;;;106    			if(++Turn_Count==1)
000296  f04f517e          MOV      r1,#0x3f800000
00029a  4878              LDR      r0,|L1.1148|
00029c  6800              LDR      r0,[r0,#0]  ; Turn_Count
00029e  f7fffffe          BL       __aeabi_fadd
0002a2  4976              LDR      r1,|L1.1148|
0002a4  4604              MOV      r4,r0
0002a6  6008              STR      r0,[r1,#0]  ; Turn_Count
0002a8  f04f517e          MOV      r1,#0x3f800000
0002ac  f7fffffe          BL       __aeabi_cfcmpeq
0002b0  d108              BNE      |L1.708|
;;;107    			Encoder_temp=myabs(encoder_left+encoder_right);
0002b2  eb070008          ADD      r0,r7,r8
0002b6  f7fffffe          BL       myabs
0002ba  4604              MOV      r4,r0
0002bc  f7fffffe          BL       __aeabi_i2f
0002c0  496f              LDR      r1,|L1.1152|
0002c2  6008              STR      r0,[r1,#0]  ; Encoder_temp
                  |L1.708|
;;;108    			Turn_Convert=50/Encoder_temp;
0002c4  486e              LDR      r0,|L1.1152|
0002c6  6801              LDR      r1,[r0,#0]  ; Encoder_temp
0002c8  486e              LDR      r0,|L1.1156|
0002ca  f7fffffe          BL       __aeabi_fdiv
0002ce  496e              LDR      r1,|L1.1160|
0002d0  6008              STR      r0,[r1,#0]  ; Turn_Convert
;;;109    			if(Turn_Convert<0.6)Turn_Convert=0.6;
0002d2  4608              MOV      r0,r1
0002d4  6800              LDR      r0,[r0,#0]  ; Turn_Convert
0002d6  f7fffffe          BL       __aeabi_f2d
0002da  4604              MOV      r4,r0
0002dc  f04f3233          MOV      r2,#0x33333333
0002e0  4b6a              LDR      r3,|L1.1164|
0002e2  f7fffffe          BL       __aeabi_cdcmple
0002e6  d202              BCS      |L1.750|
0002e8  4869              LDR      r0,|L1.1168|
0002ea  4967              LDR      r1,|L1.1160|
0002ec  6008              STR      r0,[r1,#0]  ; Turn_Convert
                  |L1.750|
;;;110    			if(Turn_Convert>3)Turn_Convert=3;
0002ee  4969              LDR      r1,|L1.1172|
0002f0  4865              LDR      r0,|L1.1160|
0002f2  6800              LDR      r0,[r0,#0]  ; Turn_Convert
0002f4  f7fffffe          BL       __aeabi_cfrcmple
0002f8  d20b              BCS      |L1.786|
0002fa  4866              LDR      r0,|L1.1172|
0002fc  4962              LDR      r1,|L1.1160|
0002fe  6008              STR      r0,[r1,#0]  ; Turn_Convert
000300  e007              B        |L1.786|
                  |L1.770|
;;;111    		}	
;;;112    	  else
;;;113    		{
;;;114    			Turn_Convert=0.9;
000302  4865              LDR      r0,|L1.1176|
000304  4960              LDR      r1,|L1.1160|
000306  6008              STR      r0,[r1,#0]  ; Turn_Convert
;;;115    			Turn_Count=0;
000308  2000              MOVS     r0,#0
00030a  495c              LDR      r1,|L1.1148|
00030c  6008              STR      r0,[r1,#0]  ; Turn_Count
;;;116    			Encoder_temp=0;
00030e  495c              LDR      r1,|L1.1152|
000310  6008              STR      r0,[r1,#0]  ; Encoder_temp
                  |L1.786|
;;;117    		}			
;;;118    		if(1==Flag_Left)	           Turn_Target-=Turn_Convert;
000312  4858              LDR      r0,|L1.1140|
000314  7800              LDRB     r0,[r0,#0]  ; Flag_Left
000316  2801              CMP      r0,#1
000318  d108              BNE      |L1.812|
00031a  485b              LDR      r0,|L1.1160|
00031c  6801              LDR      r1,[r0,#0]  ; Turn_Convert
00031e  485f              LDR      r0,|L1.1180|
000320  6800              LDR      r0,[r0,#0]  ; Turn_Target
000322  f7fffffe          BL       __aeabi_fsub
000326  495d              LDR      r1,|L1.1180|
000328  6008              STR      r0,[r1,#0]  ; Turn_Target
00032a  e00f              B        |L1.844|
                  |L1.812|
;;;119    		else if(1==Flag_Right)	     Turn_Target+=Turn_Convert; 
00032c  4852              LDR      r0,|L1.1144|
00032e  7800              LDRB     r0,[r0,#0]  ; Flag_Right
000330  2801              CMP      r0,#1
000332  d108              BNE      |L1.838|
000334  4854              LDR      r0,|L1.1160|
000336  6801              LDR      r1,[r0,#0]  ; Turn_Convert
000338  4858              LDR      r0,|L1.1180|
00033a  6800              LDR      r0,[r0,#0]  ; Turn_Target
00033c  f7fffffe          BL       __aeabi_fadd
000340  4956              LDR      r1,|L1.1180|
000342  6008              STR      r0,[r1,#0]  ; Turn_Target
000344  e002              B        |L1.844|
                  |L1.838|
;;;120    		else Turn_Target=0;
000346  2000              MOVS     r0,#0
000348  4954              LDR      r1,|L1.1180|
00034a  6008              STR      r0,[r1,#0]  ; Turn_Target
                  |L1.844|
;;;121        if(Turn_Target>Turn_Amplitude)  Turn_Target=Turn_Amplitude;    //===转向速度限幅
00034c  4631              MOV      r1,r6
00034e  4853              LDR      r0,|L1.1180|
000350  6800              LDR      r0,[r0,#0]  ; Turn_Target
000352  f7fffffe          BL       __aeabi_cfrcmple
000356  d201              BCS      |L1.860|
000358  4850              LDR      r0,|L1.1180|
00035a  6006              STR      r6,[r0,#0]  ; Turn_Target
                  |L1.860|
;;;122    	  if(Turn_Target<-Turn_Amplitude) Turn_Target=-Turn_Amplitude;
00035c  f0864400          EOR      r4,r6,#0x80000000
000360  484e              LDR      r0,|L1.1180|
000362  6801              LDR      r1,[r0,#0]  ; Turn_Target
000364  4620              MOV      r0,r4
000366  f7fffffe          BL       __aeabi_cfrcmple
00036a  d203              BCS      |L1.884|
00036c  f0864000          EOR      r0,r6,#0x80000000
000370  494a              LDR      r1,|L1.1180|
000372  6008              STR      r0,[r1,#0]  ; Turn_Target
                  |L1.884|
;;;123    		if(Flag_Qian==1||Flag_Hou==1)  Kd=0.5;        
000374  4839              LDR      r0,|L1.1116|
000376  7800              LDRB     r0,[r0,#0]  ; Flag_Qian
000378  2801              CMP      r0,#1
00037a  d003              BEQ      |L1.900|
00037c  4839              LDR      r0,|L1.1124|
00037e  7800              LDRB     r0,[r0,#0]  ; Flag_Hou
000380  2801              CMP      r0,#1
000382  d102              BNE      |L1.906|
                  |L1.900|
000384  f04f5b7c          MOV      r11,#0x3f000000
000388  e001              B        |L1.910|
                  |L1.906|
;;;124    		else Kd=0;   //转向的时候取消陀螺仪的纠正
00038a  f04f0b00          MOV      r11,#0
                  |L1.910|
;;;125      	//=============转向PD控制器=======================//
;;;126    		Turn=-Turn_Target*Kp -gyro*Kd;                 //===结合Z轴陀螺仪进行PD控制
00038e  4659              MOV      r1,r11
000390  4648              MOV      r0,r9
000392  f7fffffe          BL       __aeabi_fmul
000396  9000              STR      r0,[sp,#0]
000398  4840              LDR      r0,|L1.1180|
00039a  6800              LDR      r0,[r0,#0]  ; Turn_Target
00039c  f0804500          EOR      r5,r0,#0x80000000
0003a0  4651              MOV      r1,r10
0003a2  4628              MOV      r0,r5
0003a4  f7fffffe          BL       __aeabi_fmul
0003a8  4604              MOV      r4,r0
0003aa  9900              LDR      r1,[sp,#0]
0003ac  f7fffffe          BL       __aeabi_fsub
0003b0  493b              LDR      r1,|L1.1184|
0003b2  6008              STR      r0,[r1,#0]  ; Turn
;;;127    	  return Turn;
0003b4  4608              MOV      r0,r1
0003b6  6800              LDR      r0,[r0,#0]  ; Turn
0003b8  f7fffffe          BL       __aeabi_f2iz
;;;128    }
0003bc  e8bd8ff8          POP      {r3-r11,pc}
;;;129    
                          ENDP

                  velocity PROC
;;;67     **************************************************************************/
;;;68     int velocity(int encoder_left,int encoder_right)
0003c0  e92d5ffc          PUSH     {r2-r12,lr}
;;;69     {  
;;;70          static float Velocity,Encoder_Least,Encoder,Movement;
;;;71     	  static float Encoder_Integral,Target_Velocity;
;;;72     	  float kp=80,ki=0.4;
0003c4  4837              LDR      r0,|L1.1188|
0003c6  9001              STR      r0,[sp,#4]
0003c8  4837              LDR      r0,|L1.1192|
0003ca  9000              STR      r0,[sp,#0]
;;;73     	  //=============遥控前进后退部分=======================// 
;;;74     	  if(Bi_zhang==1&&Flag_sudu==1)  Target_Velocity=45;                 //如果进入避障模式,自动进入低速模式
0003cc  4837              LDR      r0,|L1.1196|
0003ce  7800              LDRB     r0,[r0,#0]  ; Bi_zhang
0003d0  2801              CMP      r0,#1
0003d2  d107              BNE      |L1.996|
0003d4  4825              LDR      r0,|L1.1132|
0003d6  7800              LDRB     r0,[r0,#0]  ; Flag_sudu
0003d8  2801              CMP      r0,#1
0003da  d103              BNE      |L1.996|
0003dc  4824              LDR      r0,|L1.1136|
0003de  4934              LDR      r1,|L1.1200|
0003e0  6008              STR      r0,[r1,#0]  ; Target_Velocity
0003e2  e002              B        |L1.1002|
                  |L1.996|
;;;75         else 	                         Target_Velocity=110;                 
0003e4  4833              LDR      r0,|L1.1204|
0003e6  4932              LDR      r1,|L1.1200|
0003e8  6008              STR      r0,[r1,#0]  ; Target_Velocity
                  |L1.1002|
;;;76     		if(1==Flag_Qian)    	Movement=Target_Velocity/Flag_sudu;	         //===前进标志位置1 
0003ea  481c              LDR      r0,|L1.1116|
0003ec  7800              LDRB     r0,[r0,#0]  ; Flag_Qian
0003ee  2801              CMP      r0,#1
0003f0  d164              BNE      |L1.1212|
0003f2  481e              LDR      r0,|L1.1132|
0003f4  7800              LDRB     r0,[r0,#0]  ; Flag_sudu
0003f6  f7fffffe          BL       __aeabi_ui2f
0003fa  4604              MOV      r4,r0
0003fc  4601              MOV      r1,r0
0003fe  482c              LDR      r0,|L1.1200|
000400  6800              LDR      r0,[r0,#0]  ; Target_Velocity
000402  f7fffffe          BL       __aeabi_fdiv
000406  492c              LDR      r1,|L1.1208|
000408  6008              STR      r0,[r1,#0]  ; Movement
00040a  e06e              B        |L1.1258|
                  |L1.1036|
                          DCD      0x422181bc
                  |L1.1040|
                          DCD      0x42218000
                  |L1.1044|
                          DCD      0x40012c34
                  |L1.1048|
                          DCD      0x422181b4
                  |L1.1052|
                          DCD      0x40012c40
                  |L1.1056|
                          DCD      0xc2200000
                  |L1.1060|
                          DCD      0x42200000
                  |L1.1064|
                          DCD      Flag_Stop
                  |L1.1068|
                          DCD      0x422181b8
                  |L1.1072|
                          DCD      |symbol_number.26|
                  |L1.1076|
                          DCD      0xc0e00000
                  |L1.1080|
                          DCD      0x41500000
                  |L1.1084|
                          DCD      count
                  |L1.1088|
                          DCD      flag
                  |L1.1092|
                          DCD      count0
                  |L1.1096|
                          DCD      count1
                  |L1.1100|
                          DCD      0x46cb2000
                  |L1.1104|
                          DCD      0xc1880000
                  |L1.1108|
                          DCD      0x41b80000
                  |L1.1112|
                          DCD      count2
                  |L1.1116|
                          DCD      Flag_Qian
                  |L1.1120|
                          DCD      Moto1
                  |L1.1124|
                          DCD      Flag_Hou
                  |L1.1128|
                          DCD      Moto2
                  |L1.1132|
                          DCD      Flag_sudu
                  |L1.1136|
                          DCD      0x42340000
                  |L1.1140|
                          DCD      Flag_Left
                  |L1.1144|
                          DCD      Flag_Right
                  |L1.1148|
                          DCD      Turn_Count
                  |L1.1152|
                          DCD      Encoder_temp
                  |L1.1156|
                          DCD      0x42480000
                  |L1.1160|
                          DCD      Turn_Convert
                  |L1.1164|
                          DCD      0x3fe33333
                  |L1.1168|
                          DCD      0x3f19999a
                  |L1.1172|
                          DCD      0x40400000
                  |L1.1176|
                          DCD      0x3f666666
                  |L1.1180|
                          DCD      Turn_Target
                  |L1.1184|
                          DCD      Turn
                  |L1.1188|
                          DCD      0x42a00000
                  |L1.1192|
                          DCD      0x3ecccccd
                  |L1.1196|
                          DCD      Bi_zhang
                  |L1.1200|
                          DCD      Target_Velocity
                  |L1.1204|
                          DCD      0x42dc0000
                  |L1.1208|
                          DCD      Movement
                  |L1.1212|
;;;77     		else if(1==Flag_Hou)	Movement=-Target_Velocity/Flag_sudu;         //===后退标志位置1
0004bc  48ff              LDR      r0,|L1.2236|
0004be  7800              LDRB     r0,[r0,#0]  ; Flag_Hou
0004c0  2801              CMP      r0,#1
0004c2  d10f              BNE      |L1.1252|
0004c4  48fe              LDR      r0,|L1.2240|
0004c6  7800              LDRB     r0,[r0,#0]  ; Flag_sudu
0004c8  f7fffffe          BL       __aeabi_ui2f
0004cc  4605              MOV      r5,r0
0004ce  48fd              LDR      r0,|L1.2244|
0004d0  6800              LDR      r0,[r0,#0]  ; Target_Velocity
0004d2  f0804400          EOR      r4,r0,#0x80000000
0004d6  4629              MOV      r1,r5
0004d8  4620              MOV      r0,r4
0004da  f7fffffe          BL       __aeabi_fdiv
0004de  49fa              LDR      r1,|L1.2248|
0004e0  6008              STR      r0,[r1,#0]  ; Movement
0004e2  e002              B        |L1.1258|
                  |L1.1252|
;;;78     	  else  Movement=0;	
0004e4  2000              MOVS     r0,#0
0004e6  49f8              LDR      r1,|L1.2248|
0004e8  6008              STR      r0,[r1,#0]  ; Movement
                  |L1.1258|
;;;79     	  if(Bi_zhang==1&&Distance<500&&Flag_Left!=1&&Flag_Right!=1)        //避障标志位置1且非遥控转弯的时候，进入避障模式
0004ea  48f8              LDR      r0,|L1.2252|
0004ec  7800              LDRB     r0,[r0,#0]  ; Bi_zhang
0004ee  2801              CMP      r0,#1
0004f0  d11b              BNE      |L1.1322|
0004f2  48f7              LDR      r0,|L1.2256|
0004f4  6800              LDR      r0,[r0,#0]  ; Distance
0004f6  f5b07ffa          CMP      r0,#0x1f4
0004fa  d216              BCS      |L1.1322|
0004fc  48f5              LDR      r0,|L1.2260|
0004fe  7800              LDRB     r0,[r0,#0]  ; Flag_Left
000500  2801              CMP      r0,#1
000502  d012              BEQ      |L1.1322|
000504  48f4              LDR      r0,|L1.2264|
000506  7800              LDRB     r0,[r0,#0]  ; Flag_Right
000508  2801              CMP      r0,#1
00050a  d00e              BEQ      |L1.1322|
;;;80     	  Movement=-Target_Velocity/Flag_sudu;
00050c  48ec              LDR      r0,|L1.2240|
00050e  7800              LDRB     r0,[r0,#0]  ; Flag_sudu
000510  f7fffffe          BL       __aeabi_ui2f
000514  4605              MOV      r5,r0
000516  48eb              LDR      r0,|L1.2244|
000518  6800              LDR      r0,[r0,#0]  ; Target_Velocity
00051a  f0804400          EOR      r4,r0,#0x80000000
00051e  4629              MOV      r1,r5
000520  4620              MOV      r0,r4
000522  f7fffffe          BL       __aeabi_fdiv
000526  49e8              LDR      r1,|L1.2248|
000528  6008              STR      r0,[r1,#0]  ; Movement
                  |L1.1322|
;;;81        //=============速度PI控制器=======================//	
;;;82     		Encoder_Least =(Encoder_Left+Encoder_Right)-0;                    //===获取最新速度偏差==测量速度（左右编码器之和）-目标速度（此处为零） 
00052a  49ec              LDR      r1,|L1.2268|
00052c  6809              LDR      r1,[r1,#0]  ; Encoder_Left
00052e  4aec              LDR      r2,|L1.2272|
000530  6812              LDR      r2,[r2,#0]  ; Encoder_Right
000532  4411              ADD      r1,r1,r2
000534  4608              MOV      r0,r1
000536  f7fffffe          BL       __aeabi_i2f
00053a  49ea              LDR      r1,|L1.2276|
00053c  6008              STR      r0,[r1,#0]  ; Encoder_Least
;;;83     		Encoder *= 0.8;		                                                //===一阶低通滤波器       
00053e  48ea              LDR      r0,|L1.2280|
000540  6800              LDR      r0,[r0,#0]  ; Encoder
000542  f7fffffe          BL       __aeabi_f2d
000546  4606              MOV      r6,r0
000548  4ae8              LDR      r2,|L1.2284|
00054a  4be9              LDR      r3,|L1.2288|
00054c  f7fffffe          BL       __aeabi_dmul
000550  4604              MOV      r4,r0
000552  f7fffffe          BL       __aeabi_d2f
000556  49e4              LDR      r1,|L1.2280|
000558  6008              STR      r0,[r1,#0]  ; Encoder
;;;84     		Encoder += Encoder_Least*0.2;	                                    //===一阶低通滤波器    
00055a  48e2              LDR      r0,|L1.2276|
00055c  6800              LDR      r0,[r0,#0]  ; Encoder_Least
00055e  f7fffffe          BL       __aeabi_f2d
000562  4604              MOV      r4,r0
000564  4ae1              LDR      r2,|L1.2284|
000566  4be3              LDR      r3,|L1.2292|
000568  f7fffffe          BL       __aeabi_dmul
00056c  4606              MOV      r6,r0
00056e  460f              MOV      r7,r1
000570  48dd              LDR      r0,|L1.2280|
000572  6800              LDR      r0,[r0,#0]  ; Encoder
000574  f7fffffe          BL       __aeabi_f2d
000578  4680              MOV      r8,r0
00057a  4632              MOV      r2,r6
00057c  463b              MOV      r3,r7
00057e  f7fffffe          BL       __aeabi_dadd
000582  4682              MOV      r10,r0
000584  f7fffffe          BL       __aeabi_d2f
000588  49d7              LDR      r1,|L1.2280|
00058a  6008              STR      r0,[r1,#0]  ; Encoder
;;;85     		Encoder_Integral +=Encoder;                                       //===积分出位移 积分时间：10ms
00058c  4608              MOV      r0,r1
00058e  6801              LDR      r1,[r0,#0]  ; Encoder
000590  48d9              LDR      r0,|L1.2296|
000592  6800              LDR      r0,[r0,#0]  ; Encoder_Integral
000594  f7fffffe          BL       __aeabi_fadd
000598  49d7              LDR      r1,|L1.2296|
00059a  6008              STR      r0,[r1,#0]  ; Encoder_Integral
;;;86     		Encoder_Integral=Encoder_Integral-Movement;                       //===接收遥控器数据，控制前进后退
00059c  48ca              LDR      r0,|L1.2248|
00059e  6801              LDR      r1,[r0,#0]  ; Movement
0005a0  48d5              LDR      r0,|L1.2296|
0005a2  6800              LDR      r0,[r0,#0]  ; Encoder_Integral
0005a4  f7fffffe          BL       __aeabi_fsub
0005a8  49d3              LDR      r1,|L1.2296|
0005aa  6008              STR      r0,[r1,#0]  ; Encoder_Integral
;;;87     		if(Encoder_Integral>10000)  	Encoder_Integral=10000;             //===积分限幅
0005ac  49d3              LDR      r1,|L1.2300|
0005ae  48d2              LDR      r0,|L1.2296|
0005b0  6800              LDR      r0,[r0,#0]  ; Encoder_Integral
0005b2  f7fffffe          BL       __aeabi_cfrcmple
0005b6  d202              BCS      |L1.1470|
0005b8  48d0              LDR      r0,|L1.2300|
0005ba  49cf              LDR      r1,|L1.2296|
0005bc  6008              STR      r0,[r1,#0]  ; Encoder_Integral
                  |L1.1470|
;;;88     		if(Encoder_Integral<-10000)	Encoder_Integral=-10000;              //===积分限幅	
0005be  49d0              LDR      r1,|L1.2304|
0005c0  48cd              LDR      r0,|L1.2296|
0005c2  6800              LDR      r0,[r0,#0]  ; Encoder_Integral
0005c4  f7fffffe          BL       __aeabi_cfcmple
0005c8  d202              BCS      |L1.1488|
0005ca  48cd              LDR      r0,|L1.2304|
0005cc  49ca              LDR      r1,|L1.2296|
0005ce  6008              STR      r0,[r1,#0]  ; Encoder_Integral
                  |L1.1488|
;;;89     		Velocity=Encoder*kp+Encoder_Integral*ki;                          //===速度控制	
0005d0  48c9              LDR      r0,|L1.2296|
0005d2  9900              LDR      r1,[sp,#0]
0005d4  6800              LDR      r0,[r0,#0]  ; Encoder_Integral
0005d6  f7fffffe          BL       __aeabi_fmul
0005da  4604              MOV      r4,r0
0005dc  48c2              LDR      r0,|L1.2280|
0005de  9901              LDR      r1,[sp,#4]
0005e0  6800              LDR      r0,[r0,#0]  ; Encoder
0005e2  f7fffffe          BL       __aeabi_fmul
0005e6  4605              MOV      r5,r0
0005e8  4621              MOV      r1,r4
0005ea  f7fffffe          BL       __aeabi_fadd
0005ee  49c5              LDR      r1,|L1.2308|
0005f0  6008              STR      r0,[r1,#0]  ; Velocity
;;;90     		if(Turn_Off(Angle_Balance,Voltage)==1||Flag_Stop==1)   Encoder_Integral=0;      //===电机关闭后清除积分
0005f2  48c5              LDR      r0,|L1.2312|
0005f4  6801              LDR      r1,[r0,#0]  ; Voltage
0005f6  48c5              LDR      r0,|L1.2316|
0005f8  6800              LDR      r0,[r0,#0]  ; Angle_Balance
0005fa  f7fffffe          BL       Turn_Off
0005fe  2801              CMP      r0,#1
000600  d003              BEQ      |L1.1546|
000602  48c3              LDR      r0,|L1.2320|
000604  7800              LDRB     r0,[r0,#0]  ; Flag_Stop
000606  2801              CMP      r0,#1
000608  d102              BNE      |L1.1552|
                  |L1.1546|
00060a  2000              MOVS     r0,#0
00060c  49ba              LDR      r1,|L1.2296|
00060e  6008              STR      r0,[r1,#0]  ; Encoder_Integral
                  |L1.1552|
;;;91     	  return Velocity;
000610  48bc              LDR      r0,|L1.2308|
000612  6800              LDR      r0,[r0,#0]  ; Velocity
000614  f7fffffe          BL       __aeabi_f2iz
;;;92     }
000618  e8bd9ffc          POP      {r2-r12,pc}
;;;93     
                          ENDP

                  balance PROC
;;;53     **************************************************************************/
;;;54     int balance(float Angle,float Gyro)
00061c  e92d4ff8          PUSH     {r3-r11,lr}
;;;55     {  
000620  4605              MOV      r5,r0
000622  460c              MOV      r4,r1
;;;56        float Bias,kp=300,kd=1;
000624  4ebb              LDR      r6,|L1.2324|
000626  f04f577e          MOV      r7,#0x3f800000
;;;57     	 int balance;
;;;58     	 Bias=Angle-ZHONGZHI;       //===求出平衡的角度中值 和机械相关
00062a  49bb              LDR      r1,|L1.2328|
00062c  4628              MOV      r0,r5
00062e  f7fffffe          BL       __aeabi_fsub
000632  9000              STR      r0,[sp,#0]
;;;59     	 balance=kp*Bias+Gyro*kd;   //===计算平衡控制的电机PWM  PD控制    
000634  4639              MOV      r1,r7
000636  4620              MOV      r0,r4
000638  f7fffffe          BL       __aeabi_fmul
00063c  4682              MOV      r10,r0
00063e  4630              MOV      r0,r6
000640  9900              LDR      r1,[sp,#0]
000642  f7fffffe          BL       __aeabi_fmul
000646  4683              MOV      r11,r0
000648  4651              MOV      r1,r10
00064a  f7fffffe          BL       __aeabi_fadd
00064e  4681              MOV      r9,r0
000650  f7fffffe          BL       __aeabi_f2iz
000654  4680              MOV      r8,r0
;;;60     	 return balance;
000656  4640              MOV      r0,r8
;;;61     }
000658  e8bd8ff8          POP      {r3-r11,pc}
;;;62     
                          ENDP

                  Key PROC
;;;165    **************************************************************************/
;;;166    void Key(void)
00065c  b570              PUSH     {r4-r6,lr}
;;;167    {	
;;;168    	u8 tmp,tmp2;
;;;169    	tmp=click_N_Double(50); 
00065e  2032              MOVS     r0,#0x32
000660  f7fffffe          BL       click_N_Double
000664  4605              MOV      r5,r0
;;;170    	if(tmp==1)Flag_Stop=!Flag_Stop;//单击控制小车的启停
000666  2d01              CMP      r5,#1
000668  d107              BNE      |L1.1658|
00066a  48a9              LDR      r0,|L1.2320|
00066c  7800              LDRB     r0,[r0,#0]  ; Flag_Stop
00066e  b908              CBNZ     r0,|L1.1652|
000670  2001              MOVS     r0,#1
000672  e000              B        |L1.1654|
                  |L1.1652|
000674  2000              MOVS     r0,#0
                  |L1.1654|
000676  49a6              LDR      r1,|L1.2320|
000678  7008              STRB     r0,[r1,#0]
                  |L1.1658|
;;;171    	if(tmp==2)Flag_Show=!Flag_Show;//双击控制小车的显示状态
00067a  2d02              CMP      r5,#2
00067c  d107              BNE      |L1.1678|
00067e  48a7              LDR      r0,|L1.2332|
000680  7800              LDRB     r0,[r0,#0]  ; Flag_Show
000682  b908              CBNZ     r0,|L1.1672|
000684  2001              MOVS     r0,#1
000686  e000              B        |L1.1674|
                  |L1.1672|
000688  2000              MOVS     r0,#0
                  |L1.1674|
00068a  49a4              LDR      r1,|L1.2332|
00068c  7008              STRB     r0,[r1,#0]
                  |L1.1678|
;;;172    	tmp2=Long_Press();                   
00068e  f7fffffe          BL       Long_Press
000692  4604              MOV      r4,r0
;;;173      if(tmp2==1) Bi_zhang=!Bi_zhang;		//长按控制小车是否进入超声波避障模式 
000694  2c01              CMP      r4,#1
000696  d107              BNE      |L1.1704|
000698  488c              LDR      r0,|L1.2252|
00069a  7800              LDRB     r0,[r0,#0]  ; Bi_zhang
00069c  b908              CBNZ     r0,|L1.1698|
00069e  2001              MOVS     r0,#1
0006a0  e000              B        |L1.1700|
                  |L1.1698|
0006a2  2000              MOVS     r0,#0
                  |L1.1700|
0006a4  4989              LDR      r1,|L1.2252|
0006a6  7008              STRB     r0,[r1,#0]
                  |L1.1704|
;;;174    }
0006a8  bd70              POP      {r4-r6,pc}
;;;175    
                          ENDP

                  Get_Angle PROC
;;;201    **************************************************************************/
;;;202    void Get_Angle(u8 way)
0006aa  e92d4ff0          PUSH     {r4-r11,lr}
;;;203    { 
0006ae  b089              SUB      sp,sp,#0x24
0006b0  4681              MOV      r9,r0
;;;204    	    float Accel_Y,Accel_X,Accel_Z,Gyro_Y,Gyro_Z;
;;;205    	   	Temperature=Read_Temperature();      //===读取MPU6050内置温度传感器数据，近似表示主板温度。
0006b2  f7fffffe          BL       Read_Temperature
0006b6  499a              LDR      r1,|L1.2336|
0006b8  6008              STR      r0,[r1,#0]  ; Temperature
;;;206    	    if(way==1)                           //===DMP的读取在数据采集中断提醒的时候，严格遵循时序要求
0006ba  f1b90f01          CMP      r9,#1
0006be  d11b              BNE      |L1.1784|
;;;207    			{	
;;;208    					Read_DMP();                      //===读取加速度、角速度、倾角
0006c0  f7fffffe          BL       Read_DMP
;;;209    					Angle_Balance=Pitch;             //===更新平衡倾角
0006c4  4897              LDR      r0,|L1.2340|
0006c6  6800              LDR      r0,[r0,#0]  ; Pitch
0006c8  4990              LDR      r1,|L1.2316|
0006ca  6008              STR      r0,[r1,#0]  ; Angle_Balance
;;;210    					Gyro_Balance=gyro[1];            //===更新平衡角速度
0006cc  4996              LDR      r1,|L1.2344|
0006ce  f9b10002          LDRSH    r0,[r1,#2]  ; gyro
0006d2  f7fffffe          BL       __aeabi_i2f
0006d6  4995              LDR      r1,|L1.2348|
0006d8  6008              STR      r0,[r1,#0]  ; Gyro_Balance
;;;211    					Gyro_Turn=gyro[2];               //===更新转向角速度
0006da  4993              LDR      r1,|L1.2344|
0006dc  f9b10004          LDRSH    r0,[r1,#4]  ; gyro
0006e0  f7fffffe          BL       __aeabi_i2f
0006e4  4992              LDR      r1,|L1.2352|
0006e6  6008              STR      r0,[r1,#0]  ; Gyro_Turn
;;;212    				  Acceleration_Z=accel[2];         //===更新Z轴加速度计
0006e8  4992              LDR      r1,|L1.2356|
0006ea  f9b10004          LDRSH    r0,[r1,#4]  ; accel
0006ee  f7fffffe          BL       __aeabi_i2f
0006f2  4991              LDR      r1,|L1.2360|
0006f4  6008              STR      r0,[r1,#0]  ; Acceleration_Z
0006f6  e0b9              B        |L1.2156|
                  |L1.1784|
;;;213    			}			
;;;214          else
;;;215          {
;;;216    			Gyro_Y=(I2C_ReadOneByte(devAddr,MPU6050_RA_GYRO_YOUT_H)<<8)+I2C_ReadOneByte(devAddr,MPU6050_RA_GYRO_YOUT_L);    //读取Y轴陀螺仪
0006f8  2146              MOVS     r1,#0x46
0006fa  20d0              MOVS     r0,#0xd0
0006fc  f7fffffe          BL       I2C_ReadOneByte
000700  4605              MOV      r5,r0
000702  2145              MOVS     r1,#0x45
000704  20d0              MOVS     r0,#0xd0
000706  f7fffffe          BL       I2C_ReadOneByte
00070a  eb052400          ADD      r4,r5,r0,LSL #8
00070e  4620              MOV      r0,r4
000710  f7fffffe          BL       __aeabi_i2f
000714  4606              MOV      r6,r0
;;;217    			Gyro_Z=(I2C_ReadOneByte(devAddr,MPU6050_RA_GYRO_ZOUT_H)<<8)+I2C_ReadOneByte(devAddr,MPU6050_RA_GYRO_ZOUT_L);    //读取Z轴陀螺仪
000716  2148              MOVS     r1,#0x48
000718  20d0              MOVS     r0,#0xd0
00071a  f7fffffe          BL       I2C_ReadOneByte
00071e  4605              MOV      r5,r0
000720  2147              MOVS     r1,#0x47
000722  20d0              MOVS     r0,#0xd0
000724  f7fffffe          BL       I2C_ReadOneByte
000728  eb052400          ADD      r4,r5,r0,LSL #8
00072c  4620              MOV      r0,r4
00072e  f7fffffe          BL       __aeabi_i2f
000732  4680              MOV      r8,r0
;;;218    		  Accel_X=(I2C_ReadOneByte(devAddr,MPU6050_RA_ACCEL_XOUT_H)<<8)+I2C_ReadOneByte(devAddr,MPU6050_RA_ACCEL_XOUT_L); //读取X轴加速度计
000734  213c              MOVS     r1,#0x3c
000736  20d0              MOVS     r0,#0xd0
000738  f7fffffe          BL       I2C_ReadOneByte
00073c  4605              MOV      r5,r0
00073e  213b              MOVS     r1,#0x3b
000740  20d0              MOVS     r0,#0xd0
000742  f7fffffe          BL       I2C_ReadOneByte
000746  eb052400          ADD      r4,r5,r0,LSL #8
00074a  4620              MOV      r0,r4
00074c  f7fffffe          BL       __aeabi_i2f
000750  4683              MOV      r11,r0
;;;219    	  	Accel_Z=(I2C_ReadOneByte(devAddr,MPU6050_RA_ACCEL_ZOUT_H)<<8)+I2C_ReadOneByte(devAddr,MPU6050_RA_ACCEL_ZOUT_L); //读取Z轴加速度计
000752  2140              MOVS     r1,#0x40
000754  20d0              MOVS     r0,#0xd0
000756  f7fffffe          BL       I2C_ReadOneByte
00075a  4605              MOV      r5,r0
00075c  213f              MOVS     r1,#0x3f
00075e  20d0              MOVS     r0,#0xd0
000760  f7fffffe          BL       I2C_ReadOneByte
000764  eb052400          ADD      r4,r5,r0,LSL #8
000768  4620              MOV      r0,r4
00076a  f7fffffe          BL       __aeabi_i2f
00076e  4607              MOV      r7,r0
;;;220    		  if(Gyro_Y>32768)  Gyro_Y-=65536;                       //数据类型转换  也可通过short强制类型转换
000770  f04f418e          MOV      r1,#0x47000000
000774  4630              MOV      r0,r6
000776  f7fffffe          BL       __aeabi_cfrcmple
00077a  d205              BCS      |L1.1928|
00077c  f04f418f          MOV      r1,#0x47800000
000780  4630              MOV      r0,r6
000782  f7fffffe          BL       __aeabi_fsub
000786  4606              MOV      r6,r0
                  |L1.1928|
;;;221    			if(Gyro_Z>32768)  Gyro_Z-=65536;                       //数据类型转换
000788  f04f418e          MOV      r1,#0x47000000
00078c  4640              MOV      r0,r8
00078e  f7fffffe          BL       __aeabi_cfrcmple
000792  d205              BCS      |L1.1952|
000794  f04f418f          MOV      r1,#0x47800000
000798  4640              MOV      r0,r8
00079a  f7fffffe          BL       __aeabi_fsub
00079e  4680              MOV      r8,r0
                  |L1.1952|
;;;222    	  	if(Accel_X>32768) Accel_X-=65536;                      //数据类型转换
0007a0  f04f418e          MOV      r1,#0x47000000
0007a4  4658              MOV      r0,r11
0007a6  f7fffffe          BL       __aeabi_cfrcmple
0007aa  d205              BCS      |L1.1976|
0007ac  f04f418f          MOV      r1,#0x47800000
0007b0  4658              MOV      r0,r11
0007b2  f7fffffe          BL       __aeabi_fsub
0007b6  4683              MOV      r11,r0
                  |L1.1976|
;;;223    		  if(Accel_Z>32768) Accel_Z-=65536;                      //数据类型转换
0007b8  f04f418e          MOV      r1,#0x47000000
0007bc  4638              MOV      r0,r7
0007be  f7fffffe          BL       __aeabi_cfrcmple
0007c2  d205              BCS      |L1.2000|
0007c4  f04f418f          MOV      r1,#0x47800000
0007c8  4638              MOV      r0,r7
0007ca  f7fffffe          BL       __aeabi_fsub
0007ce  4607              MOV      r7,r0
                  |L1.2000|
;;;224    			Gyro_Balance=-Gyro_Y;                                  //更新平衡角速度
0007d0  f0864000          EOR      r0,r6,#0x80000000
0007d4  4955              LDR      r1,|L1.2348|
0007d6  6008              STR      r0,[r1,#0]  ; Gyro_Balance
;;;225    	   	Accel_Y=atan2(Accel_X,Accel_Z)*180/PI;                 //计算倾角	
0007d8  4638              MOV      r0,r7
0007da  f7fffffe          BL       __aeabi_f2d
0007de  e9cd0100          STRD     r0,r1,[sp,#0]
0007e2  4658              MOV      r0,r11
0007e4  f7fffffe          BL       __aeabi_f2d
0007e8  4604              MOV      r4,r0
0007ea  e9dd2300          LDRD     r2,r3,[sp,#0]
0007ee  f7fffffe          BL       atan2
0007f2  2200              MOVS     r2,#0
0007f4  4b51              LDR      r3,|L1.2364|
0007f6  e9cd0102          STRD     r0,r1,[sp,#8]
0007fa  f7fffffe          BL       __aeabi_dmul
0007fe  4a50              LDR      r2,|L1.2368|
000800  4b50              LDR      r3,|L1.2372|
000802  e9cd0104          STRD     r0,r1,[sp,#0x10]
000806  f7fffffe          BL       __aeabi_ddiv
00080a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00080e  f7fffffe          BL       __aeabi_d2f
000812  4682              MOV      r10,r0
;;;226    		  Gyro_Y=Gyro_Y/16.4;                                    //陀螺仪量程转换	
000814  4630              MOV      r0,r6
000816  f7fffffe          BL       __aeabi_f2d
00081a  f04f3266          MOV      r2,#0x66666666
00081e  4b4a              LDR      r3,|L1.2376|
000820  e9cd0106          STRD     r0,r1,[sp,#0x18]
000824  f7fffffe          BL       __aeabi_ddiv
000828  4604              MOV      r4,r0
00082a  f7fffffe          BL       __aeabi_d2f
00082e  4606              MOV      r6,r0
;;;227          if(Way_Angle==2)		  	Kalman_Filter(Accel_Y,-Gyro_Y);//卡尔曼滤波	
000830  4846              LDR      r0,|L1.2380|
000832  7800              LDRB     r0,[r0,#0]  ; Way_Angle
000834  2802              CMP      r0,#2
000836  d106              BNE      |L1.2118|
000838  f0864400          EOR      r4,r6,#0x80000000
00083c  4621              MOV      r1,r4
00083e  4650              MOV      r0,r10
000840  f7fffffe          BL       Kalman_Filter
000844  e009              B        |L1.2138|
                  |L1.2118|
;;;228    			else if(Way_Angle==3)   Yijielvbo(Accel_Y,-Gyro_Y);    //互补滤波
000846  4841              LDR      r0,|L1.2380|
000848  7800              LDRB     r0,[r0,#0]  ; Way_Angle
00084a  2803              CMP      r0,#3
00084c  d105              BNE      |L1.2138|
00084e  f0864400          EOR      r4,r6,#0x80000000
000852  4621              MOV      r1,r4
000854  4650              MOV      r0,r10
000856  f7fffffe          BL       Yijielvbo
                  |L1.2138|
;;;229    	    Angle_Balance=angle;                                   //更新平衡倾角
00085a  483d              LDR      r0,|L1.2384|
00085c  6800              LDR      r0,[r0,#0]  ; angle
00085e  492b              LDR      r1,|L1.2316|
000860  6008              STR      r0,[r1,#0]  ; Angle_Balance
;;;230    			Gyro_Turn=Gyro_Z;                                      //更新转向角速度
000862  4833              LDR      r0,|L1.2352|
000864  f8c08000          STR      r8,[r0,#0]  ; Gyro_Turn
;;;231    			Acceleration_Z=Accel_Z;                                //===更新Z轴加速度计	
000868  4833              LDR      r0,|L1.2360|
00086a  6007              STR      r7,[r0,#0]  ; Acceleration_Z
                  |L1.2156|
;;;232    		}
;;;233    }
00086c  b009              ADD      sp,sp,#0x24
00086e  e8bd8ff0          POP      {r4-r11,pc}
;;;234    /**************************************************************************
                          ENDP

                  EXTI9_5_IRQHandler PROC
;;;9      **************************************************************************/
;;;10     int EXTI9_5_IRQHandler(void) 
000872  b510              PUSH     {r4,lr}
;;;11     {    
;;;12     	 if(PBin(5)==0)		
000874  4837              LDR      r0,|L1.2388|
000876  6800              LDR      r0,[r0,#0]
000878  b9f8              CBNZ     r0,|L1.2234|
;;;13     	{   
;;;14     		  EXTI->PR=1<<5;                                                      //清除LINE5上的中断标志位   
00087a  2020              MOVS     r0,#0x20
00087c  4936              LDR      r1,|L1.2392|
00087e  6008              STR      r0,[r1,#0]
;;;15     		   Flag_Target=!Flag_Target;
000880  4836              LDR      r0,|L1.2396|
000882  7800              LDRB     r0,[r0,#0]  ; Flag_Target
000884  b908              CBNZ     r0,|L1.2186|
000886  2001              MOVS     r0,#1
000888  e000              B        |L1.2188|
                  |L1.2186|
00088a  2000              MOVS     r0,#0
                  |L1.2188|
00088c  4933              LDR      r1,|L1.2396|
00088e  7008              STRB     r0,[r1,#0]
;;;16     		  if(delay_flag==1)
000890  4833              LDR      r0,|L1.2400|
000892  7800              LDRB     r0,[r0,#0]  ; delay_flag
000894  2801              CMP      r0,#1
000896  d10b              BNE      |L1.2224|
;;;17     			 {
;;;18     				 if(++delay_50==10)	 delay_50=0,delay_flag=0;                     //给主函数提供50ms的精准延时
000898  4832              LDR      r0,|L1.2404|
00089a  7800              LDRB     r0,[r0,#0]  ; delay_50
00089c  1c40              ADDS     r0,r0,#1
00089e  b2c0              UXTB     r0,r0
0008a0  4930              LDR      r1,|L1.2404|
0008a2  7008              STRB     r0,[r1,#0]
0008a4  280a              CMP      r0,#0xa
0008a6  d103              BNE      |L1.2224|
0008a8  2000              MOVS     r0,#0
0008aa  7008              STRB     r0,[r1,#0]
0008ac  492c              LDR      r1,|L1.2400|
0008ae  7008              STRB     r0,[r1,#0]
                  |L1.2224|
;;;19     			 }
;;;20     		  if(Flag_Target==1)                                                  //5ms读取一次陀螺仪和加速度计的值
0008b0  482a              LDR      r0,|L1.2396|
0008b2  7800              LDRB     r0,[r0,#0]  ; Flag_Target
0008b4  2801              CMP      r0,#1
0008b6  d15d              BNE      |L1.2420|
;;;21     			{
;;;22     			Get_Angle(Way_Angle);                                               //===更新姿态	
0008b8  e056              B        |L1.2408|
                  |L1.2234|
0008ba  e0d6              B        |L1.2666|
                  |L1.2236|
                          DCD      Flag_Hou
                  |L1.2240|
                          DCD      Flag_sudu
                  |L1.2244|
                          DCD      Target_Velocity
                  |L1.2248|
                          DCD      Movement
                  |L1.2252|
                          DCD      Bi_zhang
                  |L1.2256|
                          DCD      Distance
                  |L1.2260|
                          DCD      Flag_Left
                  |L1.2264|
                          DCD      Flag_Right
                  |L1.2268|
                          DCD      Encoder_Left
                  |L1.2272|
                          DCD      Encoder_Right
                  |L1.2276|
                          DCD      Encoder_Least
                  |L1.2280|
                          DCD      Encoder
                  |L1.2284|
                          DCD      0x9999999a
                  |L1.2288|
                          DCD      0x3fe99999
                  |L1.2292|
                          DCD      0x3fc99999
                  |L1.2296|
                          DCD      Encoder_Integral
                  |L1.2300|
                          DCD      0x461c4000
                  |L1.2304|
                          DCD      0xc61c4000
                  |L1.2308|
                          DCD      Velocity
                  |L1.2312|
                          DCD      Voltage
                  |L1.2316|
                          DCD      Angle_Balance
                  |L1.2320|
                          DCD      Flag_Stop
                  |L1.2324|
                          DCD      0x43960000
                  |L1.2328|
                          DCD      0x40400000
                  |L1.2332|
                          DCD      Flag_Show
                  |L1.2336|
                          DCD      Temperature
                  |L1.2340|
                          DCD      Pitch
                  |L1.2344|
                          DCD      gyro
                  |L1.2348|
                          DCD      Gyro_Balance
                  |L1.2352|
                          DCD      Gyro_Turn
                  |L1.2356|
                          DCD      accel
                  |L1.2360|
                          DCD      Acceleration_Z
                  |L1.2364|
                          DCD      0x40668000
                  |L1.2368|
                          DCD      0x53c8d4f1
                  |L1.2372|
                          DCD      0x400921fb
                  |L1.2376|
                          DCD      0x40306666
                  |L1.2380|
                          DCD      Way_Angle
                  |L1.2384|
                          DCD      angle
                  |L1.2388|
                          DCD      0x42218114
                  |L1.2392|
                          DCD      0x40010414
                  |L1.2396|
                          DCD      Flag_Target
                  |L1.2400|
                          DCD      delay_flag
                  |L1.2404|
                          DCD      delay_50
                  |L1.2408|
000968  4841              LDR      r0,|L1.2672|
00096a  7800              LDRB     r0,[r0,#0]  ; Way_Angle
00096c  f7fffffe          BL       Get_Angle
;;;23     			return 0;	                                               
000970  2000              MOVS     r0,#0
                  |L1.2418|
;;;24     			}                                                                   //10ms控制一次，为了保证M法测速的时间基准，首先读取编码器数据
;;;25     			Encoder_Left=-Read_Encoder(2);                                      //===读取编码器的值，因为两个电机的旋转了180度的，所以对其中一个取反，保证输出极性一致
;;;26     			Encoder_Right=Read_Encoder(4);                                      //===读取编码器的值
;;;27     	  	Get_Angle(Way_Angle);                                               //===更新姿态	
;;;28     			Read_Distane();                                                     //===获取超声波测量距离值
;;;29       		if(Bi_zhang==0)Led_Flash(100);                                      //===LED闪烁;常规模式 1s改变一次指示灯的状态	
;;;30     			if(Bi_zhang==1)Led_Flash(0);                                        //===LED闪烁;避障模式 指示灯常亮	
;;;31       		Voltage=Get_battery_volt();                                         //===获取电池电压	          
;;;32     			Key();                                                              //===扫描按键状态 单击双击可以改变小车运行状态
;;;33      			Balance_Pwm =balance(Angle_Balance,Gyro_Balance);                   //===平衡PID控制	
;;;34     		  Velocity_Pwm=velocity(Encoder_Left,Encoder_Right);                  //===速度环PID控制	
;;;35      	    Turn_Pwm    =turn(Encoder_Left,Encoder_Right,Gyro_Turn);            //===转向环PID控制     
;;;36      		  Moto1=Balance_Pwm-Velocity_Pwm+Turn_Pwm;                            //===计算左轮电机最终PWM
;;;37      	  	Moto2=Balance_Pwm-Velocity_Pwm-Turn_Pwm;                            //===计算右轮电机最终PWM
;;;38        		Xianfu_Pwm();                                                       //===PWM限幅
;;;39     			if(Pick_Up(Acceleration_Z,Angle_Balance,Encoder_Left,Encoder_Right))//===检查是否小车被那起
;;;40     			Flag_Stop=1;	                                                      //===如果被拿起就关闭电机
;;;41     			if(Put_Down(Angle_Balance,Encoder_Left,Encoder_Right))              //===检查是否小车被放下
;;;42     			Flag_Stop=0;	                                                      //===如果被放下就启动电机
;;;43           if(Turn_Off(Angle_Balance,Voltage)==0)                              //===如果不存在异常
;;;44      			Set_Pwm(Moto1,Moto2);                                               //===赋值给PWM寄存器  
;;;45     	}       	
;;;46     	 return 0;	  
;;;47     } 
000972  bd10              POP      {r4,pc}
                  |L1.2420|
000974  2002              MOVS     r0,#2                 ;25
000976  f7fffffe          BL       Read_Encoder
00097a  4240              RSBS     r0,r0,#0              ;25
00097c  493d              LDR      r1,|L1.2676|
00097e  6008              STR      r0,[r1,#0]            ;25  ; Encoder_Left
000980  2004              MOVS     r0,#4                 ;26
000982  f7fffffe          BL       Read_Encoder
000986  493c              LDR      r1,|L1.2680|
000988  6008              STR      r0,[r1,#0]            ;26  ; Encoder_Right
00098a  4839              LDR      r0,|L1.2672|
00098c  7800              LDRB     r0,[r0,#0]            ;27  ; Way_Angle
00098e  f7fffffe          BL       Get_Angle
000992  f7fffffe          BL       Read_Distane
000996  4839              LDR      r0,|L1.2684|
000998  7800              LDRB     r0,[r0,#0]            ;29  ; Bi_zhang
00099a  b910              CBNZ     r0,|L1.2466|
00099c  2064              MOVS     r0,#0x64              ;29
00099e  f7fffffe          BL       Led_Flash
                  |L1.2466|
0009a2  4836              LDR      r0,|L1.2684|
0009a4  7800              LDRB     r0,[r0,#0]            ;30  ; Bi_zhang
0009a6  2801              CMP      r0,#1                 ;30
0009a8  d102              BNE      |L1.2480|
0009aa  2000              MOVS     r0,#0                 ;30
0009ac  f7fffffe          BL       Led_Flash
                  |L1.2480|
0009b0  f7fffffe          BL       Get_battery_volt
0009b4  4932              LDR      r1,|L1.2688|
0009b6  6008              STR      r0,[r1,#0]            ;31  ; Voltage
0009b8  f7fffffe          BL       Key
0009bc  4831              LDR      r0,|L1.2692|
0009be  6801              LDR      r1,[r0,#0]            ;33  ; Gyro_Balance
0009c0  4831              LDR      r0,|L1.2696|
0009c2  6800              LDR      r0,[r0,#0]            ;33  ; Angle_Balance
0009c4  f7fffffe          BL       balance
0009c8  4930              LDR      r1,|L1.2700|
0009ca  6008              STR      r0,[r1,#0]            ;33  ; Balance_Pwm
0009cc  482a              LDR      r0,|L1.2680|
0009ce  6801              LDR      r1,[r0,#0]            ;34  ; Encoder_Right
0009d0  4828              LDR      r0,|L1.2676|
0009d2  6800              LDR      r0,[r0,#0]            ;34  ; Encoder_Left
0009d4  f7fffffe          BL       velocity
0009d8  492d              LDR      r1,|L1.2704|
0009da  6008              STR      r0,[r1,#0]            ;34  ; Velocity_Pwm
0009dc  482d              LDR      r0,|L1.2708|
0009de  6802              LDR      r2,[r0,#0]            ;35  ; Gyro_Turn
0009e0  4825              LDR      r0,|L1.2680|
0009e2  6801              LDR      r1,[r0,#0]            ;35  ; Encoder_Right
0009e4  4823              LDR      r0,|L1.2676|
0009e6  6800              LDR      r0,[r0,#0]            ;35  ; Encoder_Left
0009e8  f7fffffe          BL       turn
0009ec  492a              LDR      r1,|L1.2712|
0009ee  6008              STR      r0,[r1,#0]            ;35  ; Turn_Pwm
0009f0  4826              LDR      r0,|L1.2700|
0009f2  6800              LDR      r0,[r0,#0]            ;36  ; Balance_Pwm
0009f4  4926              LDR      r1,|L1.2704|
0009f6  6809              LDR      r1,[r1,#0]            ;36  ; Velocity_Pwm
0009f8  1a40              SUBS     r0,r0,r1              ;36
0009fa  4927              LDR      r1,|L1.2712|
0009fc  6809              LDR      r1,[r1,#0]            ;36  ; Turn_Pwm
0009fe  4408              ADD      r0,r0,r1              ;36
000a00  4926              LDR      r1,|L1.2716|
000a02  6008              STR      r0,[r1,#0]            ;36  ; Moto1
000a04  4821              LDR      r0,|L1.2700|
000a06  6800              LDR      r0,[r0,#0]            ;37  ; Balance_Pwm
000a08  4921              LDR      r1,|L1.2704|
000a0a  6809              LDR      r1,[r1,#0]            ;37  ; Velocity_Pwm
000a0c  1a40              SUBS     r0,r0,r1              ;37
000a0e  4922              LDR      r1,|L1.2712|
000a10  6809              LDR      r1,[r1,#0]            ;37  ; Turn_Pwm
000a12  1a40              SUBS     r0,r0,r1              ;37
000a14  4922              LDR      r1,|L1.2720|
000a16  6008              STR      r0,[r1,#0]            ;37  ; Moto2
000a18  f7fffffe          BL       Xianfu_Pwm
000a1c  4816              LDR      r0,|L1.2680|
000a1e  6803              LDR      r3,[r0,#0]            ;39  ; Encoder_Right
000a20  4814              LDR      r0,|L1.2676|
000a22  6802              LDR      r2,[r0,#0]            ;39  ; Encoder_Left
000a24  4818              LDR      r0,|L1.2696|
000a26  6801              LDR      r1,[r0,#0]            ;39  ; Angle_Balance
000a28  481e              LDR      r0,|L1.2724|
000a2a  6800              LDR      r0,[r0,#0]            ;39  ; Acceleration_Z
000a2c  f7fffffe          BL       Pick_Up
000a30  b110              CBZ      r0,|L1.2616|
000a32  2001              MOVS     r0,#1                 ;40
000a34  491c              LDR      r1,|L1.2728|
000a36  7008              STRB     r0,[r1,#0]            ;40
                  |L1.2616|
000a38  480f              LDR      r0,|L1.2680|
000a3a  6802              LDR      r2,[r0,#0]            ;41  ; Encoder_Right
000a3c  480d              LDR      r0,|L1.2676|
000a3e  6801              LDR      r1,[r0,#0]            ;41  ; Encoder_Left
000a40  4811              LDR      r0,|L1.2696|
000a42  6800              LDR      r0,[r0,#0]            ;41  ; Angle_Balance
000a44  f7fffffe          BL       Put_Down
000a48  b110              CBZ      r0,|L1.2640|
000a4a  2000              MOVS     r0,#0                 ;42
000a4c  4916              LDR      r1,|L1.2728|
000a4e  7008              STRB     r0,[r1,#0]            ;42
                  |L1.2640|
000a50  480b              LDR      r0,|L1.2688|
000a52  6801              LDR      r1,[r0,#0]            ;43  ; Voltage
000a54  480c              LDR      r0,|L1.2696|
000a56  6800              LDR      r0,[r0,#0]            ;43  ; Angle_Balance
000a58  f7fffffe          BL       Turn_Off
000a5c  b928              CBNZ     r0,|L1.2666|
000a5e  4810              LDR      r0,|L1.2720|
000a60  6801              LDR      r1,[r0,#0]            ;44  ; Moto2
000a62  480e              LDR      r0,|L1.2716|
000a64  6800              LDR      r0,[r0,#0]            ;44  ; Moto1
000a66  f7fffffe          BL       Set_Pwm
                  |L1.2666|
000a6a  2000              MOVS     r0,#0                 ;46
000a6c  e781              B        |L1.2418|
;;;48     
                          ENDP

000a6e  0000              DCW      0x0000
                  |L1.2672|
                          DCD      Way_Angle
                  |L1.2676|
                          DCD      Encoder_Left
                  |L1.2680|
                          DCD      Encoder_Right
                  |L1.2684|
                          DCD      Bi_zhang
                  |L1.2688|
                          DCD      Voltage
                  |L1.2692|
                          DCD      Gyro_Balance
                  |L1.2696|
                          DCD      Angle_Balance
                  |L1.2700|
                          DCD      Balance_Pwm
                  |L1.2704|
                          DCD      Velocity_Pwm
                  |L1.2708|
                          DCD      Gyro_Turn
                  |L1.2712|
                          DCD      Turn_Pwm
                  |L1.2716|
                          DCD      Moto1
                  |L1.2720|
                          DCD      Moto2
                  |L1.2724|
                          DCD      Acceleration_Z
                  |L1.2728|
                          DCD      Flag_Stop

                          AREA ||.data||, DATA, ALIGN=2

                  Velocity
                          DCD      0x00000000
                  Encoder_Least
                          DCD      0x00000000
                  Encoder
                          DCD      0x00000000
                  Movement
                          DCD      0x00000000
                  Encoder_Integral
                          DCD      0x00000000
                  Target_Velocity
                          DCD      0x00000000
                  Turn_Target
                          DCD      0x00000000
                  Turn
                          DCD      0x00000000
                  Encoder_temp
                          DCD      0x00000000
                  Turn_Convert
000024  3f666666          DCFS     0x3f666666 ; 0.89999997615814209
                  Turn_Count
                          DCD      0x00000000
                  flag
00002c  0000              DCB      0x00,0x00
                  count0
00002e  0000              DCB      0x00,0x00
                  count1
000030  0000              DCB      0x00,0x00
                  count2
000032  0000              DCB      0x00,0x00
                  |symbol_number.26|
000034  0000              DCB      0x00,0x00
                  count
000036  0000              DCB      0x00,0x00
                  Balance_Pwm
                          DCD      0x00000000
                  Velocity_Pwm
                          DCD      0x00000000
                  Turn_Pwm
                          DCD      0x00000000
                  Flag_Target
000044  00                DCB      0x00

; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\mpu6050.o --depend=..\OBJ\mpu6050.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\OLED -I..\HARDWARE\ADC -I..\HARDWARE\TIMER -I..\HARDWARE\MOTOR -I..\BALANCE\CONTROL -I..\HARDWARE\ENCODER -I..\HARDWARE\IIC -I..\BALANCE\CONTROL -I..\BALANCE\DMP -I..\BALANCE\filter -I..\BALANCE\MPU6050 -I..\BALANCE\show -I..\BALANCE\controls -I..\HARDWARE\USART3 -I..\HARDWARE\EXTI -I..\HARDWARE\DataScope_DP -I"H:\KEIL MDK4\ARM\INC" -I"H:\KEIL MDK4\ARM\INC\STMicroelectronics" -DSTM32F10X_MD --omf_browse=..\OBJ\mpu6050.crf ..\BALANCE\MPU6050\MPU6050.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  inv_row_2_scale PROC
;;;21     
;;;22     static  unsigned short inv_row_2_scale(const signed char *row)
000000  4601              MOV      r1,r0
;;;23     {
;;;24         unsigned short b;
;;;25     
;;;26         if (row[0] > 0)
000002  f9912000          LDRSB    r2,[r1,#0]
000006  2a00              CMP      r2,#0
000008  dd01              BLE      |L1.14|
;;;27             b = 0;
00000a  2000              MOVS     r0,#0
00000c  e01e              B        |L1.76|
                  |L1.14|
;;;28         else if (row[0] < 0)
00000e  f9912000          LDRSB    r2,[r1,#0]
000012  2a00              CMP      r2,#0
000014  da01              BGE      |L1.26|
;;;29             b = 4;
000016  2004              MOVS     r0,#4
000018  e018              B        |L1.76|
                  |L1.26|
;;;30         else if (row[1] > 0)
00001a  f9912001          LDRSB    r2,[r1,#1]
00001e  2a00              CMP      r2,#0
000020  dd01              BLE      |L1.38|
;;;31             b = 1;
000022  2001              MOVS     r0,#1
000024  e012              B        |L1.76|
                  |L1.38|
;;;32         else if (row[1] < 0)
000026  f9912001          LDRSB    r2,[r1,#1]
00002a  2a00              CMP      r2,#0
00002c  da01              BGE      |L1.50|
;;;33             b = 5;
00002e  2005              MOVS     r0,#5
000030  e00c              B        |L1.76|
                  |L1.50|
;;;34         else if (row[2] > 0)
000032  f9912002          LDRSB    r2,[r1,#2]
000036  2a00              CMP      r2,#0
000038  dd01              BLE      |L1.62|
;;;35             b = 2;
00003a  2002              MOVS     r0,#2
00003c  e006              B        |L1.76|
                  |L1.62|
;;;36         else if (row[2] < 0)
00003e  f9912002          LDRSB    r2,[r1,#2]
000042  2a00              CMP      r2,#0
000044  da01              BGE      |L1.74|
;;;37             b = 6;
000046  2006              MOVS     r0,#6
000048  e000              B        |L1.76|
                  |L1.74|
;;;38         else
;;;39             b = 7;      // error
00004a  2007              MOVS     r0,#7
                  |L1.76|
;;;40         return b;
;;;41     }
00004c  4770              BX       lr
;;;42     
                          ENDP

                  inv_orientation_matrix_to_scalar PROC
;;;43     
;;;44     static  unsigned short inv_orientation_matrix_to_scalar(
00004e  b570              PUSH     {r4-r6,lr}
;;;45         const signed char *mtx)
;;;46     {
000050  4605              MOV      r5,r0
;;;47         unsigned short scalar;
;;;48         scalar = inv_row_2_scale(mtx);
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       inv_row_2_scale
000058  4604              MOV      r4,r0
;;;49         scalar |= inv_row_2_scale(mtx + 3) << 3;
00005a  1ce8              ADDS     r0,r5,#3
00005c  f7fffffe          BL       inv_row_2_scale
000060  ea4400c0          ORR      r0,r4,r0,LSL #3
000064  b284              UXTH     r4,r0
;;;50         scalar |= inv_row_2_scale(mtx + 6) << 6;
000066  1da8              ADDS     r0,r5,#6
000068  f7fffffe          BL       inv_row_2_scale
00006c  ea441080          ORR      r0,r4,r0,LSL #6
000070  b284              UXTH     r4,r0
;;;51     
;;;52     
;;;53         return scalar;
000072  4620              MOV      r0,r4
;;;54     }
000074  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

                  run_self_test PROC
;;;56     static void run_self_test(void)
000076  b570              PUSH     {r4-r6,lr}
;;;57     {
000078  b088              SUB      sp,sp,#0x20
;;;58         int result;
;;;59         long gyro[3], accel[3];
;;;60     
;;;61         result = mpu_run_self_test(gyro, accel);
00007a  a902              ADD      r1,sp,#8
00007c  a805              ADD      r0,sp,#0x14
00007e  f7fffffe          BL       mpu_run_self_test
000082  4604              MOV      r4,r0
;;;62         if (result == 0x7) {
000084  2c07              CMP      r4,#7
000086  d13f              BNE      |L1.264|
;;;63             /* Test passed. We can trust the gyro data here, so let's push it down
;;;64              * to the DMP.
;;;65              */
;;;66             float sens;
;;;67             unsigned short accel_sens;
;;;68             mpu_get_gyro_sens(&sens);
000088  a801              ADD      r0,sp,#4
00008a  f7fffffe          BL       mpu_get_gyro_sens
;;;69             gyro[0] = (long)(gyro[0] * sens);
00008e  9805              LDR      r0,[sp,#0x14]
000090  f7fffffe          BL       __aeabi_i2f
000094  4606              MOV      r6,r0
000096  9901              LDR      r1,[sp,#4]
000098  f7fffffe          BL       __aeabi_fmul
00009c  4605              MOV      r5,r0
00009e  f7fffffe          BL       __aeabi_f2iz
0000a2  9005              STR      r0,[sp,#0x14]
;;;70             gyro[1] = (long)(gyro[1] * sens);
0000a4  9806              LDR      r0,[sp,#0x18]
0000a6  f7fffffe          BL       __aeabi_i2f
0000aa  4606              MOV      r6,r0
0000ac  9901              LDR      r1,[sp,#4]
0000ae  f7fffffe          BL       __aeabi_fmul
0000b2  4605              MOV      r5,r0
0000b4  f7fffffe          BL       __aeabi_f2iz
0000b8  9006              STR      r0,[sp,#0x18]
;;;71             gyro[2] = (long)(gyro[2] * sens);
0000ba  9807              LDR      r0,[sp,#0x1c]
0000bc  f7fffffe          BL       __aeabi_i2f
0000c0  4606              MOV      r6,r0
0000c2  9901              LDR      r1,[sp,#4]
0000c4  f7fffffe          BL       __aeabi_fmul
0000c8  4605              MOV      r5,r0
0000ca  f7fffffe          BL       __aeabi_f2iz
0000ce  9007              STR      r0,[sp,#0x1c]
;;;72             dmp_set_gyro_bias(gyro);
0000d0  a805              ADD      r0,sp,#0x14
0000d2  f7fffffe          BL       dmp_set_gyro_bias
;;;73             mpu_get_accel_sens(&accel_sens);
0000d6  4668              MOV      r0,sp
0000d8  f7fffffe          BL       mpu_get_accel_sens
;;;74             accel[0] *= accel_sens;
0000dc  f8bd1000          LDRH     r1,[sp,#0]
0000e0  9802              LDR      r0,[sp,#8]
0000e2  4348              MULS     r0,r1,r0
0000e4  9002              STR      r0,[sp,#8]
;;;75             accel[1] *= accel_sens;
0000e6  f8bd1000          LDRH     r1,[sp,#0]
0000ea  9803              LDR      r0,[sp,#0xc]
0000ec  4348              MULS     r0,r1,r0
0000ee  9003              STR      r0,[sp,#0xc]
;;;76             accel[2] *= accel_sens;
0000f0  f8bd1000          LDRH     r1,[sp,#0]
0000f4  9804              LDR      r0,[sp,#0x10]
0000f6  4348              MULS     r0,r1,r0
0000f8  9004              STR      r0,[sp,#0x10]
;;;77             dmp_set_accel_bias(accel);
0000fa  a802              ADD      r0,sp,#8
0000fc  f7fffffe          BL       dmp_set_accel_bias
;;;78     		printf("setting bias succesfully ......\r\n");
000100  a0ff              ADR      r0,|L1.1280|
000102  f7fffffe          BL       __2printf
;;;79         }
000106  bf00              NOP      
                  |L1.264|
;;;80     }
000108  b008              ADD      sp,sp,#0x20
00010a  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  MPU6050_newValues PROC
;;;94     
;;;95     void  MPU6050_newValues(int16_t ax,int16_t ay,int16_t az,int16_t gx,int16_t gy,int16_t gz)
00010c  e92d43f0          PUSH     {r4-r9,lr}
;;;96     {
000110  4604              MOV      r4,r0
000112  460d              MOV      r5,r1
000114  e9dd6707          LDRD     r6,r7,[sp,#0x1c]
;;;97     unsigned char i ;
;;;98     int32_t sum=0;
000118  2100              MOVS     r1,#0
;;;99     for(i=1;i<10;i++){	//FIFO ²Ù×÷
00011a  2001              MOVS     r0,#1
00011c  e041              B        |L1.418|
                  |L1.286|
;;;100    MPU6050_FIFO[0][i-1]=MPU6050_FIFO[0][i];
00011e  f8dfc404          LDR      r12,|L1.1316|
000122  f83c8010          LDRH     r8,[r12,r0,LSL #1]
000126  f1a00c01          SUB      r12,r0,#1
00012a  f8df93f8          LDR      r9,|L1.1316|
00012e  f829801c          STRH     r8,[r9,r12,LSL #1]
;;;101    MPU6050_FIFO[1][i-1]=MPU6050_FIFO[1][i];
000132  f1090c16          ADD      r12,r9,#0x16
000136  f83c9010          LDRH     r9,[r12,r0,LSL #1]
00013a  f1a00c01          SUB      r12,r0,#1
00013e  f8df83e4          LDR      r8,|L1.1316|
000142  f1080816          ADD      r8,r8,#0x16
000146  f828901c          STRH     r9,[r8,r12,LSL #1]
;;;102    MPU6050_FIFO[2][i-1]=MPU6050_FIFO[2][i];
00014a  f1080c16          ADD      r12,r8,#0x16
00014e  f83c9010          LDRH     r9,[r12,r0,LSL #1]
000152  f1a00c01          SUB      r12,r0,#1
000156  f1080816          ADD      r8,r8,#0x16
00015a  f828901c          STRH     r9,[r8,r12,LSL #1]
;;;103    MPU6050_FIFO[3][i-1]=MPU6050_FIFO[3][i];
00015e  f1080c16          ADD      r12,r8,#0x16
000162  f83c9010          LDRH     r9,[r12,r0,LSL #1]
000166  f1a00c01          SUB      r12,r0,#1
00016a  f1080816          ADD      r8,r8,#0x16
00016e  f828901c          STRH     r9,[r8,r12,LSL #1]
;;;104    MPU6050_FIFO[4][i-1]=MPU6050_FIFO[4][i];
000172  f1080c16          ADD      r12,r8,#0x16
000176  f83c9010          LDRH     r9,[r12,r0,LSL #1]
00017a  f1a00c01          SUB      r12,r0,#1
00017e  f1080816          ADD      r8,r8,#0x16
000182  f828901c          STRH     r9,[r8,r12,LSL #1]
;;;105    MPU6050_FIFO[5][i-1]=MPU6050_FIFO[5][i];
000186  f1080c16          ADD      r12,r8,#0x16
00018a  f83c9010          LDRH     r9,[r12,r0,LSL #1]
00018e  f1a00c01          SUB      r12,r0,#1
000192  f1080816          ADD      r8,r8,#0x16
000196  f828901c          STRH     r9,[r8,r12,LSL #1]
00019a  f1000c01          ADD      r12,r0,#1             ;99
00019e  f00c00ff          AND      r0,r12,#0xff          ;99
                  |L1.418|
0001a2  280a              CMP      r0,#0xa               ;99
0001a4  dbbb              BLT      |L1.286|
;;;106    }
;;;107    MPU6050_FIFO[0][9]=ax;//½«ÐÂµÄÊý¾Ý·ÅÖÃµ½ Êý¾ÝµÄ×îºóÃæ
0001a6  f8dfc37c          LDR      r12,|L1.1316|
0001aa  f8ac4012          STRH     r4,[r12,#0x12]
;;;108    MPU6050_FIFO[1][9]=ay;
0001ae  f8ac5028          STRH     r5,[r12,#0x28]
;;;109    MPU6050_FIFO[2][9]=az;
0001b2  f8ac203e          STRH     r2,[r12,#0x3e]
;;;110    MPU6050_FIFO[3][9]=gx;
0001b6  f8ac3054          STRH     r3,[r12,#0x54]
;;;111    MPU6050_FIFO[4][9]=gy;
0001ba  f8ac606a          STRH     r6,[r12,#0x6a]
;;;112    MPU6050_FIFO[5][9]=gz;
0001be  f8ac7080          STRH     r7,[r12,#0x80]
;;;113    
;;;114    sum=0;
0001c2  2100              MOVS     r1,#0
;;;115    for(i=0;i<10;i++){	//Çóµ±Ç°Êý×éµÄºÏ£¬ÔÙÈ¡Æ½¾ùÖµ
0001c4  2000              MOVS     r0,#0
0001c6  e008              B        |L1.474|
                  |L1.456|
;;;116       sum+=MPU6050_FIFO[0][i];
0001c8  f8dfc358          LDR      r12,|L1.1316|
0001cc  f93cc010          LDRSH    r12,[r12,r0,LSL #1]
0001d0  4461              ADD      r1,r1,r12
0001d2  f1000c01          ADD      r12,r0,#1             ;115
0001d6  f00c00ff          AND      r0,r12,#0xff          ;115
                  |L1.474|
0001da  280a              CMP      r0,#0xa               ;115
0001dc  dbf4              BLT      |L1.456|
;;;117    }
;;;118    MPU6050_FIFO[0][10]=sum/10;
0001de  f04f0c0a          MOV      r12,#0xa
0001e2  fb91fcfc          SDIV     r12,r1,r12
0001e6  fa0ffc8c          SXTH     r12,r12
0001ea  f8df8338          LDR      r8,|L1.1316|
0001ee  f8a8c014          STRH     r12,[r8,#0x14]
;;;119    
;;;120    sum=0;
0001f2  2100              MOVS     r1,#0
;;;121    for(i=0;i<10;i++){
0001f4  2000              MOVS     r0,#0
0001f6  e00a              B        |L1.526|
                  |L1.504|
;;;122       sum+=MPU6050_FIFO[1][i];
0001f8  f8dfc328          LDR      r12,|L1.1316|
0001fc  f10c0c16          ADD      r12,r12,#0x16
000200  f93cc010          LDRSH    r12,[r12,r0,LSL #1]
000204  4461              ADD      r1,r1,r12
000206  f1000c01          ADD      r12,r0,#1             ;121
00020a  f00c00ff          AND      r0,r12,#0xff          ;121
                  |L1.526|
00020e  280a              CMP      r0,#0xa               ;121
000210  dbf2              BLT      |L1.504|
;;;123    }
;;;124    MPU6050_FIFO[1][10]=sum/10;
000212  f04f0c0a          MOV      r12,#0xa
000216  fb91fcfc          SDIV     r12,r1,r12
00021a  fa0ff88c          SXTH     r8,r12
00021e  f8dfc304          LDR      r12,|L1.1316|
000222  f8ac802a          STRH     r8,[r12,#0x2a]
;;;125    
;;;126    sum=0;
000226  2100              MOVS     r1,#0
;;;127    for(i=0;i<10;i++){
000228  2000              MOVS     r0,#0
00022a  e00a              B        |L1.578|
                  |L1.556|
;;;128       sum+=MPU6050_FIFO[2][i];
00022c  f8dfc2f4          LDR      r12,|L1.1316|
000230  f10c0c2c          ADD      r12,r12,#0x2c
000234  f93cc010          LDRSH    r12,[r12,r0,LSL #1]
000238  4461              ADD      r1,r1,r12
00023a  f1000c01          ADD      r12,r0,#1             ;127
00023e  f00c00ff          AND      r0,r12,#0xff          ;127
                  |L1.578|
000242  280a              CMP      r0,#0xa               ;127
000244  dbf2              BLT      |L1.556|
;;;129    }
;;;130    MPU6050_FIFO[2][10]=sum/10;
000246  f04f0c0a          MOV      r12,#0xa
00024a  fb91fcfc          SDIV     r12,r1,r12
00024e  fa0ff88c          SXTH     r8,r12
000252  f8dfc2d0          LDR      r12,|L1.1316|
000256  f8ac8040          STRH     r8,[r12,#0x40]
;;;131    
;;;132    sum=0;
00025a  2100              MOVS     r1,#0
;;;133    for(i=0;i<10;i++){
00025c  2000              MOVS     r0,#0
00025e  e00a              B        |L1.630|
                  |L1.608|
;;;134       sum+=MPU6050_FIFO[3][i];
000260  f8dfc2c0          LDR      r12,|L1.1316|
000264  f10c0c42          ADD      r12,r12,#0x42
000268  f93cc010          LDRSH    r12,[r12,r0,LSL #1]
00026c  4461              ADD      r1,r1,r12
00026e  f1000c01          ADD      r12,r0,#1             ;133
000272  f00c00ff          AND      r0,r12,#0xff          ;133
                  |L1.630|
000276  280a              CMP      r0,#0xa               ;133
000278  dbf2              BLT      |L1.608|
;;;135    }
;;;136    MPU6050_FIFO[3][10]=sum/10;
00027a  f04f0c0a          MOV      r12,#0xa
00027e  fb91fcfc          SDIV     r12,r1,r12
000282  fa0ff88c          SXTH     r8,r12
000286  f8dfc29c          LDR      r12,|L1.1316|
00028a  f8ac8056          STRH     r8,[r12,#0x56]
;;;137    
;;;138    sum=0;
00028e  2100              MOVS     r1,#0
;;;139    for(i=0;i<10;i++){
000290  2000              MOVS     r0,#0
000292  e00a              B        |L1.682|
                  |L1.660|
;;;140       sum+=MPU6050_FIFO[4][i];
000294  f8dfc28c          LDR      r12,|L1.1316|
000298  f10c0c58          ADD      r12,r12,#0x58
00029c  f93cc010          LDRSH    r12,[r12,r0,LSL #1]
0002a0  4461              ADD      r1,r1,r12
0002a2  f1000c01          ADD      r12,r0,#1             ;139
0002a6  f00c00ff          AND      r0,r12,#0xff          ;139
                  |L1.682|
0002aa  280a              CMP      r0,#0xa               ;139
0002ac  dbf2              BLT      |L1.660|
;;;141    }
;;;142    MPU6050_FIFO[4][10]=sum/10;
0002ae  f04f0c0a          MOV      r12,#0xa
0002b2  fb91fcfc          SDIV     r12,r1,r12
0002b6  fa0ff88c          SXTH     r8,r12
0002ba  f8dfc268          LDR      r12,|L1.1316|
0002be  f8ac806c          STRH     r8,[r12,#0x6c]
;;;143    
;;;144    sum=0;
0002c2  2100              MOVS     r1,#0
;;;145    for(i=0;i<10;i++){
0002c4  2000              MOVS     r0,#0
0002c6  e00a              B        |L1.734|
                  |L1.712|
;;;146       sum+=MPU6050_FIFO[5][i];
0002c8  f8dfc258          LDR      r12,|L1.1316|
0002cc  f10c0c6e          ADD      r12,r12,#0x6e
0002d0  f93cc010          LDRSH    r12,[r12,r0,LSL #1]
0002d4  4461              ADD      r1,r1,r12
0002d6  f1000c01          ADD      r12,r0,#1             ;145
0002da  f00c00ff          AND      r0,r12,#0xff          ;145
                  |L1.734|
0002de  280a              CMP      r0,#0xa               ;145
0002e0  dbf2              BLT      |L1.712|
;;;147    }
;;;148    MPU6050_FIFO[5][10]=sum/10;
0002e2  f04f0c0a          MOV      r12,#0xa
0002e6  fb91fcfc          SDIV     r12,r1,r12
0002ea  fa0ff88c          SXTH     r8,r12
0002ee  f8dfc234          LDR      r12,|L1.1316|
0002f2  f8ac8082          STRH     r8,[r12,#0x82]
;;;149    }
0002f6  e8bd83f0          POP      {r4-r9,pc}
;;;150    
                          ENDP

                  MPU6050_setClockSource PROC
;;;164    *******************************************************************************/
;;;165    void MPU6050_setClockSource(uint8_t source){
0002fa  b538              PUSH     {r3-r5,lr}
0002fc  4604              MOV      r4,r0
;;;166        IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
0002fe  2303              MOVS     r3,#3
000300  2202              MOVS     r2,#2
000302  216b              MOVS     r1,#0x6b
000304  20d0              MOVS     r0,#0xd0
000306  9400              STR      r4,[sp,#0]
000308  f7fffffe          BL       IICwriteBits
;;;167    
;;;168    }
00030c  bd38              POP      {r3-r5,pc}
;;;169    
                          ENDP

                  MPU6050_setFullScaleGyroRange PROC
;;;177     */
;;;178    void MPU6050_setFullScaleGyroRange(uint8_t range) {
00030e  b538              PUSH     {r3-r5,lr}
000310  4604              MOV      r4,r0
;;;179        IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
000312  2302              MOVS     r3,#2
000314  2204              MOVS     r2,#4
000316  211b              MOVS     r1,#0x1b
000318  20d0              MOVS     r0,#0xd0
00031a  9400              STR      r4,[sp,#0]
00031c  f7fffffe          BL       IICwriteBits
;;;180    }
000320  bd38              POP      {r3-r5,pc}
;;;181    
                          ENDP

                  MPU6050_setFullScaleAccelRange PROC
;;;185    *******************************************************************************/
;;;186    void MPU6050_setFullScaleAccelRange(uint8_t range) {
000322  b538              PUSH     {r3-r5,lr}
000324  4604              MOV      r4,r0
;;;187        IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
000326  2302              MOVS     r3,#2
000328  2204              MOVS     r2,#4
00032a  211c              MOVS     r1,#0x1c
00032c  20d0              MOVS     r0,#0xd0
00032e  9400              STR      r4,[sp,#0]
000330  f7fffffe          BL       IICwriteBits
;;;188    }
000334  bd38              POP      {r3-r5,pc}
;;;189    
                          ENDP

                  MPU6050_setSleepEnabled PROC
;;;195    *******************************************************************************/
;;;196    void MPU6050_setSleepEnabled(uint8_t enabled) {
000336  b510              PUSH     {r4,lr}
000338  4604              MOV      r4,r0
;;;197        IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
00033a  4623              MOV      r3,r4
00033c  2206              MOVS     r2,#6
00033e  216b              MOVS     r1,#0x6b
000340  20d0              MOVS     r0,#0xd0
000342  f7fffffe          BL       IICwriteBit
;;;198    }
000346  bd10              POP      {r4,pc}
;;;199    
                          ENDP

                  MPU6050_getDeviceID PROC
;;;203    *******************************************************************************/
;;;204    uint8_t MPU6050_getDeviceID(void) {
000348  b510              PUSH     {r4,lr}
;;;205    
;;;206        IICreadBytes(devAddr, MPU6050_RA_WHO_AM_I, 1, buffer);
00034a  4b77              LDR      r3,|L1.1320|
00034c  2201              MOVS     r2,#1
00034e  2175              MOVS     r1,#0x75
000350  20d0              MOVS     r0,#0xd0
000352  f7fffffe          BL       IICreadBytes
;;;207        return buffer[0];
000356  4874              LDR      r0,|L1.1320|
000358  7800              LDRB     r0,[r0,#0]  ; buffer
;;;208    }
00035a  bd10              POP      {r4,pc}
;;;209    
                          ENDP

                  MPU6050_testConnection PROC
;;;213    *******************************************************************************/
;;;214    uint8_t MPU6050_testConnection(void) {
00035c  b510              PUSH     {r4,lr}
;;;215       if(MPU6050_getDeviceID() == 0x68)  //0b01101000;
00035e  f7fffffe          BL       MPU6050_getDeviceID
000362  2868              CMP      r0,#0x68
000364  d101              BNE      |L1.874|
;;;216       return 1;
000366  2001              MOVS     r0,#1
                  |L1.872|
;;;217       	else return 0;
;;;218    }
000368  bd10              POP      {r4,pc}
                  |L1.874|
00036a  2000              MOVS     r0,#0                 ;217
00036c  e7fc              B        |L1.872|
;;;219    
                          ENDP

                  MPU6050_setI2CMasterModeEnabled PROC
;;;223    *******************************************************************************/
;;;224    void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
00036e  b510              PUSH     {r4,lr}
000370  4604              MOV      r4,r0
;;;225        IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
000372  4623              MOV      r3,r4
000374  2205              MOVS     r2,#5
000376  216a              MOVS     r1,#0x6a
000378  20d0              MOVS     r0,#0xd0
00037a  f7fffffe          BL       IICwriteBit
;;;226    }
00037e  bd10              POP      {r4,pc}
;;;227    
                          ENDP

                  MPU6050_setI2CBypassEnabled PROC
;;;231    *******************************************************************************/
;;;232    void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
000380  b510              PUSH     {r4,lr}
000382  4604              MOV      r4,r0
;;;233        IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
000384  4623              MOV      r3,r4
000386  2201              MOVS     r2,#1
000388  2137              MOVS     r1,#0x37
00038a  20d0              MOVS     r0,#0xd0
00038c  f7fffffe          BL       IICwriteBit
;;;234    }
000390  bd10              POP      {r4,pc}
;;;235    
                          ENDP

                  MPU6050_initialize PROC
;;;239    *******************************************************************************/
;;;240    void MPU6050_initialize(void) {
000392  b510              PUSH     {r4,lr}
;;;241        MPU6050_setClockSource(MPU6050_CLOCK_PLL_YGYRO); //ÉèÖÃÊ±ÖÓ
000394  2002              MOVS     r0,#2
000396  f7fffffe          BL       MPU6050_setClockSource
;;;242        MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_2000);//ÍÓÂÝÒÇ×î´óÁ¿³Ì +-1000¶ÈÃ¿Ãë
00039a  2003              MOVS     r0,#3
00039c  f7fffffe          BL       MPU6050_setFullScaleGyroRange
;;;243        MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);	//¼ÓËÙ¶È¶È×î´óÁ¿³Ì +-2G
0003a0  2000              MOVS     r0,#0
0003a2  f7fffffe          BL       MPU6050_setFullScaleAccelRange
;;;244        MPU6050_setSleepEnabled(0); //½øÈë¹¤×÷×´Ì¬
0003a6  2000              MOVS     r0,#0
0003a8  f7fffffe          BL       MPU6050_setSleepEnabled
;;;245    	 MPU6050_setI2CMasterModeEnabled(0);	 //²»ÈÃMPU6050 ¿ØÖÆAUXI2C
0003ac  2000              MOVS     r0,#0
0003ae  f7fffffe          BL       MPU6050_setI2CMasterModeEnabled
;;;246    	 MPU6050_setI2CBypassEnabled(0);	 //Ö÷¿ØÖÆÆ÷µÄI2CÓë	MPU6050µÄAUXI2C	Ö±Í¨¡£¿ØÖÆÆ÷¿ÉÒÔÖ±½Ó·ÃÎÊHMC5883L
0003b2  2000              MOVS     r0,#0
0003b4  f7fffffe          BL       MPU6050_setI2CBypassEnabled
;;;247    }
0003b8  bd10              POP      {r4,pc}
;;;248    
                          ENDP

                  DMP_Init PROC
;;;257    **************************************************************************/
;;;258    void DMP_Init(void)
0003ba  b538              PUSH     {r3-r5,lr}
;;;259    { 
;;;260       u8 temp[1]={0};
0003bc  2000              MOVS     r0,#0
0003be  9000              STR      r0,[sp,#0]
;;;261       i2cRead(0x68,0x75,1,temp);
0003c0  466b              MOV      r3,sp
0003c2  2201              MOVS     r2,#1
0003c4  2175              MOVS     r1,#0x75
0003c6  2068              MOVS     r0,#0x68
0003c8  f7fffffe          BL       i2cRead
;;;262    	 Flag_Show=1;
0003cc  2001              MOVS     r0,#1
0003ce  4957              LDR      r1,|L1.1324|
0003d0  7008              STRB     r0,[r1,#0]
;;;263    	 printf("mpu_set_sensor complete ......\r\n");
0003d2  a057              ADR      r0,|L1.1328|
0003d4  f7fffffe          BL       __2printf
;;;264    	if(temp[0]!=0x68)NVIC_SystemReset();
0003d8  f89d0000          LDRB     r0,[sp,#0]
0003dc  2868              CMP      r0,#0x68
0003de  d012              BEQ      |L1.1030|
0003e0  bf00              NOP      
0003e2  485c              LDR      r0,|L1.1364|
0003e4  6800              LDR      r0,[r0,#0]
0003e6  f40060e0          AND      r0,r0,#0x700
0003ea  495b              LDR      r1,|L1.1368|
0003ec  ea400001          ORR      r0,r0,r1
0003f0  f1000004          ADD      r0,r0,#4
0003f4  f04f21e0          MOV      r1,#0xe000e000
0003f8  f8c10d0c          STR      r0,[r1,#0xd0c]
0003fc  f3bf8f40          DSB      #0x0
000400  bf00              NOP      
000402  bf00              NOP      
                  |L1.1028|
000404  e7fe              B        |L1.1028|
                  |L1.1030|
;;;265    	if(!mpu_init())
000406  f7fffffe          BL       mpu_init
00040a  bbe0              CBNZ     r0,|L1.1158|
;;;266      {
;;;267    	  if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
00040c  2078              MOVS     r0,#0x78
00040e  f7fffffe          BL       mpu_set_sensors
000412  b910              CBNZ     r0,|L1.1050|
;;;268    	  	 printf("mpu_set_sensor complete ......\r\n");
000414  a046              ADR      r0,|L1.1328|
000416  f7fffffe          BL       __2printf
                  |L1.1050|
;;;269    	  if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
00041a  2078              MOVS     r0,#0x78
00041c  f7fffffe          BL       mpu_configure_fifo
000420  b910              CBNZ     r0,|L1.1064|
;;;270    	  	 printf("mpu_configure_fifo complete ......\r\n");
000422  a04e              ADR      r0,|L1.1372|
000424  f7fffffe          BL       __2printf
                  |L1.1064|
;;;271    	  if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
000428  20c8              MOVS     r0,#0xc8
00042a  f7fffffe          BL       mpu_set_sample_rate
00042e  b910              CBNZ     r0,|L1.1078|
;;;272    	  	 printf("mpu_set_sample_rate complete ......\r\n");
000430  a054              ADR      r0,|L1.1412|
000432  f7fffffe          BL       __2printf
                  |L1.1078|
;;;273    	  if(!dmp_load_motion_driver_firmware())
000436  f7fffffe          BL       dmp_load_motion_driver_firmware
00043a  b910              CBNZ     r0,|L1.1090|
;;;274    	  	printf("dmp_load_motion_driver_firmware complete ......\r\n");
00043c  a05b              ADR      r0,|L1.1452|
00043e  f7fffffe          BL       __2printf
                  |L1.1090|
;;;275    	  if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
000442  4867              LDR      r0,|L1.1504|
000444  f7fffffe          BL       inv_orientation_matrix_to_scalar
000448  4604              MOV      r4,r0
00044a  f7fffffe          BL       dmp_set_orientation
00044e  b910              CBNZ     r0,|L1.1110|
;;;276    	  	 printf("dmp_set_orientation complete ......\r\n");
000450  a064              ADR      r0,|L1.1508|
000452  f7fffffe          BL       __2printf
                  |L1.1110|
;;;277    	  if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
000456  f2401073          MOV      r0,#0x173
00045a  f7fffffe          BL       dmp_enable_feature
00045e  b910              CBNZ     r0,|L1.1126|
;;;278    	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
;;;279    	        DMP_FEATURE_GYRO_CAL))
;;;280    	  	 printf("dmp_enable_feature complete ......\r\n");
000460  a06a              ADR      r0,|L1.1548|
000462  f7fffffe          BL       __2printf
                  |L1.1126|
;;;281    	  if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
000466  20c8              MOVS     r0,#0xc8
000468  f7fffffe          BL       dmp_set_fifo_rate
00046c  b910              CBNZ     r0,|L1.1140|
;;;282    	  	 printf("dmp_set_fifo_rate complete ......\r\n");
00046e  a071              ADR      r0,|L1.1588|
000470  f7fffffe          BL       __2printf
                  |L1.1140|
;;;283    	  run_self_test();
000474  f7fffffe          BL       run_self_test
;;;284    	  if(!mpu_set_dmp_state(1))
000478  2001              MOVS     r0,#1
00047a  f7fffffe          BL       mpu_set_dmp_state
00047e  b910              CBNZ     r0,|L1.1158|
;;;285    	  	 printf("mpu_set_dmp_state complete ......\r\n");
000480  a075              ADR      r0,|L1.1624|
000482  f7fffffe          BL       __2printf
                  |L1.1158|
;;;286      }
;;;287    	Flag_Show=0;
000486  2000              MOVS     r0,#0
000488  4928              LDR      r1,|L1.1324|
00048a  7008              STRB     r0,[r1,#0]
;;;288    }
00048c  bd38              POP      {r3-r5,pc}
;;;289    /**************************************************************************
                          ENDP

                  Read_DMP PROC
;;;294    **************************************************************************/
;;;295    void Read_DMP(void)
00048e  e92d4ff0          PUSH     {r4-r11,lr}
;;;296    {	
000492  b08d              SUB      sp,sp,#0x34
;;;297    	  unsigned long sensor_timestamp;
;;;298    		unsigned char more;
;;;299    		long quat[4];
;;;300    
;;;301    				dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);		
000494  ab0a              ADD      r3,sp,#0x28
000496  4a79              LDR      r2,|L1.1660|
000498  e9cd2300          STRD     r2,r3,[sp,#0]
00049c  ab0b              ADD      r3,sp,#0x2c
00049e  aa06              ADD      r2,sp,#0x18
0004a0  4977              LDR      r1,|L1.1664|
0004a2  4878              LDR      r0,|L1.1668|
0004a4  f7fffffe          BL       dmp_read_fifo
;;;302    				if (sensors & INV_WXYZ_QUAT )
0004a8  4874              LDR      r0,|L1.1660|
0004aa  8800              LDRH     r0,[r0,#0]  ; sensors
0004ac  f4107f80          TST      r0,#0x100
0004b0  d024              BEQ      |L1.1276|
;;;303    				{    
;;;304    					 q0=quat[0] / q30;
0004b2  9806              LDR      r0,[sp,#0x18]
0004b4  f7fffffe          BL       __aeabi_i2f
0004b8  4604              MOV      r4,r0
0004ba  f04f419d          MOV      r1,#0x4e800000
0004be  f7fffffe          BL       __aeabi_fdiv
0004c2  4971              LDR      r1,|L1.1672|
0004c4  6008              STR      r0,[r1,#0]  ; q0
;;;305    					 q1=quat[1] / q30;
0004c6  9807              LDR      r0,[sp,#0x1c]
0004c8  f7fffffe          BL       __aeabi_i2f
0004cc  4604              MOV      r4,r0
0004ce  f04f419d          MOV      r1,#0x4e800000
0004d2  f7fffffe          BL       __aeabi_fdiv
0004d6  496d              LDR      r1,|L1.1676|
0004d8  6008              STR      r0,[r1,#0]  ; q1
;;;306    					 q2=quat[2] / q30;
0004da  9808              LDR      r0,[sp,#0x20]
0004dc  f7fffffe          BL       __aeabi_i2f
0004e0  4604              MOV      r4,r0
0004e2  f04f419d          MOV      r1,#0x4e800000
0004e6  f7fffffe          BL       __aeabi_fdiv
0004ea  4969              LDR      r1,|L1.1680|
0004ec  6008              STR      r0,[r1,#0]  ; q2
;;;307    					 q3=quat[3] / q30;
0004ee  9809              LDR      r0,[sp,#0x24]
0004f0  f7fffffe          BL       __aeabi_i2f
0004f4  4604              MOV      r4,r0
0004f6  f04f419d          MOV      r1,#0x4e800000
0004fa  e0cb              B        |L1.1684|
                  |L1.1276|
0004fc  e154              B        |L1.1960|
0004fe  0000              DCW      0x0000
                  |L1.1280|
000500  73657474          DCB      "setting bias succesfully ......\r\n",0
000504  696e6720
000508  62696173
00050c  20737563
000510  63657366
000514  756c6c79
000518  202e2e2e
00051c  2e2e2e0d
000520  0a00    
000522  00                DCB      0
000523  00                DCB      0
                  |L1.1316|
                          DCD      MPU6050_FIFO
                  |L1.1320|
                          DCD      buffer
                  |L1.1324|
                          DCD      Flag_Show
                  |L1.1328|
000530  6d70755f          DCB      "mpu_set_sensor complete ......\r\n",0
000534  7365745f
000538  73656e73
00053c  6f722063
000540  6f6d706c
000544  65746520
000548  2e2e2e2e
00054c  2e2e0d0a
000550  00      
000551  00                DCB      0
000552  00                DCB      0
000553  00                DCB      0
                  |L1.1364|
                          DCD      0xe000ed0c
                  |L1.1368|
                          DCD      0x05fa0000
                  |L1.1372|
00055c  6d70755f          DCB      "mpu_configure_fifo complete ......\r\n",0
000560  636f6e66
000564  69677572
000568  655f6669
00056c  666f2063
000570  6f6d706c
000574  65746520
000578  2e2e2e2e
00057c  2e2e0d0a
000580  00      
000581  00                DCB      0
000582  00                DCB      0
000583  00                DCB      0
                  |L1.1412|
000584  6d70755f          DCB      "mpu_set_sample_rate complete ......\r\n",0
000588  7365745f
00058c  73616d70
000590  6c655f72
000594  61746520
000598  636f6d70
00059c  6c657465
0005a0  202e2e2e
0005a4  2e2e2e0d
0005a8  0a00    
0005aa  00                DCB      0
0005ab  00                DCB      0
                  |L1.1452|
0005ac  646d705f          DCB      "dmp_load_motion_driver_firmware complete ......\r\n",0
0005b0  6c6f6164
0005b4  5f6d6f74
0005b8  696f6e5f
0005bc  64726976
0005c0  65725f66
0005c4  69726d77
0005c8  61726520
0005cc  636f6d70
0005d0  6c657465
0005d4  202e2e2e
0005d8  2e2e2e0d
0005dc  0a00    
0005de  00                DCB      0
0005df  00                DCB      0
                  |L1.1504|
                          DCD      gyro_orientation
                  |L1.1508|
0005e4  646d705f          DCB      "dmp_set_orientation complete ......\r\n",0
0005e8  7365745f
0005ec  6f726965
0005f0  6e746174
0005f4  696f6e20
0005f8  636f6d70
0005fc  6c657465
000600  202e2e2e
000604  2e2e2e0d
000608  0a00    
00060a  00                DCB      0
00060b  00                DCB      0
                  |L1.1548|
00060c  646d705f          DCB      "dmp_enable_feature complete ......\r\n",0
000610  656e6162
000614  6c655f66
000618  65617475
00061c  72652063
000620  6f6d706c
000624  65746520
000628  2e2e2e2e
00062c  2e2e0d0a
000630  00      
000631  00                DCB      0
000632  00                DCB      0
000633  00                DCB      0
                  |L1.1588|
000634  646d705f          DCB      "dmp_set_fifo_rate complete ......\r\n",0
000638  7365745f
00063c  6669666f
000640  5f726174
000644  6520636f
000648  6d706c65
00064c  7465202e
000650  2e2e2e2e
000654  2e0d0a00
                  |L1.1624|
000658  6d70755f          DCB      "mpu_set_dmp_state complete ......\r\n",0
00065c  7365745f
000660  646d705f
000664  73746174
000668  6520636f
00066c  6d706c65
000670  7465202e
000674  2e2e2e2e
000678  2e0d0a00
                  |L1.1660|
                          DCD      sensors
                  |L1.1664|
                          DCD      accel
                  |L1.1668|
                          DCD      gyro
                  |L1.1672|
                          DCD      ||q0||
                  |L1.1676|
                          DCD      ||q1||
                  |L1.1680|
                          DCD      ||q2||
                  |L1.1684|
000694  f7fffffe          BL       __aeabi_fdiv
000698  4960              LDR      r1,|L1.2076|
00069a  6008              STR      r0,[r1,#0]  ; q3
;;;308    					 Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; 	
00069c  4860              LDR      r0,|L1.2080|
00069e  6801              LDR      r1,[r0,#0]  ; q0
0006a0  f04f4080          MOV      r0,#0x40000000
0006a4  f7fffffe          BL       __aeabi_fmul
0006a8  9004              STR      r0,[sp,#0x10]
0006aa  485e              LDR      r0,|L1.2084|
0006ac  6801              LDR      r1,[r0,#0]  ; q2
0006ae  9804              LDR      r0,[sp,#0x10]
0006b0  f7fffffe          BL       __aeabi_fmul
0006b4  4682              MOV      r10,r0
0006b6  485c              LDR      r0,|L1.2088|
0006b8  6801              LDR      r1,[r0,#0]  ; q1
0006ba  f04f4040          MOV      r0,#0xc0000000
0006be  f7fffffe          BL       __aeabi_fmul
0006c2  9004              STR      r0,[sp,#0x10]
0006c4  4855              LDR      r0,|L1.2076|
0006c6  6801              LDR      r1,[r0,#0]  ; q3
0006c8  9804              LDR      r0,[sp,#0x10]
0006ca  f7fffffe          BL       __aeabi_fmul
0006ce  4683              MOV      r11,r0
0006d0  4651              MOV      r1,r10
0006d2  f7fffffe          BL       __aeabi_fadd
0006d6  9005              STR      r0,[sp,#0x14]
0006d8  f7fffffe          BL       __aeabi_f2d
0006dc  4680              MOV      r8,r0
0006de  f7fffffe          BL       asin
0006e2  4606              MOV      r6,r0
0006e4  f04f3266          MOV      r2,#0x66666666
0006e8  4b50              LDR      r3,|L1.2092|
0006ea  f7fffffe          BL       __aeabi_dmul
0006ee  4604              MOV      r4,r0
0006f0  f7fffffe          BL       __aeabi_d2f
0006f4  494e              LDR      r1,|L1.2096|
0006f6  6008              STR      r0,[r1,#0]  ; Pitch
;;;309    					 Roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
0006f8  484a              LDR      r0,|L1.2084|
0006fa  6801              LDR      r1,[r0,#0]  ; q2
0006fc  f04f4080          MOV      r0,#0x40000000
000700  f7fffffe          BL       __aeabi_fmul
000704  9001              STR      r0,[sp,#4]
000706  4847              LDR      r0,|L1.2084|
000708  6801              LDR      r1,[r0,#0]  ; q2
00070a  9801              LDR      r0,[sp,#4]
00070c  f7fffffe          BL       __aeabi_fmul
000710  4682              MOV      r10,r0
000712  4845              LDR      r0,|L1.2088|
000714  6801              LDR      r1,[r0,#0]  ; q1
000716  f04f4040          MOV      r0,#0xc0000000
00071a  f7fffffe          BL       __aeabi_fmul
00071e  9001              STR      r0,[sp,#4]
000720  4841              LDR      r0,|L1.2088|
000722  6801              LDR      r1,[r0,#0]  ; q1
000724  9801              LDR      r0,[sp,#4]
000726  f7fffffe          BL       __aeabi_fmul
00072a  4683              MOV      r11,r0
00072c  4651              MOV      r1,r10
00072e  f7fffffe          BL       __aeabi_fsub
000732  4681              MOV      r9,r0
000734  f04f517e          MOV      r1,#0x3f800000
000738  f7fffffe          BL       __aeabi_fadd
00073c  4680              MOV      r8,r0
00073e  f7fffffe          BL       __aeabi_f2d
000742  e9cd0104          STRD     r0,r1,[sp,#0x10]
000746  4836              LDR      r0,|L1.2080|
000748  6801              LDR      r1,[r0,#0]  ; q0
00074a  f04f4080          MOV      r0,#0x40000000
00074e  f7fffffe          BL       __aeabi_fmul
000752  4683              MOV      r11,r0
000754  4834              LDR      r0,|L1.2088|
000756  6801              LDR      r1,[r0,#0]  ; q1
000758  4658              MOV      r0,r11
00075a  f7fffffe          BL       __aeabi_fmul
00075e  4681              MOV      r9,r0
000760  4830              LDR      r0,|L1.2084|
000762  6801              LDR      r1,[r0,#0]  ; q2
000764  f04f4080          MOV      r0,#0x40000000
000768  f7fffffe          BL       __aeabi_fmul
00076c  4683              MOV      r11,r0
00076e  482b              LDR      r0,|L1.2076|
000770  6801              LDR      r1,[r0,#0]  ; q3
000772  4658              MOV      r0,r11
000774  f7fffffe          BL       __aeabi_fmul
000778  4682              MOV      r10,r0
00077a  4649              MOV      r1,r9
00077c  f7fffffe          BL       __aeabi_fadd
000780  4680              MOV      r8,r0
000782  f7fffffe          BL       __aeabi_f2d
000786  e9cd0102          STRD     r0,r1,[sp,#8]
00078a  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00078e  f7fffffe          BL       atan2
000792  4604              MOV      r4,r0
000794  f04f3266          MOV      r2,#0x66666666
000798  4b24              LDR      r3,|L1.2092|
00079a  f7fffffe          BL       __aeabi_dmul
00079e  4606              MOV      r6,r0
0007a0  f7fffffe          BL       __aeabi_d2f
0007a4  4923              LDR      r1,|L1.2100|
0007a6  6008              STR      r0,[r1,#0]  ; Roll
                  |L1.1960|
;;;310    				}
;;;311    
;;;312    }
0007a8  b00d              ADD      sp,sp,#0x34
0007aa  e8bd8ff0          POP      {r4-r11,pc}
;;;313    /**************************************************************************
                          ENDP

                  Read_Temperature PROC
;;;318    **************************************************************************/
;;;319    int Read_Temperature(void)
0007ae  e92d5ff0          PUSH     {r4-r12,lr}
;;;320    {	   
;;;321    	  float Temp;
;;;322    	  Temp=(I2C_ReadOneByte(devAddr,MPU6050_RA_TEMP_OUT_H)<<8)+I2C_ReadOneByte(devAddr,MPU6050_RA_TEMP_OUT_L);
0007b2  2142              MOVS     r1,#0x42
0007b4  20d0              MOVS     r0,#0xd0
0007b6  f7fffffe          BL       I2C_ReadOneByte
0007ba  4605              MOV      r5,r0
0007bc  2141              MOVS     r1,#0x41
0007be  20d0              MOVS     r0,#0xd0
0007c0  f7fffffe          BL       I2C_ReadOneByte
0007c4  eb052400          ADD      r4,r5,r0,LSL #8
0007c8  4620              MOV      r0,r4
0007ca  f7fffffe          BL       __aeabi_i2f
0007ce  4682              MOV      r10,r0
;;;323    		if(Temp>32768) Temp-=65536;
0007d0  f04f418e          MOV      r1,#0x47000000
0007d4  4650              MOV      r0,r10
0007d6  f7fffffe          BL       __aeabi_cfrcmple
0007da  d205              BCS      |L1.2024|
0007dc  f04f418f          MOV      r1,#0x47800000
0007e0  4650              MOV      r0,r10
0007e2  f7fffffe          BL       __aeabi_fsub
0007e6  4682              MOV      r10,r0
                  |L1.2024|
;;;324    		Temp=(36.53+Temp/340)*10;
0007e8  4913              LDR      r1,|L1.2104|
0007ea  4650              MOV      r0,r10
0007ec  f7fffffe          BL       __aeabi_fdiv
0007f0  4683              MOV      r11,r0
0007f2  f7fffffe          BL       __aeabi_f2d
0007f6  4680              MOV      r8,r0
0007f8  4a10              LDR      r2,|L1.2108|
0007fa  4b11              LDR      r3,|L1.2112|
0007fc  f7fffffe          BL       __aeabi_dadd
000800  4606              MOV      r6,r0
000802  2200              MOVS     r2,#0
000804  4b0f              LDR      r3,|L1.2116|
000806  f7fffffe          BL       __aeabi_dmul
00080a  4604              MOV      r4,r0
00080c  f7fffffe          BL       __aeabi_d2f
000810  4682              MOV      r10,r0
;;;325    	  return (int)Temp;
000812  4650              MOV      r0,r10
000814  f7fffffe          BL       __aeabi_f2iz
;;;326    }
000818  e8bd9ff0          POP      {r4-r12,pc}
;;;327    //------------------End of File----------------------------
                          ENDP

                  |L1.2076|
                          DCD      ||q3||
                  |L1.2080|
                          DCD      ||q0||
                  |L1.2084|
                          DCD      ||q2||
                  |L1.2088|
                          DCD      ||q1||
                  |L1.2092|
                          DCD      0x404ca666
                  |L1.2096|
                          DCD      Pitch
                  |L1.2100|
                          DCD      Roll
                  |L1.2104|
                          DCD      0x43aa0000
                  |L1.2108|
                          DCD      0x0a3d70a4
                  |L1.2112|
                          DCD      0x404243d7
                  |L1.2116|
                          DCD      0x40240000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  buffer
                          %        14
                  MPU6050_FIFO
                          %        132

                          AREA ||.data||, DATA, ALIGN=2

                  ||q0||
000000  3f800000          DCFS     0x3f800000 ; 1
                  ||q1||
000004  00000000          DCFS     0x00000000 ; 0
                  ||q2||
000008  00000000          DCFS     0x00000000 ; 0
                  ||q3||
00000c  00000000          DCFS     0x00000000 ; 0
                  gyro_orientation
000010  ff000000          DCB      0xff,0x00,0x00,0x00
000014  ff000000          DCB      0xff,0x00,0x00,0x00
000018  0100              DCB      0x01,0x00
                  Gx_offset
00001a  0000              DCW      0x0000
                  Gy_offset
00001c  0000              DCW      0x0000
                  Gz_offset
00001e  0000              DCW      0x0000
                  gyro
                          DCD      0x00000000
000024  0000              DCB      0x00,0x00
                  accel
000026  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  sensors
00002c  00000000          DCB      0x00,0x00,0x00,0x00
                  Pitch
                          DCD      0x00000000
                  Roll
                          DCD      0x00000000

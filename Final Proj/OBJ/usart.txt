; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\usart.o --depend=..\OBJ\usart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\OLED -I..\HARDWARE\ADC -I..\HARDWARE\TIMER -I..\HARDWARE\MOTOR -I..\BALANCE\CONTROL -I..\HARDWARE\ENCODER -I..\HARDWARE\IIC -I..\BALANCE\CONTROL -I..\BALANCE\DMP -I..\BALANCE\filter -I..\BALANCE\MPU6050 -I..\BALANCE\show -I..\BALANCE\controls -I..\HARDWARE\USART3 -I..\HARDWARE\EXTI -I..\HARDWARE\DataScope_DP -I"H:\KEIL MDK4\ARM\INC" -I"H:\KEIL MDK4\ARM\INC\STMicroelectronics" -DSTM32F10X_MD --omf_browse=..\OBJ\usart.crf ..\SYSTEM\usart\usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _sys_exit PROC
;;;15     //定义_sys_exit()以避免使用半主机模式    
;;;16     _sys_exit(int x) 
000000  4601              MOV      r1,r0
;;;17     { 
;;;18     	x = x; 
000002  bf00              NOP      
;;;19     } 
000004  4770              BX       lr
;;;20     //重定义fputc函数 
                          ENDP

                  fputc PROC
;;;21     int fputc(int ch, FILE *f)
000006  4a3d              LDR      r2,|L1.252|
;;;22     {      
;;;23     	if(Flag_Show==0)
000008  7812              LDRB     r2,[r2,#0]  ; Flag_Show
00000a  b94a              CBNZ     r2,|L1.32|
;;;24     	{	
;;;25     	while((USART3->SR&0X40)==0);//Flag_Show=0  使用串口3   
00000c  bf00              NOP      
                  |L1.14|
00000e  4a3c              LDR      r2,|L1.256|
000010  8812              LDRH     r2,[r2,#0]
000012  f0120f40          TST      r2,#0x40
000016  d0fa              BEQ      |L1.14|
;;;26     	USART3->DR = (u8) ch;      
000018  b2c2              UXTB     r2,r0
00001a  4b3a              LDR      r3,|L1.260|
00001c  801a              STRH     r2,[r3,#0]
00001e  e008              B        |L1.50|
                  |L1.32|
;;;27     	}
;;;28     	else
;;;29     	{	
;;;30     	while((USART1->SR&0X40)==0);//Flag_Show!=0  使用串口1   
000020  bf00              NOP      
                  |L1.34|
000022  4a39              LDR      r2,|L1.264|
000024  8812              LDRH     r2,[r2,#0]
000026  f0120f40          TST      r2,#0x40
00002a  d0fa              BEQ      |L1.34|
;;;31     	USART1->DR = (u8) ch;      
00002c  b2c2              UXTB     r2,r0
00002e  4b37              LDR      r3,|L1.268|
000030  801a              STRH     r2,[r3,#0]
                  |L1.50|
;;;32     	}	
;;;33     	return ch;
;;;34     }
000032  4770              BX       lr
;;;35     #endif 
                          ENDP

                  usart1_send PROC
;;;40     *********************************************************************************/
;;;41     void usart1_send(u8 data)
000034  4935              LDR      r1,|L1.268|
;;;42     {
;;;43     	USART1->DR = data;
000036  8008              STRH     r0,[r1,#0]
;;;44     	while((USART1->SR&0x40)==0);	
000038  bf00              NOP      
                  |L1.58|
00003a  4933              LDR      r1,|L1.264|
00003c  8809              LDRH     r1,[r1,#0]
00003e  f0110f40          TST      r1,#0x40
000042  d0fa              BEQ      |L1.58|
;;;45     }
000044  4770              BX       lr
;;;46     void uart_init(u32 pclk2,u32 bound)
                          ENDP

                  uart_init PROC
000046  e92d5ff0          PUSH     {r4-r12,lr}
;;;47     {  	 
00004a  4605              MOV      r5,r0
00004c  460e              MOV      r6,r1
;;;48     	float temp;
;;;49     	u16 mantissa;
;;;50     	u16 fraction;	   
;;;51     	temp=(float)(pclk2*1000000)/(bound*16);//得到USARTDIV
00004e  0130              LSLS     r0,r6,#4
000050  f7fffffe          BL       __aeabi_ui2f
000054  4681              MOV      r9,r0
000056  492e              LDR      r1,|L1.272|
000058  fb05f001          MUL      r0,r5,r1
00005c  f7fffffe          BL       __aeabi_ui2f
000060  4682              MOV      r10,r0
000062  4649              MOV      r1,r9
000064  f7fffffe          BL       __aeabi_fdiv
000068  4607              MOV      r7,r0
;;;52     	mantissa=temp;				 //得到整数部分
00006a  4638              MOV      r0,r7
00006c  f7fffffe          BL       __aeabi_f2uiz
000070  b284              UXTH     r4,r0
;;;53     	fraction=(temp-mantissa)*16; //得到小数部分	 
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       __aeabi_ui2f
000078  4683              MOV      r11,r0
00007a  4639              MOV      r1,r7
00007c  f7fffffe          BL       __aeabi_frsub
000080  4682              MOV      r10,r0
000082  f04f4183          MOV      r1,#0x41800000
000086  f7fffffe          BL       __aeabi_fmul
00008a  4681              MOV      r9,r0
00008c  f7fffffe          BL       __aeabi_f2uiz
000090  4680              MOV      r8,r0
;;;54         mantissa<<=4;
000092  0124              LSLS     r4,r4,#4
;;;55     	mantissa+=fraction; 
000094  eb040008          ADD      r0,r4,r8
000098  b284              UXTH     r4,r0
;;;56     	RCC->APB2ENR|=1<<2;   //使能PORTA口时钟  
00009a  481e              LDR      r0,|L1.276|
00009c  6980              LDR      r0,[r0,#0x18]
00009e  f0400004          ORR      r0,r0,#4
0000a2  491c              LDR      r1,|L1.276|
0000a4  6188              STR      r0,[r1,#0x18]
;;;57     	RCC->APB2ENR|=1<<14;  //使能串口时钟 
0000a6  4608              MOV      r0,r1
0000a8  6980              LDR      r0,[r0,#0x18]
0000aa  f4404080          ORR      r0,r0,#0x4000
0000ae  6188              STR      r0,[r1,#0x18]
;;;58     	GPIOA->CRH&=0XFFFFF00F;//IO状态设置
0000b0  4819              LDR      r0,|L1.280|
0000b2  6800              LDR      r0,[r0,#0]
0000b4  f420607f          BIC      r0,r0,#0xff0
0000b8  4918              LDR      r1,|L1.284|
0000ba  f8c10804          STR      r0,[r1,#0x804]
;;;59     	GPIOA->CRH|=0X000008B0;//IO状态设置
0000be  4608              MOV      r0,r1
0000c0  f8d00804          LDR      r0,[r0,#0x804]
0000c4  f440600b          ORR      r0,r0,#0x8b0
0000c8  f8c10804          STR      r0,[r1,#0x804]
;;;60     		  
;;;61     	RCC->APB2RSTR|=1<<14;   //复位串口1
0000cc  4811              LDR      r0,|L1.276|
0000ce  68c0              LDR      r0,[r0,#0xc]
0000d0  f4404080          ORR      r0,r0,#0x4000
0000d4  490f              LDR      r1,|L1.276|
0000d6  60c8              STR      r0,[r1,#0xc]
;;;62     	RCC->APB2RSTR&=~(1<<14);//停止复位	   	   
0000d8  4608              MOV      r0,r1
0000da  68c0              LDR      r0,[r0,#0xc]
0000dc  f4204080          BIC      r0,r0,#0x4000
0000e0  60c8              STR      r0,[r1,#0xc]
;;;63     	//波特率设置
;;;64      	USART1->BRR=mantissa; // 波特率设置	 
0000e2  480f              LDR      r0,|L1.288|
0000e4  f8a04808          STRH     r4,[r0,#0x808]
;;;65     	USART1->CR1|=0X200C;  //1位停止,无校验位.
0000e8  480e              LDR      r0,|L1.292|
0000ea  8800              LDRH     r0,[r0,#0]
0000ec  f242010c          MOV      r1,#0x200c
0000f0  ea400001          ORR      r0,r0,r1
0000f4  490b              LDR      r1,|L1.292|
0000f6  8008              STRH     r0,[r1,#0]
;;;66     
;;;67     }
0000f8  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP

                  |L1.252|
                          DCD      Flag_Show
                  |L1.256|
                          DCD      0x40004800
                  |L1.260|
                          DCD      0x40004804
                  |L1.264|
                          DCD      0x40013800
                  |L1.268|
                          DCD      0x40013804
                  |L1.272|
                          DCD      0x000f4240
                  |L1.276|
                          DCD      0x40021000
                  |L1.280|
                          DCD      0x40010804
                  |L1.284|
                          DCD      0x40010000
                  |L1.288|
                          DCD      0x40013000
                  |L1.292|
                          DCD      0x4001380c

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\datascope_dp.o --depend=..\OBJ\datascope_dp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\OLED -I..\HARDWARE\ADC -I..\HARDWARE\TIMER -I..\HARDWARE\MOTOR -I..\BALANCE\CONTROL -I..\HARDWARE\ENCODER -I..\HARDWARE\IIC -I..\BALANCE\CONTROL -I..\BALANCE\DMP -I..\BALANCE\filter -I..\BALANCE\MPU6050 -I..\BALANCE\show -I..\BALANCE\controls -I..\HARDWARE\USART3 -I..\HARDWARE\EXTI -I..\HARDWARE\DataScope_DP -I"H:\KEIL MDK4\ARM\INC" -I"H:\KEIL MDK4\ARM\INC\STMicroelectronics" -DSTM32F10X_MD --omf_browse=..\OBJ\datascope_dp.crf ..\HARDWARE\DataScope_DP\DataScope_DP.C]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Float2Byte PROC
;;;15     //函数无返回 
;;;16     void Float2Byte(float *target,unsigned char *buf,unsigned char beg)
000000  b530              PUSH     {r4,r5,lr}
;;;17     {
;;;18         unsigned char *point;
;;;19         point = (unsigned char*)target;	  //得到float的地址
000002  4603              MOV      r3,r0
;;;20         buf[beg]   = point[0];
000004  781c              LDRB     r4,[r3,#0]
000006  548c              STRB     r4,[r1,r2]
;;;21         buf[beg+1] = point[1];
000008  785d              LDRB     r5,[r3,#1]
00000a  1c54              ADDS     r4,r2,#1
00000c  550d              STRB     r5,[r1,r4]
;;;22         buf[beg+2] = point[2];
00000e  789d              LDRB     r5,[r3,#2]
000010  1c94              ADDS     r4,r2,#2
000012  550d              STRB     r5,[r1,r4]
;;;23         buf[beg+3] = point[3];
000014  78dd              LDRB     r5,[r3,#3]
000016  1cd4              ADDS     r4,r2,#3
000018  550d              STRB     r5,[r1,r4]
;;;24     }
00001a  bd30              POP      {r4,r5,pc}
;;;25      
                          ENDP

                  DataScope_Get_Channel_Data PROC
;;;30     //函数无返回 
;;;31     void DataScope_Get_Channel_Data(float Data,unsigned char Channel)
00001c  b513              PUSH     {r0,r1,r4,lr}
;;;32     {
00001e  460c              MOV      r4,r1
;;;33     	if ( (Channel > 10) || (Channel == 0) ) return;  //通道个数大于10或等于0，直接跳出，不执行函数
000020  2c0a              CMP      r4,#0xa
000022  dc00              BGT      |L1.38|
000024  b904              CBNZ     r4,|L1.40|
                  |L1.38|
;;;34       else
;;;35       {
;;;36          switch (Channel)
;;;37     		{
;;;38           case 1:  Float2Byte(&Data,DataScope_OutPut_Buffer,1); break;
;;;39           case 2:  Float2Byte(&Data,DataScope_OutPut_Buffer,5); break;
;;;40     		  case 3:  Float2Byte(&Data,DataScope_OutPut_Buffer,9); break;
;;;41     		  case 4:  Float2Byte(&Data,DataScope_OutPut_Buffer,13); break;
;;;42     		  case 5:  Float2Byte(&Data,DataScope_OutPut_Buffer,17); break;
;;;43     		  case 6:  Float2Byte(&Data,DataScope_OutPut_Buffer,21); break;
;;;44     		  case 7:  Float2Byte(&Data,DataScope_OutPut_Buffer,25); break;
;;;45     		  case 8:  Float2Byte(&Data,DataScope_OutPut_Buffer,29); break;
;;;46     		  case 9:  Float2Byte(&Data,DataScope_OutPut_Buffer,33); break;
;;;47     		  case 10: Float2Byte(&Data,DataScope_OutPut_Buffer,37); break;
;;;48     		}
;;;49       }	 
;;;50     }
000026  bd1c              POP      {r2-r4,pc}
                  |L1.40|
000028  2c0b              CMP      r4,#0xb               ;36
00002a  d243              BCS      |L1.180|
00002c  e8dff004          TBB      [pc,r4]               ;36
000030  42060c12          DCB      0x42,0x06,0x0c,0x12
000034  181e242a          DCB      0x18,0x1e,0x24,0x2a
000038  30363c00          DCB      0x30,0x36,0x3c,0x00
00003c  2201              MOVS     r2,#1                 ;38
00003e  4944              LDR      r1,|L1.336|
000040  4668              MOV      r0,sp                 ;38
000042  f7fffffe          BL       Float2Byte
000046  e035              B        |L1.180|
000048  2205              MOVS     r2,#5                 ;39
00004a  4941              LDR      r1,|L1.336|
00004c  4668              MOV      r0,sp                 ;39
00004e  f7fffffe          BL       Float2Byte
000052  e02f              B        |L1.180|
000054  2209              MOVS     r2,#9                 ;40
000056  493e              LDR      r1,|L1.336|
000058  4668              MOV      r0,sp                 ;40
00005a  f7fffffe          BL       Float2Byte
00005e  e029              B        |L1.180|
000060  220d              MOVS     r2,#0xd               ;41
000062  493b              LDR      r1,|L1.336|
000064  4668              MOV      r0,sp                 ;41
000066  f7fffffe          BL       Float2Byte
00006a  e023              B        |L1.180|
00006c  2211              MOVS     r2,#0x11              ;42
00006e  4938              LDR      r1,|L1.336|
000070  4668              MOV      r0,sp                 ;42
000072  f7fffffe          BL       Float2Byte
000076  e01d              B        |L1.180|
000078  2215              MOVS     r2,#0x15              ;43
00007a  4935              LDR      r1,|L1.336|
00007c  4668              MOV      r0,sp                 ;43
00007e  f7fffffe          BL       Float2Byte
000082  e017              B        |L1.180|
000084  2219              MOVS     r2,#0x19              ;44
000086  4932              LDR      r1,|L1.336|
000088  4668              MOV      r0,sp                 ;44
00008a  f7fffffe          BL       Float2Byte
00008e  e011              B        |L1.180|
000090  221d              MOVS     r2,#0x1d              ;45
000092  492f              LDR      r1,|L1.336|
000094  4668              MOV      r0,sp                 ;45
000096  f7fffffe          BL       Float2Byte
00009a  e00b              B        |L1.180|
00009c  2221              MOVS     r2,#0x21              ;46
00009e  492c              LDR      r1,|L1.336|
0000a0  4668              MOV      r0,sp                 ;46
0000a2  f7fffffe          BL       Float2Byte
0000a6  e005              B        |L1.180|
0000a8  2225              MOVS     r2,#0x25              ;47
0000aa  4929              LDR      r1,|L1.336|
0000ac  4668              MOV      r0,sp                 ;47
0000ae  f7fffffe          BL       Float2Byte
0000b2  bf00              NOP                            ;47
                  |L1.180|
0000b4  bf00              NOP                            ;38
0000b6  bf00              NOP      
0000b8  e7b5              B        |L1.38|
;;;51     
                          ENDP

                  DataScope_Data_Generate PROC
;;;56     //返回0表示帧格式生成失败 
;;;57     unsigned char DataScope_Data_Generate(unsigned char Channel_Number)
0000ba  4601              MOV      r1,r0
;;;58     {
;;;59     	if ( (Channel_Number > 10) || (Channel_Number == 0) ) { return 0; }  //通道个数大于10或等于0，直接跳出，不执行函数
0000bc  290a              CMP      r1,#0xa
0000be  dc00              BGT      |L1.194|
0000c0  b909              CBNZ     r1,|L1.198|
                  |L1.194|
0000c2  2000              MOVS     r0,#0
                  |L1.196|
;;;60       else
;;;61       {	
;;;62     	 DataScope_OutPut_Buffer[0] = '$';  //帧头
;;;63     		
;;;64     	 switch(Channel_Number)   
;;;65        { 
;;;66     		 case 1:   DataScope_OutPut_Buffer[5]  =  5; return  6;  
;;;67     		 case 2:   DataScope_OutPut_Buffer[9]  =  9; return 10;
;;;68     		 case 3:   DataScope_OutPut_Buffer[13] = 13; return 14; 
;;;69     		 case 4:   DataScope_OutPut_Buffer[17] = 17; return 18;
;;;70     		 case 5:   DataScope_OutPut_Buffer[21] = 21; return 22;  
;;;71     		 case 6:   DataScope_OutPut_Buffer[25] = 25; return 26;
;;;72     		 case 7:   DataScope_OutPut_Buffer[29] = 29; return 30; 
;;;73     		 case 8:   DataScope_OutPut_Buffer[33] = 33; return 34; 
;;;74     		 case 9:   DataScope_OutPut_Buffer[37] = 37; return 38;
;;;75          case 10:  DataScope_OutPut_Buffer[41] = 41; return 42; 
;;;76        }	 
;;;77       }
;;;78     	return 0;
;;;79     }
0000c4  4770              BX       lr
                  |L1.198|
0000c6  2024              MOVS     r0,#0x24              ;62
0000c8  4a21              LDR      r2,|L1.336|
0000ca  7010              STRB     r0,[r2,#0]            ;62
0000cc  290b              CMP      r1,#0xb               ;64
0000ce  d23c              BCS      |L1.330|
0000d0  e8dff001          TBB      [pc,r1]               ;64
0000d4  3b060b10          DCB      0x3b,0x06,0x0b,0x10
0000d8  151a1f24          DCB      0x15,0x1a,0x1f,0x24
0000dc  292f3500          DCB      0x29,0x2f,0x35,0x00
0000e0  2005              MOVS     r0,#5                 ;66
0000e2  4a1b              LDR      r2,|L1.336|
0000e4  7150              STRB     r0,[r2,#5]            ;66
0000e6  2006              MOVS     r0,#6                 ;66
0000e8  e7ec              B        |L1.196|
0000ea  2009              MOVS     r0,#9                 ;67
0000ec  4a18              LDR      r2,|L1.336|
0000ee  7250              STRB     r0,[r2,#9]            ;67
0000f0  200a              MOVS     r0,#0xa               ;67
0000f2  e7e7              B        |L1.196|
0000f4  200d              MOVS     r0,#0xd               ;68
0000f6  4a16              LDR      r2,|L1.336|
0000f8  7350              STRB     r0,[r2,#0xd]          ;68
0000fa  200e              MOVS     r0,#0xe               ;68
0000fc  e7e2              B        |L1.196|
0000fe  2011              MOVS     r0,#0x11              ;69
000100  4a13              LDR      r2,|L1.336|
000102  7450              STRB     r0,[r2,#0x11]         ;69
000104  2012              MOVS     r0,#0x12              ;69
000106  e7dd              B        |L1.196|
000108  2015              MOVS     r0,#0x15              ;70
00010a  4a11              LDR      r2,|L1.336|
00010c  7550              STRB     r0,[r2,#0x15]         ;70
00010e  2016              MOVS     r0,#0x16              ;70
000110  e7d8              B        |L1.196|
000112  2019              MOVS     r0,#0x19              ;71
000114  4a0e              LDR      r2,|L1.336|
000116  7650              STRB     r0,[r2,#0x19]         ;71
000118  201a              MOVS     r0,#0x1a              ;71
00011a  e7d3              B        |L1.196|
00011c  201d              MOVS     r0,#0x1d              ;72
00011e  4a0c              LDR      r2,|L1.336|
000120  7750              STRB     r0,[r2,#0x1d]         ;72
000122  201e              MOVS     r0,#0x1e              ;72
000124  e7ce              B        |L1.196|
000126  2021              MOVS     r0,#0x21              ;73
000128  4a09              LDR      r2,|L1.336|
00012a  f8820021          STRB     r0,[r2,#0x21]         ;73
00012e  2022              MOVS     r0,#0x22              ;73
000130  e7c8              B        |L1.196|
000132  2025              MOVS     r0,#0x25              ;74
000134  4a06              LDR      r2,|L1.336|
000136  f8820025          STRB     r0,[r2,#0x25]         ;74
00013a  2026              MOVS     r0,#0x26              ;74
00013c  e7c2              B        |L1.196|
00013e  2029              MOVS     r0,#0x29              ;75
000140  4a03              LDR      r2,|L1.336|
000142  f8820029          STRB     r0,[r2,#0x29]         ;75
000146  202a              MOVS     r0,#0x2a              ;75
000148  e7bc              B        |L1.196|
                  |L1.330|
00014a  2000              MOVS     r0,#0                 ;78
00014c  e7ba              B        |L1.196|
;;;80     
                          ENDP

00014e  0000              DCW      0x0000
                  |L1.336|
                          DCD      DataScope_OutPut_Buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  DataScope_OutPut_Buffer
                          %        42

; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\ioi2c.o --depend=..\OBJ\ioi2c.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\OLED -I..\HARDWARE\ADC -I..\HARDWARE\TIMER -I..\HARDWARE\MOTOR -I..\BALANCE\CONTROL -I..\HARDWARE\ENCODER -I..\HARDWARE\IIC -I..\BALANCE\CONTROL -I..\BALANCE\DMP -I..\BALANCE\filter -I..\BALANCE\MPU6050 -I..\BALANCE\show -I..\BALANCE\controls -I..\HARDWARE\USART3 -I..\HARDWARE\EXTI -I..\HARDWARE\DataScope_DP -I"H:\KEIL MDK4\ARM\INC" -I"H:\KEIL MDK4\ARM\INC\STMicroelectronics" -DSTM32F10X_MD --omf_browse=..\OBJ\ioi2c.crf ..\HARDWARE\IIC\IOI2C.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IIC_Init PROC
;;;11     *******************************************************************************/
;;;12     void IIC_Init(void)
000000  48fc              LDR      r0,|L1.1012|
;;;13     {			
;;;14     	RCC->APB2ENR|=1<<3;//先使能外设IO PORTB时钟 							 
000002  6980              LDR      r0,[r0,#0x18]
000004  f0400008          ORR      r0,r0,#8
000008  49fa              LDR      r1,|L1.1012|
00000a  6188              STR      r0,[r1,#0x18]
;;;15     	GPIOB->CRH&=0XFFFFFF00;//PB8/9 推挽输出 
00000c  48fa              LDR      r0,|L1.1016|
00000e  6800              LDR      r0,[r0,#0]
000010  f02000ff          BIC      r0,r0,#0xff
000014  49f9              LDR      r1,|L1.1020|
000016  f8c10c04          STR      r0,[r1,#0xc04]
;;;16     	GPIOB->CRH|=0X00000033;	   
00001a  4608              MOV      r0,r1
00001c  f8d00c04          LDR      r0,[r0,#0xc04]
000020  f0400033          ORR      r0,r0,#0x33
000024  f8c10c04          STR      r0,[r1,#0xc04]
;;;17     }
000028  4770              BX       lr
;;;18     
                          ENDP

                  IIC_Start PROC
;;;22     *******************************************************************************/
;;;23     int IIC_Start(void)
00002a  b510              PUSH     {r4,lr}
;;;24     {
;;;25     	SDA_OUT();     //sda线输出
00002c  48f2              LDR      r0,|L1.1016|
00002e  6800              LDR      r0,[r0,#0]
000030  f02000f0          BIC      r0,r0,#0xf0
000034  49f1              LDR      r1,|L1.1020|
000036  f8c10c04          STR      r0,[r1,#0xc04]
00003a  4608              MOV      r0,r1
00003c  f8d00c04          LDR      r0,[r0,#0xc04]
000040  f0400030          ORR      r0,r0,#0x30
000044  49ec              LDR      r1,|L1.1016|
000046  6008              STR      r0,[r1,#0]
;;;26     	IIC_SDA=1;
000048  f04f0001          MOV      r0,#1
00004c  49ec              LDR      r1,|L1.1024|
00004e  f8c101a4          STR      r0,[r1,#0x1a4]
;;;27     	if(!READ_SDA)return 0;	
000052  4608              MOV      r0,r1
000054  f8d00124          LDR      r0,[r0,#0x124]
000058  b908              CBNZ     r0,|L1.94|
00005a  2000              MOVS     r0,#0
                  |L1.92|
;;;28     	IIC_SCL=1;
;;;29     	delay_us(1);
;;;30      	IIC_SDA=0;//START:when CLK is high,DATA change form high to low 
;;;31     	if(READ_SDA)return 0;
;;;32     	delay_us(1);
;;;33     	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据 
;;;34     	return 1;
;;;35     }
00005c  bd10              POP      {r4,pc}
                  |L1.94|
00005e  2001              MOVS     r0,#1                 ;28
000060  49e8              LDR      r1,|L1.1028|
000062  6008              STR      r0,[r1,#0]            ;28
000064  f7fffffe          BL       delay_us
000068  2000              MOVS     r0,#0                 ;30
00006a  49e5              LDR      r1,|L1.1024|
00006c  f8c101a4          STR      r0,[r1,#0x1a4]        ;30
000070  48e5              LDR      r0,|L1.1032|
000072  6800              LDR      r0,[r0,#0]            ;31
000074  b108              CBZ      r0,|L1.122|
000076  2000              MOVS     r0,#0                 ;31
000078  e7f0              B        |L1.92|
                  |L1.122|
00007a  2001              MOVS     r0,#1                 ;32
00007c  f7fffffe          BL       delay_us
000080  2000              MOVS     r0,#0                 ;33
000082  49e0              LDR      r1,|L1.1028|
000084  6008              STR      r0,[r1,#0]            ;33
000086  f04f0001          MOV      r0,#1                 ;34
00008a  e7e7              B        |L1.92|
;;;36     
                          ENDP

                  IIC_Stop PROC
;;;40     *******************************************************************************/	  
;;;41     void IIC_Stop(void)
00008c  b510              PUSH     {r4,lr}
;;;42     {
;;;43     	SDA_OUT();//sda线输出
00008e  48da              LDR      r0,|L1.1016|
000090  6800              LDR      r0,[r0,#0]
000092  f02000f0          BIC      r0,r0,#0xf0
000096  49d9              LDR      r1,|L1.1020|
000098  f8c10c04          STR      r0,[r1,#0xc04]
00009c  4608              MOV      r0,r1
00009e  f8d00c04          LDR      r0,[r0,#0xc04]
0000a2  f0400030          ORR      r0,r0,#0x30
0000a6  49d4              LDR      r1,|L1.1016|
0000a8  6008              STR      r0,[r1,#0]
;;;44     	IIC_SCL=0;
0000aa  f04f0000          MOV      r0,#0
0000ae  49d5              LDR      r1,|L1.1028|
0000b0  6008              STR      r0,[r1,#0]
;;;45     	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
0000b2  49d3              LDR      r1,|L1.1024|
0000b4  f8c101a4          STR      r0,[r1,#0x1a4]
;;;46      	delay_us(1);
0000b8  f04f0001          MOV      r0,#1
0000bc  f7fffffe          BL       delay_us
;;;47     	IIC_SCL=1; 
0000c0  2001              MOVS     r0,#1
0000c2  49d0              LDR      r1,|L1.1028|
0000c4  6008              STR      r0,[r1,#0]
;;;48     	IIC_SDA=1;//发送I2C总线结束信号
0000c6  49ce              LDR      r1,|L1.1024|
0000c8  f8c101a4          STR      r0,[r1,#0x1a4]
;;;49     	delay_us(1);							   	
0000cc  f7fffffe          BL       delay_us
;;;50     }
0000d0  bd10              POP      {r4,pc}
;;;51     
                          ENDP

                  IIC_Wait_Ack PROC
;;;57     *******************************************************************************/
;;;58     int IIC_Wait_Ack(void)
0000d2  b510              PUSH     {r4,lr}
;;;59     {
;;;60     	u8 ucErrTime=0;
0000d4  2400              MOVS     r4,#0
;;;61     	SDA_IN();      //SDA设置为输入  
0000d6  48c8              LDR      r0,|L1.1016|
0000d8  6800              LDR      r0,[r0,#0]
0000da  f02000f0          BIC      r0,r0,#0xf0
0000de  49c7              LDR      r1,|L1.1020|
0000e0  f8c10c04          STR      r0,[r1,#0xc04]
0000e4  4608              MOV      r0,r1
0000e6  f8d00c04          LDR      r0,[r0,#0xc04]
0000ea  f0400080          ORR      r0,r0,#0x80
0000ee  49c2              LDR      r1,|L1.1016|
0000f0  6008              STR      r0,[r1,#0]
;;;62     	IIC_SDA=1;
0000f2  f04f0001          MOV      r0,#1
0000f6  49c5              LDR      r1,|L1.1036|
0000f8  6008              STR      r0,[r1,#0]
;;;63     	delay_us(1);	   
0000fa  f7fffffe          BL       delay_us
;;;64     	IIC_SCL=1;
0000fe  2001              MOVS     r0,#1
000100  49bf              LDR      r1,|L1.1024|
000102  f8c101a0          STR      r0,[r1,#0x1a0]
;;;65     	delay_us(1);	 
000106  f7fffffe          BL       delay_us
;;;66     	while(READ_SDA)
00010a  e00a              B        |L1.290|
                  |L1.268|
;;;67     	{
;;;68     		ucErrTime++;
00010c  1c60              ADDS     r0,r4,#1
00010e  b2c4              UXTB     r4,r0
;;;69     		if(ucErrTime>50)
000110  2c32              CMP      r4,#0x32
000112  dd03              BLE      |L1.284|
;;;70     		{
;;;71     			IIC_Stop();
000114  f7fffffe          BL       IIC_Stop
;;;72     			return 0;
000118  2000              MOVS     r0,#0
                  |L1.282|
;;;73     		}
;;;74     	  delay_us(1);
;;;75     	}
;;;76     	IIC_SCL=0;//时钟输出0 	   
;;;77     	return 1;  
;;;78     } 
00011a  bd10              POP      {r4,pc}
                  |L1.284|
00011c  2001              MOVS     r0,#1                 ;74
00011e  f7fffffe          BL       delay_us
                  |L1.290|
000122  48b9              LDR      r0,|L1.1032|
000124  6800              LDR      r0,[r0,#0]            ;66
000126  2800              CMP      r0,#0                 ;66
000128  d1f0              BNE      |L1.268|
00012a  49b6              LDR      r1,|L1.1028|
00012c  6008              STR      r0,[r1,#0]            ;76
00012e  f04f0001          MOV      r0,#1                 ;77
000132  e7f2              B        |L1.282|
;;;79     
                          ENDP

                  IIC_Ack PROC
;;;83     *******************************************************************************/
;;;84     void IIC_Ack(void)
000134  b510              PUSH     {r4,lr}
;;;85     {
;;;86     	IIC_SCL=0;
000136  2000              MOVS     r0,#0
000138  49b2              LDR      r1,|L1.1028|
00013a  6008              STR      r0,[r1,#0]
;;;87     	SDA_OUT();
00013c  48af              LDR      r0,|L1.1020|
00013e  f8d00c04          LDR      r0,[r0,#0xc04]
000142  f02000f0          BIC      r0,r0,#0xf0
000146  49ad              LDR      r1,|L1.1020|
000148  f8c10c04          STR      r0,[r1,#0xc04]
00014c  4608              MOV      r0,r1
00014e  f8d00c04          LDR      r0,[r0,#0xc04]
000152  f0400030          ORR      r0,r0,#0x30
000156  49a8              LDR      r1,|L1.1016|
000158  6008              STR      r0,[r1,#0]
;;;88     	IIC_SDA=0;
00015a  f04f0000          MOV      r0,#0
00015e  49a8              LDR      r1,|L1.1024|
000160  f8c101a4          STR      r0,[r1,#0x1a4]
;;;89     	delay_us(1);
000164  f04f0001          MOV      r0,#1
000168  f7fffffe          BL       delay_us
;;;90     	IIC_SCL=1;
00016c  2001              MOVS     r0,#1
00016e  49a4              LDR      r1,|L1.1024|
000170  f8c101a0          STR      r0,[r1,#0x1a0]
;;;91     	delay_us(1);
000174  f7fffffe          BL       delay_us
;;;92     	IIC_SCL=0;
000178  2000              MOVS     r0,#0
00017a  49a1              LDR      r1,|L1.1024|
00017c  f8c101a0          STR      r0,[r1,#0x1a0]
;;;93     }
000180  bd10              POP      {r4,pc}
;;;94     	
                          ENDP

                  IIC_NAck PROC
;;;98     *******************************************************************************/	    
;;;99     void IIC_NAck(void)
000182  b510              PUSH     {r4,lr}
;;;100    {
;;;101    	IIC_SCL=0;
000184  2000              MOVS     r0,#0
000186  499f              LDR      r1,|L1.1028|
000188  6008              STR      r0,[r1,#0]
;;;102    	SDA_OUT();
00018a  489c              LDR      r0,|L1.1020|
00018c  f8d00c04          LDR      r0,[r0,#0xc04]
000190  f02000f0          BIC      r0,r0,#0xf0
000194  4999              LDR      r1,|L1.1020|
000196  f8c10c04          STR      r0,[r1,#0xc04]
00019a  4608              MOV      r0,r1
00019c  f8d00c04          LDR      r0,[r0,#0xc04]
0001a0  f0400030          ORR      r0,r0,#0x30
0001a4  4994              LDR      r1,|L1.1016|
0001a6  6008              STR      r0,[r1,#0]
;;;103    	IIC_SDA=1;
0001a8  f04f0001          MOV      r0,#1
0001ac  4994              LDR      r1,|L1.1024|
0001ae  f8c101a4          STR      r0,[r1,#0x1a4]
;;;104    	delay_us(1);
0001b2  f7fffffe          BL       delay_us
;;;105    	IIC_SCL=1;
0001b6  2001              MOVS     r0,#1
0001b8  4991              LDR      r1,|L1.1024|
0001ba  f8c101a0          STR      r0,[r1,#0x1a0]
;;;106    	delay_us(1);
0001be  f7fffffe          BL       delay_us
;;;107    	IIC_SCL=0;
0001c2  2000              MOVS     r0,#0
0001c4  498e              LDR      r1,|L1.1024|
0001c6  f8c101a0          STR      r0,[r1,#0x1a0]
;;;108    }
0001ca  bd10              POP      {r4,pc}
;;;109    /**************************实现函数********************************************
                          ENDP

                  IIC_Send_Byte PROC
;;;112    *******************************************************************************/		  
;;;113    void IIC_Send_Byte(u8 txd)
0001cc  b570              PUSH     {r4-r6,lr}
;;;114    {                        
0001ce  4604              MOV      r4,r0
;;;115        u8 t;   
;;;116    	SDA_OUT(); 	    
0001d0  4889              LDR      r0,|L1.1016|
0001d2  6800              LDR      r0,[r0,#0]
0001d4  f02000f0          BIC      r0,r0,#0xf0
0001d8  4988              LDR      r1,|L1.1020|
0001da  f8c10c04          STR      r0,[r1,#0xc04]
0001de  4608              MOV      r0,r1
0001e0  f8d00c04          LDR      r0,[r0,#0xc04]
0001e4  f0400030          ORR      r0,r0,#0x30
0001e8  4983              LDR      r1,|L1.1016|
0001ea  6008              STR      r0,[r1,#0]
;;;117        IIC_SCL=0;//拉低时钟开始数据传输
0001ec  f04f0000          MOV      r0,#0
0001f0  4984              LDR      r1,|L1.1028|
0001f2  6008              STR      r0,[r1,#0]
;;;118        for(t=0;t<8;t++)
0001f4  4605              MOV      r5,r0
0001f6  e019              B        |L1.556|
                  |L1.504|
;;;119        {              
;;;120            IIC_SDA=(txd&0x80)>>7;
0001f8  09e0              LSRS     r0,r4,#7
0001fa  4984              LDR      r1,|L1.1036|
0001fc  6008              STR      r0,[r1,#0]
;;;121            txd<<=1; 	  
0001fe  ea4f6044          LSL      r0,r4,#25
000202  ea4f6410          LSR      r4,r0,#24
;;;122    		delay_us(1);   
000206  f04f0001          MOV      r0,#1
00020a  f7fffffe          BL       delay_us
;;;123    		IIC_SCL=1;
00020e  2001              MOVS     r0,#1
000210  497b              LDR      r1,|L1.1024|
000212  f8c101a0          STR      r0,[r1,#0x1a0]
;;;124    		delay_us(1); 
000216  f7fffffe          BL       delay_us
;;;125    		IIC_SCL=0;	
00021a  2000              MOVS     r0,#0
00021c  4979              LDR      r1,|L1.1028|
00021e  6008              STR      r0,[r1,#0]
;;;126    		delay_us(1);
000220  f04f0001          MOV      r0,#1
000224  f7fffffe          BL       delay_us
000228  1c68              ADDS     r0,r5,#1              ;118
00022a  b2c5              UXTB     r5,r0                 ;118
                  |L1.556|
00022c  2d08              CMP      r5,#8                 ;118
00022e  dbe3              BLT      |L1.504|
;;;127        }	 
;;;128    } 	 
000230  bd70              POP      {r4-r6,pc}
;;;129      
                          ENDP

                  i2cWrite PROC
;;;133    *******************************************************************************/
;;;134    int i2cWrite(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *data)
000232  e92d41f0          PUSH     {r4-r8,lr}
;;;135    {
000236  4605              MOV      r5,r0
000238  460e              MOV      r6,r1
00023a  4617              MOV      r7,r2
00023c  4698              MOV      r8,r3
;;;136    		int i;
;;;137        if (!IIC_Start())
00023e  f7fffffe          BL       IIC_Start
000242  b910              CBNZ     r0,|L1.586|
;;;138            return 1;
000244  2001              MOVS     r0,#1
                  |L1.582|
;;;139        IIC_Send_Byte(addr << 1 );
;;;140        if (!IIC_Wait_Ack()) {
;;;141            IIC_Stop();
;;;142            return 1;
;;;143        }
;;;144        IIC_Send_Byte(reg);
;;;145        IIC_Wait_Ack();
;;;146    		for (i = 0; i < len; i++) {
;;;147            IIC_Send_Byte(data[i]);
;;;148            if (!IIC_Wait_Ack()) {
;;;149                IIC_Stop();
;;;150                return 0;
;;;151            }
;;;152        }
;;;153        IIC_Stop();
;;;154        return 0;
;;;155    }
000246  e8bd81f0          POP      {r4-r8,pc}
                  |L1.586|
00024a  0669              LSLS     r1,r5,#25             ;139
00024c  0e08              LSRS     r0,r1,#24             ;139
00024e  f7fffffe          BL       IIC_Send_Byte
000252  f7fffffe          BL       IIC_Wait_Ack
000256  b918              CBNZ     r0,|L1.608|
000258  f7fffffe          BL       IIC_Stop
00025c  2001              MOVS     r0,#1                 ;142
00025e  e7f2              B        |L1.582|
                  |L1.608|
000260  4630              MOV      r0,r6                 ;144
000262  f7fffffe          BL       IIC_Send_Byte
000266  f7fffffe          BL       IIC_Wait_Ack
00026a  2400              MOVS     r4,#0                 ;146
00026c  e00b              B        |L1.646|
                  |L1.622|
00026e  f8180004          LDRB     r0,[r8,r4]            ;147
000272  f7fffffe          BL       IIC_Send_Byte
000276  f7fffffe          BL       IIC_Wait_Ack
00027a  b918              CBNZ     r0,|L1.644|
00027c  f7fffffe          BL       IIC_Stop
000280  2000              MOVS     r0,#0                 ;150
000282  e7e0              B        |L1.582|
                  |L1.644|
000284  1c64              ADDS     r4,r4,#1              ;146
                  |L1.646|
000286  42bc              CMP      r4,r7                 ;146
000288  dbf1              BLT      |L1.622|
00028a  f7fffffe          BL       IIC_Stop
00028e  2000              MOVS     r0,#0                 ;154
000290  e7d9              B        |L1.582|
;;;156    /**************************实现函数********************************************
                          ENDP

                  IIC_Read_Byte PROC
;;;190    *******************************************************************************/  
;;;191    u8 IIC_Read_Byte(unsigned char ack)
000292  b570              PUSH     {r4-r6,lr}
;;;192    {
000294  4605              MOV      r5,r0
;;;193    	unsigned char i,receive=0;
000296  2400              MOVS     r4,#0
;;;194    	SDA_IN();//SDA设置为输入
000298  4857              LDR      r0,|L1.1016|
00029a  6800              LDR      r0,[r0,#0]
00029c  f02000f0          BIC      r0,r0,#0xf0
0002a0  4956              LDR      r1,|L1.1020|
0002a2  f8c10c04          STR      r0,[r1,#0xc04]
0002a6  4608              MOV      r0,r1
0002a8  f8d00c04          LDR      r0,[r0,#0xc04]
0002ac  f0400080          ORR      r0,r0,#0x80
0002b0  f8c10c04          STR      r0,[r1,#0xc04]
;;;195        for(i=0;i<8;i++ )
0002b4  f04f0600          MOV      r6,#0
0002b8  e016              B        |L1.744|
                  |L1.698|
;;;196    	{
;;;197            IIC_SCL=0; 
0002ba  2000              MOVS     r0,#0
0002bc  4951              LDR      r1,|L1.1028|
0002be  6008              STR      r0,[r1,#0]
;;;198            delay_us(2);
0002c0  f04f0002          MOV      r0,#2
0002c4  f7fffffe          BL       delay_us
;;;199    		IIC_SCL=1;
0002c8  2001              MOVS     r0,#1
0002ca  494d              LDR      r1,|L1.1024|
0002cc  f8c101a0          STR      r0,[r1,#0x1a0]
;;;200            receive<<=1;
0002d0  0660              LSLS     r0,r4,#25
0002d2  0e04              LSRS     r4,r0,#24
;;;201            if(READ_SDA)receive++;   
0002d4  484c              LDR      r0,|L1.1032|
0002d6  6800              LDR      r0,[r0,#0]
0002d8  b108              CBZ      r0,|L1.734|
0002da  1c60              ADDS     r0,r4,#1
0002dc  b2c4              UXTB     r4,r0
                  |L1.734|
;;;202    		delay_us(2); 
0002de  2002              MOVS     r0,#2
0002e0  f7fffffe          BL       delay_us
0002e4  1c70              ADDS     r0,r6,#1              ;195
0002e6  b2c6              UXTB     r6,r0                 ;195
                  |L1.744|
0002e8  2e08              CMP      r6,#8                 ;195
0002ea  dbe6              BLT      |L1.698|
;;;203        }					 
;;;204        if (ack)
0002ec  b115              CBZ      r5,|L1.756|
;;;205            IIC_Ack(); //发送ACK 
0002ee  f7fffffe          BL       IIC_Ack
0002f2  e001              B        |L1.760|
                  |L1.756|
;;;206        else
;;;207            IIC_NAck();//发送nACK  
0002f4  f7fffffe          BL       IIC_NAck
                  |L1.760|
;;;208        return receive;
0002f8  4620              MOV      r0,r4
;;;209    }
0002fa  bd70              POP      {r4-r6,pc}
;;;210    
                          ENDP

                  i2cRead PROC
;;;159    *******************************************************************************/
;;;160    int i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
0002fc  e92d41f0          PUSH     {r4-r8,lr}
;;;161    {
000300  4606              MOV      r6,r0
000302  460f              MOV      r7,r1
000304  4614              MOV      r4,r2
000306  461d              MOV      r5,r3
;;;162        if (!IIC_Start())
000308  f7fffffe          BL       IIC_Start
00030c  b910              CBNZ     r0,|L1.788|
;;;163            return 1;
00030e  2001              MOVS     r0,#1
                  |L1.784|
;;;164        IIC_Send_Byte(addr << 1);
;;;165        if (!IIC_Wait_Ack()) {
;;;166            IIC_Stop();
;;;167            return 1;
;;;168        }
;;;169        IIC_Send_Byte(reg);
;;;170        IIC_Wait_Ack();
;;;171        IIC_Start();
;;;172        IIC_Send_Byte((addr << 1)+1);
;;;173        IIC_Wait_Ack();
;;;174        while (len) {
;;;175            if (len == 1)
;;;176                *buf = IIC_Read_Byte(0);
;;;177            else
;;;178                *buf = IIC_Read_Byte(1);
;;;179            buf++;
;;;180            len--;
;;;181        }
;;;182        IIC_Stop();
;;;183        return 0;
;;;184    }
000310  e8bd81f0          POP      {r4-r8,pc}
                  |L1.788|
000314  0671              LSLS     r1,r6,#25             ;164
000316  0e08              LSRS     r0,r1,#24             ;164
000318  f7fffffe          BL       IIC_Send_Byte
00031c  f7fffffe          BL       IIC_Wait_Ack
000320  b918              CBNZ     r0,|L1.810|
000322  f7fffffe          BL       IIC_Stop
000326  2001              MOVS     r0,#1                 ;167
000328  e7f2              B        |L1.784|
                  |L1.810|
00032a  4638              MOV      r0,r7                 ;169
00032c  f7fffffe          BL       IIC_Send_Byte
000330  f7fffffe          BL       IIC_Wait_Ack
000334  f7fffffe          BL       IIC_Start
000338  2101              MOVS     r1,#1                 ;172
00033a  eb010146          ADD      r1,r1,r6,LSL #1       ;172
00033e  b2c8              UXTB     r0,r1                 ;172
000340  f7fffffe          BL       IIC_Send_Byte
000344  f7fffffe          BL       IIC_Wait_Ack
000348  e00d              B        |L1.870|
                  |L1.842|
00034a  2c01              CMP      r4,#1                 ;175
00034c  d104              BNE      |L1.856|
00034e  2000              MOVS     r0,#0                 ;176
000350  f7fffffe          BL       IIC_Read_Byte
000354  7028              STRB     r0,[r5,#0]            ;176
000356  e003              B        |L1.864|
                  |L1.856|
000358  2001              MOVS     r0,#1                 ;178
00035a  f7fffffe          BL       IIC_Read_Byte
00035e  7028              STRB     r0,[r5,#0]            ;178
                  |L1.864|
000360  1c6d              ADDS     r5,r5,#1              ;179
000362  1e60              SUBS     r0,r4,#1              ;180
000364  b2c4              UXTB     r4,r0                 ;180
                  |L1.870|
000366  2c00              CMP      r4,#0                 ;174
000368  d1ef              BNE      |L1.842|
00036a  f7fffffe          BL       IIC_Stop
00036e  2000              MOVS     r0,#0                 ;183
000370  e7ce              B        |L1.784|
;;;185    
                          ENDP

                  I2C_ReadOneByte PROC
;;;217    *******************************************************************************/ 
;;;218    unsigned char I2C_ReadOneByte(unsigned char I2C_Addr,unsigned char addr)
000372  b570              PUSH     {r4-r6,lr}
;;;219    {
000374  4605              MOV      r5,r0
000376  460e              MOV      r6,r1
;;;220    	unsigned char res=0;
000378  2400              MOVS     r4,#0
;;;221    	
;;;222    	IIC_Start();	
00037a  f7fffffe          BL       IIC_Start
;;;223    	IIC_Send_Byte(I2C_Addr);	   //发送写命令
00037e  4628              MOV      r0,r5
000380  f7fffffe          BL       IIC_Send_Byte
;;;224    	res++;
000384  1c64              ADDS     r4,r4,#1
;;;225    	IIC_Wait_Ack();
000386  f7fffffe          BL       IIC_Wait_Ack
;;;226    	IIC_Send_Byte(addr); res++;  //发送地址
00038a  4630              MOV      r0,r6
00038c  f7fffffe          BL       IIC_Send_Byte
000390  1c64              ADDS     r4,r4,#1
;;;227    	IIC_Wait_Ack();	  
000392  f7fffffe          BL       IIC_Wait_Ack
;;;228    	//IIC_Stop();//产生一个停止条件	
;;;229    	IIC_Start();
000396  f7fffffe          BL       IIC_Start
;;;230    	IIC_Send_Byte(I2C_Addr+1); res++;          //进入接收模式			   
00039a  1c68              ADDS     r0,r5,#1
00039c  b2c0              UXTB     r0,r0
00039e  f7fffffe          BL       IIC_Send_Byte
0003a2  1c64              ADDS     r4,r4,#1
;;;231    	IIC_Wait_Ack();
0003a4  f7fffffe          BL       IIC_Wait_Ack
;;;232    	res=IIC_Read_Byte(0);	   
0003a8  2000              MOVS     r0,#0
0003aa  f7fffffe          BL       IIC_Read_Byte
0003ae  4604              MOV      r4,r0
;;;233        IIC_Stop();//产生一个停止条件
0003b0  f7fffffe          BL       IIC_Stop
;;;234    
;;;235    	return res;
0003b4  4620              MOV      r0,r4
;;;236    }
0003b6  bd70              POP      {r4-r6,pc}
;;;237    
                          ENDP

                  IICreadBytes PROC
;;;247    *******************************************************************************/ 
;;;248    u8 IICreadBytes(u8 dev, u8 reg, u8 length, u8 *data){
0003b8  e92d41f0          PUSH     {r4-r8,lr}
0003bc  4680              MOV      r8,r0
0003be  460f              MOV      r7,r1
0003c0  4615              MOV      r5,r2
0003c2  461e              MOV      r6,r3
;;;249        u8 count = 0;
0003c4  2400              MOVS     r4,#0
;;;250    	
;;;251    	IIC_Start();
0003c6  f7fffffe          BL       IIC_Start
;;;252    	IIC_Send_Byte(dev);	   //发送写命令
0003ca  4640              MOV      r0,r8
0003cc  f7fffffe          BL       IIC_Send_Byte
;;;253    	IIC_Wait_Ack();
0003d0  f7fffffe          BL       IIC_Wait_Ack
;;;254    	IIC_Send_Byte(reg);   //发送地址
0003d4  4638              MOV      r0,r7
0003d6  f7fffffe          BL       IIC_Send_Byte
;;;255        IIC_Wait_Ack();	  
0003da  f7fffffe          BL       IIC_Wait_Ack
;;;256    	IIC_Start();
0003de  f7fffffe          BL       IIC_Start
;;;257    	IIC_Send_Byte(dev+1);  //进入接收模式	
0003e2  f1080001          ADD      r0,r8,#1
0003e6  b2c0              UXTB     r0,r0
0003e8  f7fffffe          BL       IIC_Send_Byte
;;;258    	IIC_Wait_Ack();
0003ec  f7fffffe          BL       IIC_Wait_Ack
;;;259    	
;;;260        for(count=0;count<length;count++){
0003f0  bf00              NOP      
0003f2  e01b              B        |L1.1068|
                  |L1.1012|
                          DCD      0x40021000
                  |L1.1016|
                          DCD      0x40010c04
                  |L1.1020|
                          DCD      0x40010000
                  |L1.1024|
                          DCD      0x42218000
                  |L1.1028|
                          DCD      0x422181a0
                  |L1.1032|
                          DCD      0x42218124
                  |L1.1036|
                          DCD      0x422181a4
                  |L1.1040|
;;;261    		 
;;;262    		 if(count!=length-1)data[count]=IIC_Read_Byte(1);  //带ACK的读数据
000410  1e68              SUBS     r0,r5,#1
000412  42a0              CMP      r0,r4
000414  d004              BEQ      |L1.1056|
000416  2001              MOVS     r0,#1
000418  f7fffffe          BL       IIC_Read_Byte
00041c  5530              STRB     r0,[r6,r4]
00041e  e003              B        |L1.1064|
                  |L1.1056|
;;;263    		 	else  data[count]=IIC_Read_Byte(0);	 //最后一个字节NACK
000420  2000              MOVS     r0,#0
000422  f7fffffe          BL       IIC_Read_Byte
000426  5530              STRB     r0,[r6,r4]
                  |L1.1064|
000428  1c60              ADDS     r0,r4,#1              ;260
00042a  b2c4              UXTB     r4,r0                 ;260
                  |L1.1068|
00042c  42ac              CMP      r4,r5                 ;260
00042e  dbef              BLT      |L1.1040|
;;;264    	}
;;;265        IIC_Stop();//产生一个停止条件
000430  f7fffffe          BL       IIC_Stop
;;;266        return count;
000434  4620              MOV      r0,r4
;;;267    }
000436  e8bd81f0          POP      {r4-r8,pc}
;;;268    
                          ENDP

                  IICwriteBytes PROC
;;;277    *******************************************************************************/ 
;;;278    u8 IICwriteBytes(u8 dev, u8 reg, u8 length, u8* data){
00043a  e92d41f0          PUSH     {r4-r8,lr}
00043e  4680              MOV      r8,r0
000440  460d              MOV      r5,r1
000442  4616              MOV      r6,r2
000444  461f              MOV      r7,r3
;;;279      
;;;280     	u8 count = 0;
000446  2400              MOVS     r4,#0
;;;281    	IIC_Start();
000448  f7fffffe          BL       IIC_Start
;;;282    	IIC_Send_Byte(dev);	   //发送写命令
00044c  4640              MOV      r0,r8
00044e  f7fffffe          BL       IIC_Send_Byte
;;;283    	IIC_Wait_Ack();
000452  f7fffffe          BL       IIC_Wait_Ack
;;;284    	IIC_Send_Byte(reg);   //发送地址
000456  4628              MOV      r0,r5
000458  f7fffffe          BL       IIC_Send_Byte
;;;285        IIC_Wait_Ack();	  
00045c  f7fffffe          BL       IIC_Wait_Ack
;;;286    	for(count=0;count<length;count++){
000460  bf00              NOP      
000462  e006              B        |L1.1138|
                  |L1.1124|
;;;287    		IIC_Send_Byte(data[count]); 
000464  5d38              LDRB     r0,[r7,r4]
000466  f7fffffe          BL       IIC_Send_Byte
;;;288    		IIC_Wait_Ack(); 
00046a  f7fffffe          BL       IIC_Wait_Ack
00046e  1c60              ADDS     r0,r4,#1              ;286
000470  b2c4              UXTB     r4,r0                 ;286
                  |L1.1138|
000472  42b4              CMP      r4,r6                 ;286
000474  dbf6              BLT      |L1.1124|
;;;289    	 }
;;;290    	IIC_Stop();//产生一个停止条件
000476  f7fffffe          BL       IIC_Stop
;;;291    
;;;292        return 1; //status == 0;
00047a  2001              MOVS     r0,#1
;;;293    }
00047c  e8bd81f0          POP      {r4-r8,pc}
;;;294    
                          ENDP

                  IICreadByte PROC
;;;302    *******************************************************************************/ 
;;;303    u8 IICreadByte(u8 dev, u8 reg, u8 *data){
000480  b570              PUSH     {r4-r6,lr}
000482  4605              MOV      r5,r0
000484  460e              MOV      r6,r1
000486  4614              MOV      r4,r2
;;;304    	*data=I2C_ReadOneByte(dev, reg);
000488  4631              MOV      r1,r6
00048a  4628              MOV      r0,r5
00048c  f7fffffe          BL       I2C_ReadOneByte
000490  7020              STRB     r0,[r4,#0]
;;;305        return 1;
000492  2001              MOVS     r0,#1
;;;306    }
000494  bd70              POP      {r4-r6,pc}
;;;307    
                          ENDP

                  IICwriteByte PROC
;;;315    *******************************************************************************/ 
;;;316    unsigned char IICwriteByte(unsigned char dev, unsigned char reg, unsigned char data){
000496  b537              PUSH     {r0-r2,r4,r5,lr}
000498  4604              MOV      r4,r0
00049a  460d              MOV      r5,r1
;;;317        return IICwriteBytes(dev, reg, 1, &data);
00049c  ab02              ADD      r3,sp,#8
00049e  2201              MOVS     r2,#1
0004a0  4629              MOV      r1,r5
0004a2  4620              MOV      r0,r4
0004a4  f7fffffe          BL       IICwriteBytes
;;;318    }
0004a8  bd3e              POP      {r1-r5,pc}
;;;319    
                          ENDP

                  IICwriteBits PROC
;;;330    *******************************************************************************/ 
;;;331    u8 IICwriteBits(u8 dev,u8 reg,u8 bitStart,u8 length,u8 data)
0004aa  e92d43f8          PUSH     {r3-r9,lr}
;;;332    {
0004ae  4607              MOV      r7,r0
0004b0  4688              MOV      r8,r1
0004b2  4614              MOV      r4,r2
0004b4  461d              MOV      r5,r3
0004b6  9e08              LDR      r6,[sp,#0x20]
;;;333    
;;;334        u8 b;
;;;335        if (IICreadByte(dev, reg, &b) != 0) {
0004b8  466a              MOV      r2,sp
0004ba  4641              MOV      r1,r8
0004bc  4638              MOV      r0,r7
0004be  f7fffffe          BL       IICreadByte
0004c2  b338              CBZ      r0,|L1.1300|
;;;336            u8 mask = (0xFF << (bitStart + 1)) | 0xFF >> ((8 - bitStart) + length - 1);
0004c4  1c60              ADDS     r0,r4,#1
0004c6  21ff              MOVS     r1,#0xff
0004c8  fa01f000          LSL      r0,r1,r0
0004cc  f1c40108          RSB      r1,r4,#8
0004d0  4429              ADD      r1,r1,r5
0004d2  1e49              SUBS     r1,r1,#1
0004d4  22ff              MOVS     r2,#0xff
0004d6  410a              ASRS     r2,r2,r1
0004d8  4310              ORRS     r0,r0,r2
0004da  f00009ff          AND      r9,r0,#0xff
;;;337            data <<= (8 - length);
0004de  f1c50008          RSB      r0,r5,#8
0004e2  fa06f000          LSL      r0,r6,r0
0004e6  b2c6              UXTB     r6,r0
;;;338            data >>= (7 - bitStart);
0004e8  f1c40007          RSB      r0,r4,#7
0004ec  fa46f000          ASR      r0,r6,r0
0004f0  b2c6              UXTB     r6,r0
;;;339            b &= mask;
0004f2  f89d0000          LDRB     r0,[sp,#0]
0004f6  ea000009          AND      r0,r0,r9
0004fa  9000              STR      r0,[sp,#0]
;;;340            b |= data;
0004fc  f89d0000          LDRB     r0,[sp,#0]
000500  4330              ORRS     r0,r0,r6
000502  9000              STR      r0,[sp,#0]
;;;341            return IICwriteByte(dev, reg, b);
000504  f89d2000          LDRB     r2,[sp,#0]
000508  4641              MOV      r1,r8
00050a  4638              MOV      r0,r7
00050c  f7fffffe          BL       IICwriteByte
                  |L1.1296|
;;;342        } else {
;;;343            return 0;
;;;344        }
;;;345    }
000510  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1300|
000514  2000              MOVS     r0,#0                 ;343
000516  e7fb              B        |L1.1296|
;;;346    
                          ENDP

                  IICwriteBit PROC
;;;356    *******************************************************************************/ 
;;;357    u8 IICwriteBit(u8 dev, u8 reg, u8 bitNum, u8 data){
000518  b5f8              PUSH     {r3-r7,lr}
00051a  4606              MOV      r6,r0
00051c  460f              MOV      r7,r1
00051e  4614              MOV      r4,r2
000520  461d              MOV      r5,r3
;;;358        u8 b;
;;;359        IICreadByte(dev, reg, &b);
000522  466a              MOV      r2,sp
000524  4639              MOV      r1,r7
000526  4630              MOV      r0,r6
000528  f7fffffe          BL       IICreadByte
;;;360        b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
00052c  b12d              CBZ      r5,|L1.1338|
00052e  2001              MOVS     r0,#1
000530  40a0              LSLS     r0,r0,r4
000532  f89d1000          LDRB     r1,[sp,#0]
000536  4308              ORRS     r0,r0,r1
000538  e005              B        |L1.1350|
                  |L1.1338|
00053a  2001              MOVS     r0,#1
00053c  40a0              LSLS     r0,r0,r4
00053e  f89d1000          LDRB     r1,[sp,#0]
000542  ea210000          BIC      r0,r1,r0
                  |L1.1350|
000546  b2c0              UXTB     r0,r0
000548  9000              STR      r0,[sp,#0]
;;;361        return IICwriteByte(dev, reg, b);
00054a  f89d2000          LDRB     r2,[sp,#0]
00054e  4639              MOV      r1,r7
000550  4630              MOV      r0,r6
000552  f7fffffe          BL       IICwriteByte
;;;362    }
000556  bdf8              POP      {r3-r7,pc}
;;;363    
                          ENDP

